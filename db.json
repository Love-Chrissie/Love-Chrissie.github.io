{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/images/WX20181010-205935@2x.png","path":"images/WX20181010-205935@2x.png","modified":0,"renderable":0},{"_id":"source/images/case1.png","path":"images/case1.png","modified":0,"renderable":0},{"_id":"source/images/case2.png","path":"images/case2.png","modified":0,"renderable":0},{"_id":"source/images/fanshu.png","path":"images/fanshu.png","modified":0,"renderable":0},{"_id":"source/images/case3.png","path":"images/case3.png","modified":0,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/宫园薰1.jpg","path":"images/宫园薰1.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/LICENSE","path":"lib/reading_progress/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/package.json","path":"lib/reading_progress/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/README.md","path":"lib/reading_progress/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/reading_progress.js","path":"lib/reading_progress/reading_progress.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/reading_progress.min.js","path":"lib/reading_progress/reading_progress.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/imgshare.css","path":"static/api/css/imgshare.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/like.css","path":"static/api/css/like.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/share_popup.css","path":"static/api/css/share_popup.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/select_share.css","path":"static/api/css/select_share.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/share_style0_16.css","path":"static/api/css/share_style0_16.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/share_style0_32.css","path":"static/api/css/share_style0_32.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/share_style1_16.css","path":"static/api/css/share_style1_16.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/share_style0_24.css","path":"static/api/css/share_style0_24.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/share_style1_24.css","path":"static/api/css/share_style1_24.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/share_style1_32.css","path":"static/api/css/share_style1_32.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/share_style2_24.css","path":"static/api/css/share_style2_24.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/share_style2.css","path":"static/api/css/share_style2.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/share_style2_16.css","path":"static/api/css/share_style2_16.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/share_style2_32.css","path":"static/api/css/share_style2_32.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/share_style4.css","path":"static/api/css/share_style4.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/weixin_popup.css","path":"static/api/css/weixin_popup.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/css/slide_share.css","path":"static/api/css/slide_share.css","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/share.js","path":"static/api/js/share.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/trans/data.js","path":"static/api/js/trans/data.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/trans/logger.js","path":"static/api/js/trans/logger.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/icons_0_16.png","path":"static/api/img/share/icons_0_16.png","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/icons_0_24.png","path":"static/api/img/share/icons_0_24.png","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/icons_1_16.png","path":"static/api/img/share/icons_1_16.png","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/icons_0_32.png","path":"static/api/img/share/icons_0_32.png","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/icons_1_24.png","path":"static/api/img/share/icons_1_24.png","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/icons_1_32.png","path":"static/api/img/share/icons_1_32.png","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/icons_2_16.png","path":"static/api/img/share/icons_2_16.png","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/icons_2_24.png","path":"static/api/img/share/icons_2_24.png","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/l1.gif","path":"static/api/img/share/l1.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/icons_2_32.png","path":"static/api/img/share/icons_2_32.png","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/l0.gif","path":"static/api/img/share/l0.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/l2.gif","path":"static/api/img/share/l2.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/l3.gif","path":"static/api/img/share/l3.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/l5.gif","path":"static/api/img/share/l5.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/l4.gif","path":"static/api/img/share/l4.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/l6.gif","path":"static/api/img/share/l6.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/l7.gif","path":"static/api/img/share/l7.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/l8.gif","path":"static/api/img/share/l8.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/r1.gif","path":"static/api/img/share/r1.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/pop_c.gif","path":"static/api/img/share/pop_c.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/r0.gif","path":"static/api/img/share/r0.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/r4.gif","path":"static/api/img/share/r4.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/r3.gif","path":"static/api/img/share/r3.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/r5.gif","path":"static/api/img/share/r5.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/r2.gif","path":"static/api/img/share/r2.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/r6.gif","path":"static/api/img/share/r6.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/r7.gif","path":"static/api/img/share/r7.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/sc.png","path":"static/api/img/share/sc.png","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/r8.gif","path":"static/api/img/share/r8.gif","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/selectshare_close.png","path":"static/api/img/share/selectshare_close.png","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/base/class.js","path":"static/api/js/base/class.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/img/share/share-search-icon.png","path":"static/api/img/share/share-search-icon.png","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/component/animate.js","path":"static/api/js/component/animate.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/component/comm_tools.js","path":"static/api/js/component/comm_tools.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/component/anticheat.js","path":"static/api/js/component/anticheat.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/component/pop_base.js","path":"static/api/js/component/pop_base.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/component/partners.js","path":"static/api/js/component/partners.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/component/pop_popup.js","path":"static/api/js/component/pop_popup.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/component/pop_dialog.js","path":"static/api/js/component/pop_dialog.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/component/pop_popup_slide.js","path":"static/api/js/component/pop_popup_slide.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/conf/define.js","path":"static/api/js/conf/define.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/component/qrcode.js","path":"static/api/js/component/qrcode.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/conf/const.js","path":"static/api/js/conf/const.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/share/api_base.js","path":"static/api/js/share/api_base.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/share/combine_api.js","path":"static/api/js/share/combine_api.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/share/like_api.js","path":"static/api/js/share/like_api.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/share/image_api.js","path":"static/api/js/share/image_api.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/share/likeshare.js","path":"static/api/js/share/likeshare.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/share/select_api.js","path":"static/api/js/share/select_api.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/start/router.js","path":"static/api/js/start/router.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/trans/trans.js","path":"static/api/js/trans/trans.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/share/share_api.js","path":"static/api/js/share/share_api.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/share/slide_api.js","path":"static/api/js/share/slide_api.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/trans/trans_bdxc.js","path":"static/api/js/trans/trans_bdxc.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/trans/trans_weixin.js","path":"static/api/js/trans/trans_weixin.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/view/image_view.js","path":"static/api/js/view/image_view.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/trans/trans_bdysc.js","path":"static/api/js/trans/trans_bdysc.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/view/like_view.js","path":"static/api/js/view/like_view.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/view/select_view.js","path":"static/api/js/view/select_view.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/view/share_view.js","path":"static/api/js/view/share_view.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/view/slide_view.js","path":"static/api/js/view/slide_view.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/view/view_base.js","path":"static/api/js/view/view_base.js","modified":0,"renderable":1},{"_id":"themes/next/source/static/api/js/base/tangram.js","path":"static/api/js/base/tangram.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/ishan-seefromthesky-490172-unsplash.jpg","path":"images/ishan-seefromthesky-490172-unsplash.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/ben-krygsman-745458-unsplash.jpg","path":"images/ben-krygsman-745458-unsplash.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"c703dbc612d9527030652c31fa934117c0e6f97d","modified":1546172650561},{"_id":"source/baidu_verify_ZiJSdPfAJ7.html","hash":"b2d5cbccdbe7590d241b1d07dce2c213cf3fd8c2","modified":1537934006053},{"_id":"source/google2ae3db88cfdeb72a.html","hash":"6540fac5cb9d3dde754e647616148277f15da5e7","modified":1537733892922},{"_id":"source/robots.txt","hash":"b0a1d826cb13b43f2596844a6e3b5cd8420d0cd7","modified":1537732960622},{"_id":"themes/next/.DS_Store","hash":"016f82aced90592912128c34b27b53ed42994f3d","modified":1546339856210},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1537694511210},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1537694511210},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1537694511210},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1537694511211},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1537694511211},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1537694511211},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1537694511211},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1537694511211},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1537694511212},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1537694511212},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1537694511212},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1537694511213},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1537694511212},{"_id":"themes/next/_config.yml","hash":"38daba2c76d7df9aa444e26e02c824a6ed357c4d","modified":1538065592620},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1537694511213},{"_id":"themes/next/package-lock.json","hash":"339ae3aa50c6a63b75b371e5b45ce4616f317e1e","modified":1537961009614},{"_id":"themes/next/package.json","hash":"7beb79af6c974bf0397de40b5e581ee8ecd2df34","modified":1537961009582},{"_id":"source/_posts/Fibonacci序列.md","hash":"efcc0a9a67f367b0287a1ee506ad34fb25979e62","modified":1539179377271},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1539609330051},{"_id":"source/_posts/fuscFunction.md","hash":"5aa6408c7c18419354c8eec8d82f092ea1541ffb","modified":1538032649617},{"_id":"source/_posts/markdown中写数学公式的一个问题.md","hash":"8cc1797ce8fe78f289ff9768e62620a759b7af9b","modified":1538032660752},{"_id":"source/_posts/QR分解之Householder变换.md","hash":"839a76b9446b1ec30d6d6cce36ded7d609de4541","modified":1542800947484},{"_id":"source/_posts/一道三角函数无穷积分.md","hash":"68f855a53d0a74276319fad598c7239987ec9d89","modified":1542801281821},{"_id":"source/_posts/一维稳态流动与扩散问题验证.md","hash":"b286d6963750ae07e6c62625d777101ce8bf7998","modified":1539616294535},{"_id":"source/_posts/二阶非齐次常系数线性微分方程解法.md","hash":"47f7d45dc34bb69000305b161283c544c3894388","modified":1546081144715},{"_id":"source/_posts/一道数学证明题.md","hash":"6b3cb5f53c5df06e5ad77d07ec02c19a2e4b95fc","modified":1538032625880},{"_id":"source/_posts/变限积分的导数与雷诺运输定理.md","hash":"276591b2d9bb39efb99929dae2731b65c14a9fb8","modified":1538046109960},{"_id":"source/_posts/多项式拟合.md","hash":"7dcbb69f2df81b1d6a3732615548b42cf5ab2f91","modified":1546082096628},{"_id":"source/_posts/正定矩阵的cholesky分解.md","hash":"60ed424fe7f602936441f0f6437e0e3216a78a70","modified":1542800882138},{"_id":"source/_posts/范数.md","hash":"6555d55c59a2c37b7d1ec7e91ceb8fa4e3b2cef5","modified":1538302847123},{"_id":"source/_posts/组合.md","hash":"f2b101705754bac481f8e4805c02d9b4b6bf6b94","modified":1538032639136},{"_id":"source/_posts/老鼠和毒药.md","hash":"56bdc3bad6a2b04444e1f1d52eebb421b9f765cf","modified":1538032615893},{"_id":"source/_posts/迭代法.md","hash":"81e36da9511603f564ecb46f8ce7e42f3e5ef0b8","modified":1546256314915},{"_id":"source/board/index.md","hash":"493cc1a46b923698eeb25f092ccdb208ceccb2cf","modified":1520349100408},{"_id":"source/categories/index.md","hash":"ed37bd6f22df2b767dc6991c35ba7ad1b1dc0f69","modified":1537732745703},{"_id":"source/_posts/高斯消去法.md","hash":"9f4364416e2b870d06e3a5abb54e6139971018c8","modified":1539227381968},{"_id":"source/images/WX20181010-205935@2x.png","hash":"675f5d32bba376dd424f0a2747f40d3aaf92103b","modified":1539176378281},{"_id":"source/images/case1.png","hash":"65de4ff91fa2661133c5ba55a3f6b7b52dfb855a","modified":1539182545020},{"_id":"source/images/case2.png","hash":"b309744bce3c935b6ba37038cb48127eec7ce27f","modified":1539182533819},{"_id":"source/images/fanshu.png","hash":"61c2f4b076100606db9f5094feb718c2f81bc1fe","modified":1538238211331},{"_id":"source/images/case3.png","hash":"4128819ff585c9542993afddb28d5afdf1feca5a","modified":1539182520699},{"_id":"source/tags/index.md","hash":"7fabbba2bc432307c3c9a30a57b61ba7b940b7d4","modified":1537732671354},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1537694511210},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1537694511210},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1537694511210},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1537694511211},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1537694511214},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1537694511213},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1537694511214},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1537694511214},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1537694511214},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1537694511214},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1537694511215},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1537694511215},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1537694511215},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1537694511215},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1537694511216},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1537694511215},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1537694511215},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1537694511216},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1537694511216},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1537694511216},{"_id":"themes/next/layout/.DS_Store","hash":"86e8ef11c09813fedc281e0ce56ea118c82edb7c","modified":1546340755380},{"_id":"themes/next/layout/_layout.swig","hash":"38a3d6b05562be76c05fde63544e950a10007900","modified":1537702695807},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1537694511228},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1537694511228},{"_id":"themes/next/layout/post.swig","hash":"57a39efae6db3769693fb274f3f000e45b3f435d","modified":1546340355239},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1537694511228},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1537694511228},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1537694511229},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1537694511229},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1537694511229},{"_id":"themes/next/scripts/.DS_Store","hash":"869e86bb9da6314a7debf22465af95a329a814f9","modified":1537724161399},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1537694511230},{"_id":"themes/next/source/.DS_Store","hash":"de2241a89e4023b6ff9396786a95f0a72c8031ba","modified":1537963956651},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1537694511306},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1537694511306},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1537694511306},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537694511250},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1537694511217},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537694511217},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537694511217},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1537694511217},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1537694511218},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1537694511218},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1537694511218},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1537694511218},{"_id":"themes/next/layout/_partials/footer.swig","hash":"13c4a392b360de211336f29fc2aeb02b4195109a","modified":1537704985437},{"_id":"themes/next/layout/_partials/.DS_Store","hash":"7967c65cf501ab0b0db6d20774edef70dddaa1fd","modified":1537740850747},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1537694511218},{"_id":"themes/next/layout/_partials/head.swig","hash":"f45188238480b2732970a39479c0ceae72cce1d6","modified":1537734874804},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1537694511220},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1537694511220},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1537694511220},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1537694511220},{"_id":"themes/next/layout/_scripts/.DS_Store","hash":"81fd57b9774d5c9ff915d6ef258093857d8f69ad","modified":1537724188865},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1537694511221},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1537694511222},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1537694511222},{"_id":"themes/next/layout/_third-party/.DS_Store","hash":"c232638813d7f12de289514043fa5c6a1026cd82","modified":1537724193936},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1537694511226},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1537694511226},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1537694511226},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1537694511227},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1537694511227},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1537694511227},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1537694511227},{"_id":"themes/next/node_modules/hexo-symbols-count-time/LICENSE","hash":"f45ee1c765646813b442ca58de72e20a64a7ddba","modified":1515238533000},{"_id":"themes/next/node_modules/hexo-symbols-count-time/index.js","hash":"8cea6bfa58366019ebfd0b42cf737efa1ecab622","modified":1515238533000},{"_id":"themes/next/node_modules/hexo-symbols-count-time/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1529948346000},{"_id":"themes/next/node_modules/hexo-symbols-count-time/README.md","hash":"2cfab30720b9e9882ca5383c5f2e4ebaacb1ec52","modified":1529985681000},{"_id":"themes/next/node_modules/hexo-symbols-count-time/package.json","hash":"e0cfe362281e5734472e4657df8d1275fe1f85ac","modified":1537961009564},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1537694511230},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1537694511230},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1537694511231},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1537694511231},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1537694511231},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1537694511231},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1537694511231},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1537694511231},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1537694511231},{"_id":"themes/next/source/css/.DS_Store","hash":"52546cdd0ad6a7650fc10b1374bc97fd3d01be15","modified":1537702826807},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1537694511251},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1537694511250},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1537694511250},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1537694511250},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1537694511251},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1537694511252},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1537694511251},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1537694511251},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1537694511253},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1537694511252},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1537694511252},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1537694511253},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1537694511253},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537694511254},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537694511253},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1537694511253},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1537694511254},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1537694511254},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1537694511254},{"_id":"themes/next/source/js/.DS_Store","hash":"f1bb3af4e6fc9041af292d070429e8a689c1fe4d","modified":1537702625038},{"_id":"themes/next/source/static/.DS_Store","hash":"2f3a80adceeb1b0a3bfeda3ed797dd32746d0a89","modified":1537740661912},{"_id":"source/images/宫园薰1.jpg","hash":"fe07f22f107817fff0d359368ff9596570f0c861","modified":1537695325310},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537694511222},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537694511222},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537694511243},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537694511243},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537694511244},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537694511249},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537694511249},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1537694511219},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1537694511219},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1537694511220},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1537694511220},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1537694511221},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1537694511221},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1537694511221},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"beef178045eb800ba081676351c87204e680dc12","modified":1537740727360},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1537694511221},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1537694511222},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1537694511222},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1537694511222},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1537694511223},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1537694511223},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1537694511223},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1537694511223},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1537694511223},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1537694511223},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1537694511224},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1537694511224},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1537694511224},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1537694511224},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1537694511224},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1537694511224},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1537694511224},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1537694511225},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1537694511225},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1537694511225},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1537694511226},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1537694511225},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1537694511226},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1537694511225},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1537694511226},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1537694511226},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1537694511227},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1537694511228},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1537694511228},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1537694511228},{"_id":"themes/next/node_modules/hexo-symbols-count-time/lib/helper.js","hash":"7778e412674a2bda792130b40827d1acbfcd9e76","modified":1529948368000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1537694511243},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"2213dcf2090b7a2d5c667906b8092595489aba37","modified":1537963842909},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1537694511243},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1537694511244},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1537694511249},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1537694511249},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1537694511249},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1537694511249},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1537694511255},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1537694511255},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1537694511255},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1537694511255},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1537694511256},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1537694511256},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1537702661485},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1537694511256},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1537694511256},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1537694511257},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1537694511257},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1537694511258},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1537694511263},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1537694511267},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1537694511267},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1537694511268},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1537694511268},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1537694511273},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1537694511273},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1537694511273},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1537694511273},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1537694511275},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1537694511275},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1537694511275},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1537694511275},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1537694511275},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1537694511291},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1537694511291},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1537694511291},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1537694511291},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1537694511292},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1537694511291},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1537694511289},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1537694511292},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1537694511293},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1537694511293},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1537694511293},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1537694511294},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1537694511294},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1537694511294},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1537694511294},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1537694511295},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1537694511295},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1537694511295},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1537694511295},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1537694511296},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1537694511296},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1537694511296},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1537694511296},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1537694511297},{"_id":"themes/next/source/lib/reading_progress/.editorconfig","hash":"7d47ecd70ca58d26af4f69ff1b23034edcf4475e","modified":1537960053422},{"_id":"themes/next/source/lib/reading_progress/.gitignore","hash":"09cde1060b4213a7eee528b54560777d2d3756e8","modified":1537960053422},{"_id":"themes/next/source/lib/reading_progress/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1537960053423},{"_id":"themes/next/source/lib/reading_progress/package.json","hash":"7bcb3787978a0c445b1bd3dfeca6ae6016c98abc","modified":1537960053424},{"_id":"themes/next/source/lib/reading_progress/README.md","hash":"9b00c4ce1a739c825df4e51977f7525d2c9f6b81","modified":1537960053423},{"_id":"themes/next/source/lib/reading_progress/reading_progress.js","hash":"174678a8e2a24763e3fe8b9c25496fdf6ee0220b","modified":1537960053424},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1537694511297},{"_id":"themes/next/source/lib/reading_progress/reading_progress.min.js","hash":"98af8d99819882904f9b1a9254bebf40602e1843","modified":1537960053425},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1537694511297},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1537694511298},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1537694511303},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1537694511303},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1537694511305},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1537694511306},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1537694511305},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1537694511290},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1537694511227},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1537694511227},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1537694511232},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1537694511232},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1537694511232},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1537694511232},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1537694511232},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1537694511235},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1537694511239},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1537694511242},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1537694511241},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1537694511242},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1537694511242},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1537694511242},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1537694511242},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1537694511243},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1537694511244},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1537694511244},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1537694511244},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1537694511244},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1537694511245},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1537694511245},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537694511245},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1537694511245},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1537694511246},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1537694511246},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1537694511246},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537694511247},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1537694511247},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1537694511247},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1537694511248},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1537694511247},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1537694511248},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1537694511248},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1537694511248},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1537694511257},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1537694511261},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1537694511263},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1537694511268},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1537694511263},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1537694511268},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1537694511269},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1537694511269},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1537694511269},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1537694511269},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1537694511271},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1537694511272},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1537694511272},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1537694511274},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1537694511274},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1537694511277},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1537694511276},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1537694511276},{"_id":"themes/next/source/lib/reading_progress/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1537960053414},{"_id":"themes/next/source/lib/reading_progress/.git/ORIG_HEAD","hash":"35b5015021477f00984d50ee8894b23b639bb6d4","modified":1537960132557},{"_id":"themes/next/source/lib/reading_progress/.git/FETCH_HEAD","hash":"58784fdcaf3f7a37e8cea93fd6d9b51b54363c7f","modified":1537960132543},{"_id":"themes/next/source/lib/reading_progress/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1537960051804},{"_id":"themes/next/source/lib/reading_progress/.git/config","hash":"961f76a65d5278408c0317ac92bff35cfe52dfe8","modified":1537960053417},{"_id":"themes/next/source/lib/reading_progress/.git/index","hash":"885241ed40d805bc69e359b6f433eb91a236d494","modified":1537960126526},{"_id":"themes/next/source/lib/reading_progress/.git/packed-refs","hash":"47ca9f7dfcd1e7e9cf23b80dc8fa8544e36d048c","modified":1537960053412},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1537694511302},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1537694511302},{"_id":"themes/next/source/static/api/css/imgshare.css","hash":"c3624a2dde649ed28b2e5d1f050fd971fbaf71a0","modified":1479831446000},{"_id":"themes/next/source/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1479831446000},{"_id":"themes/next/source/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1479831446000},{"_id":"themes/next/source/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1479831446000},{"_id":"themes/next/source/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1479831446000},{"_id":"themes/next/source/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1479831446000},{"_id":"themes/next/source/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1479831446000},{"_id":"themes/next/source/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1479831446000},{"_id":"themes/next/source/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1479831446000},{"_id":"themes/next/source/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1479831446000},{"_id":"themes/next/source/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1479831446000},{"_id":"themes/next/source/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1479831446000},{"_id":"themes/next/source/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1479831446000},{"_id":"themes/next/source/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1479831446000},{"_id":"themes/next/source/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1479831446000},{"_id":"themes/next/source/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1479831446000},{"_id":"themes/next/source/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1479831446000},{"_id":"themes/next/source/static/api/js/share.js","hash":"73bdb33580128e6c79a726a25f98092c0faa369d","modified":1479831446000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1537694511262},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1537694511288},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1537694511289},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1537694511304},{"_id":"themes/next/source/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479831446000},{"_id":"themes/next/source/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479831446000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1537694511233},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1537694511233},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1537694511233},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1537694511233},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1537694511233},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1537694511234},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1537694511234},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1537694511234},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1537694511233},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1537694511234},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1537694511234},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1537694511235},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1537694511237},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1537694511234},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1537694511238},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1537694511234},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1537694511238},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1537694511238},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1537694511237},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1537694511238},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1537694511237},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1537694511235},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1537694511235},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1537694511238},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1537694511238},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1537694511238},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1537694511235},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1537694511235},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1537694511235},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1537694511236},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1537694511236},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1537694511236},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1537694511236},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1537694511236},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1537694511236},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1537694511236},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1537694511237},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1537694511237},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1537694511237},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1537694511239},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1537694511239},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1537694511239},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1537694511239},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1537694511239},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1537694511239},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1537694511239},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1537694511240},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1537694511240},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1537694511240},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1537694511240},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1537694511241},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1537694511240},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1537694511240},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1537694511241},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1537694511241},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1537694511241},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1537694511241},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1537694511241},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1537694511245},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537694511246},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537694511247},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1537694511259},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1537694511259},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1537694511260},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1537694511260},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1537694511261},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1537694511269},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1537694511270},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1537694511270},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1537694511270},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1537694511270},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1537694511271},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1537694511279},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1537694511281},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1537694511287},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1537960051805},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1537960051808},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1537960051807},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1537960051809},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1537960051806},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1537960051809},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1537960051806},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1537960051807},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1537960051810},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1537960051808},{"_id":"themes/next/source/lib/reading_progress/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1537960051803},{"_id":"themes/next/source/lib/reading_progress/.git/logs/HEAD","hash":"f223518ec92bd7e994519bebf1c9c6581f05f6e6","modified":1537960053415},{"_id":"themes/next/source/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/l8.gif","hash":"ec7dbc7703961356e05528d2844b983f225445e4","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1479831446000},{"_id":"themes/next/source/static/api/js/base/class.js","hash":"db02960fb51f69a0d50dc9ed626a998be3884706","modified":1479831446000},{"_id":"themes/next/source/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1479831446000},{"_id":"themes/next/source/static/api/js/component/animate.js","hash":"17a3495543db66e4eb56a81a93edf3e41ca8cc31","modified":1479831446000},{"_id":"themes/next/source/static/api/js/component/comm_tools.js","hash":"28d096a61f54e64bdbc32d172ae20e7f6e9656a7","modified":1479831446000},{"_id":"themes/next/source/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1479831446000},{"_id":"themes/next/source/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1479831446000},{"_id":"themes/next/source/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1479831446000},{"_id":"themes/next/source/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1479831446000},{"_id":"themes/next/source/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1479831446000},{"_id":"themes/next/source/static/api/js/component/pop_popup_slide.js","hash":"45a72013fba95249ca965fd4d98f3bbde7a7098a","modified":1479831446000},{"_id":"themes/next/source/static/api/js/conf/define.js","hash":"ee0afad836be1553980501855752ccd79fe1fe0e","modified":1479831446000},{"_id":"themes/next/source/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1479831446000},{"_id":"themes/next/source/static/api/js/conf/const.js","hash":"7da7df37d0f3d3e1977a8d107c98a3c1ecdb39c2","modified":1479831446000},{"_id":"themes/next/source/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1479831446000},{"_id":"themes/next/source/static/api/js/share/combine_api.js","hash":"7ad3c5396bf20704e87f98ebe118034ed3cc7b22","modified":1479831446000},{"_id":"themes/next/source/static/api/js/share/like_api.js","hash":"4034b10f8f34367c6db47ae092e5b4107c2fb8b4","modified":1479831446000},{"_id":"themes/next/source/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1479831446000},{"_id":"themes/next/source/static/api/js/share/likeshare.js","hash":"2d14ab97cc3dc294c51c0d6814f4ea45f4b4e312","modified":1479831446000},{"_id":"themes/next/source/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1479831446000},{"_id":"themes/next/source/static/api/js/start/router.js","hash":"27bc546a9c796b15e59442aaf09ae645a2ed4c74","modified":1479831446000},{"_id":"themes/next/source/static/api/js/trans/trans.js","hash":"cb82afecdbede8d5a00b6c5ea9595187b6408376","modified":1479831446000},{"_id":"themes/next/source/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1479831446000},{"_id":"themes/next/source/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1479831446000},{"_id":"themes/next/source/static/api/js/trans/trans_bdxc.js","hash":"a512ebfca0319ab38d06b7b0fb74bcdc942dc46e","modified":1479831446000},{"_id":"themes/next/source/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1479831446000},{"_id":"themes/next/source/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1479831446000},{"_id":"themes/next/source/static/api/js/trans/trans_bdysc.js","hash":"28bb985a03b6b1da5a89a143331932a12126c9c3","modified":1479831446000},{"_id":"themes/next/source/static/api/js/view/like_view.js","hash":"c1b6a3f3f89ac734c6da284c1ba1dde2ada4e250","modified":1479831446000},{"_id":"themes/next/source/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1479831446000},{"_id":"themes/next/source/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1479831446000},{"_id":"themes/next/source/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1479831446000},{"_id":"themes/next/source/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1479831446000},{"_id":"themes/next/source/static/api/js/base/tangram.js","hash":"e1952e27f6dc3d6339128cec157acef8cc0a775f","modified":1479831446000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1537694511267},{"_id":"themes/next/source/lib/reading_progress/.git/objects/01/36e1990fcbef0586e0bd4b9d90b96900dcd575","hash":"37ac2f94a41384f4cb66cd74c8313099367a5603","modified":1537960053380},{"_id":"themes/next/source/lib/reading_progress/.git/objects/08/4d73e711ab990007314dab66ac8da236a98212","hash":"aca52af21085b7a579b275a1e7bb5f1a8818e3d4","modified":1537960053393},{"_id":"themes/next/source/lib/reading_progress/.git/objects/2b/c9c88e86c252b037a36df9a3d3df519b254bfc","hash":"e647f9721e4f2e1cd52bfff3c80683b787f76a11","modified":1537960053381},{"_id":"themes/next/source/lib/reading_progress/.git/objects/01/9a385ce3e8b0232ee5edfa6b4e1dcd44cf142e","hash":"6894d6df0722077c5d21d116f33046625cd57ab8","modified":1537960053398},{"_id":"themes/next/source/lib/reading_progress/.git/objects/2d/488e7ac12f9be4cba8a7a383e972449b4ecef7","hash":"e477cea6ada0896804b0e8dab23c9d56825a0ece","modified":1537960053384},{"_id":"themes/next/source/lib/reading_progress/.git/objects/36/58085a9181df88f19f04603b28f6ea21d199cc","hash":"6a467dd51d39b28c1af9c25869e25c6821f6602a","modified":1537960053402},{"_id":"themes/next/source/lib/reading_progress/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1537960053394},{"_id":"themes/next/source/lib/reading_progress/.git/objects/48/1ebe947f06e440e41c1a971be0844e852c1d37","hash":"61fea90ca1824db58df6cfc662bc5b371db02224","modified":1537960053396},{"_id":"themes/next/source/lib/reading_progress/.git/objects/71/4aebae4e17e00cdb0e82893d9fa39d35b20b59","hash":"d09daa7d244ee40035e6eb67f13867182fb8af86","modified":1537960053396},{"_id":"themes/next/source/lib/reading_progress/.git/objects/00/4fa4280892c7d18f6151fac22daf51344c02ea","hash":"7a81ed1087c3792f37bd83137d4034179c911627","modified":1537960053383},{"_id":"themes/next/source/lib/reading_progress/.git/objects/8f/ca1e70cfeea939105e31d7d17f7c3516120b30","hash":"312d55b1a7fbdcc14c54b3805f0827fc42ad94ed","modified":1537960053382},{"_id":"themes/next/source/lib/reading_progress/.git/objects/83/d5a97b3daaa59cccb44af55f6723f431f2e94a","hash":"448c16fa4f53e5123838d4c3593dcfb15f309905","modified":1537960053401},{"_id":"themes/next/source/lib/reading_progress/.git/objects/98/a2041bc808f55bbcb9d8b53560e22558338bda","hash":"ebb53379aa2d77ea0832973fa3e44846df0f170f","modified":1537960053402},{"_id":"themes/next/source/lib/reading_progress/.git/objects/a2/7bba2bf42630fc03150b64fc74f2a29c151a27","hash":"b1afe600ba94298a2905a2cf64c900f5954cc146","modified":1537960053395},{"_id":"themes/next/source/lib/reading_progress/.git/objects/a8/63332915ebfd107ca4418c25c80674875c422b","hash":"f12e708237bcf98c072e73e45f1542cfb5646839","modified":1537960053388},{"_id":"themes/next/source/lib/reading_progress/.git/objects/b2/6b015c6a0aacd5fcbd3fd3a09b0b216855f35c","hash":"6924e4c4558366a76578a2497d2fca15ef39a9f8","modified":1537960053397},{"_id":"themes/next/source/lib/reading_progress/.git/objects/ae/aa7a68a7131bd03e0bce06f45bfdfa1cd93587","hash":"d7d37380ba502a4050834df40227d612cf911595","modified":1537960053390},{"_id":"themes/next/source/lib/reading_progress/.git/objects/b6/eda56cb9647d239b26d86f579204cbccf745fe","hash":"12e479d3dfe08df6f9d4d56be2f0a17d9720d846","modified":1537960053400},{"_id":"themes/next/source/lib/reading_progress/.git/objects/c0/018cb7262951a7eea4001bea16bf6c1db1de0e","hash":"b54299894dbbf00b3187ae3e16a480a91ca75e73","modified":1537960053392},{"_id":"themes/next/source/lib/reading_progress/.git/objects/c7/8ceb135b768a369ded42f77d4db3f6363bde20","hash":"aa90e157f2a043dad6017bab2e4aa699f6236a63","modified":1537960053399},{"_id":"themes/next/source/lib/reading_progress/.git/objects/d1/94060fce08431ebef4cb5f4c02739b913373cb","hash":"b9022b117b03703b5fa8af85fc076b692bde33cf","modified":1537960053391},{"_id":"themes/next/source/lib/reading_progress/.git/refs/heads/master","hash":"35b5015021477f00984d50ee8894b23b639bb6d4","modified":1537960053415},{"_id":"themes/next/source/lib/reading_progress/.git/objects/e5/dc795cdf7d9163cc736be938a9707f73869c9f","hash":"57163dfa4eebe09d57ede37ee259b7cbb2b1e643","modified":1537960053381},{"_id":"themes/next/source/lib/reading_progress/.git/objects/f6/8184f97255dfd504e22775df6450edb9b51d70","hash":"b0a36dcf81780a9f82db6318daa065200e16efee","modified":1537960053403},{"_id":"themes/next/source/lib/reading_progress/.git/objects/f0/acd06a59665dabfb6eb0608f0a797fdcd44158","hash":"f85f3dbe326b8752f6e32c7169ed3b409f4167b7","modified":1537960053383},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1537694511301},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1537694511285},{"_id":"themes/next/source/lib/reading_progress/.git/logs/refs/heads/master","hash":"f223518ec92bd7e994519bebf1c9c6581f05f6e6","modified":1537960053417},{"_id":"themes/next/source/lib/reading_progress/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1537960053414},{"_id":"themes/next/source/lib/reading_progress/.git/logs/refs/remotes/origin/HEAD","hash":"f223518ec92bd7e994519bebf1c9c6581f05f6e6","modified":1537960053414},{"_id":"themes/next/source/images/ishan-seefromthesky-490172-unsplash.jpg","hash":"77f14c52ac1d013c15df23e7c0623a963976583b","modified":1537961485430},{"_id":"themes/next/source/images/ben-krygsman-745458-unsplash.jpg","hash":"91d6717d20367f03eb18149c84c8cc53d243e5cc","modified":1537963728604},{"_id":"public/baidusitemap.xml","hash":"3a33845ec26a08f00fc352be9184975a128de244","modified":1546256332692},{"_id":"public/atom.xml","hash":"9b9bea892951ef58a2a2aa714466630a0e147f9b","modified":1546256332713},{"_id":"public/search.xml","hash":"177f8f643f8a56ba173cbcff8eb3881c82542c70","modified":1546341417579},{"_id":"public/sitemap.xml","hash":"2cf09933574dbdc6a0f2254da08487c485873edb","modified":1546256332712},{"_id":"public/baidu_verify_ZiJSdPfAJ7.html","hash":"8ecf03451b8ddc7371dd11280212fdfdd2ac59a5","modified":1546342839862},{"_id":"public/google2ae3db88cfdeb72a.html","hash":"775de6bde8ae5b629d044b800e830167204c4267","modified":1546342839863},{"_id":"public/board/index.html","hash":"e35620c5ddf6f5e8ed6bffc8add49894e9ee552f","modified":1546342839863},{"_id":"public/categories/index.html","hash":"52f07683ff4d59a2e8980b8188a48d44a3693850","modified":1546342839863},{"_id":"public/tags/index.html","hash":"ae6bca9ea833490cc2d8a68fba3b898b210f92fb","modified":1546342839865},{"_id":"public/archives/2018/11/index.html","hash":"c05923b636df3b2f57359dc699cba8119fa18d9b","modified":1546342839863},{"_id":"public/archives/2018/12/index.html","hash":"c383fa275dbaf62cc1cfd6f0ad16eb0a701758c6","modified":1546342839863},{"_id":"public/categories/机器学习/index.html","hash":"a92b9b86772c0ce725dc8ba818ee5cad0839de7c","modified":1546342839863},{"_id":"public/tags/算法/index.html","hash":"d48f52468fee870c6a57bbf803455db508e86ae7","modified":1546342839864},{"_id":"public/tags/递归/index.html","hash":"5ea55025d3a59a4b390113493450d6f276c89fc7","modified":1546342839864},{"_id":"public/tags/Kata/index.html","hash":"f1772039f159c76a76a058aca163b16cdb665dc0","modified":1546342839864},{"_id":"public/tags/markdown/index.html","hash":"a3ffb91673a6725aecbd0dccf6e2e314f8dfc59a","modified":1546342839864},{"_id":"public/tags/latex/index.html","hash":"e167f5e91b82b36039d4680ece1d8626d8969b61","modified":1546342839864},{"_id":"public/tags/无穷积分/index.html","hash":"30331a596ba00a8985bdf475a9ce87ef4e349738","modified":1546342839864},{"_id":"public/tags/数论/index.html","hash":"b747ae0f13ff18d0938adcb6d5c6a4fc80ba162b","modified":1546342839864},{"_id":"public/tags/常微分方程/index.html","hash":"23f473050ef70c444f320b58ccf921f559df824a","modified":1546342839864},{"_id":"public/tags/无理数/index.html","hash":"2a9f50378fdf4decc43d6c50f207ffae7c0eeb80","modified":1546342839864},{"_id":"public/tags/稠密性/index.html","hash":"95a3b21dacfe73ac086030309bb0a1f1d5531141","modified":1546342839864},{"_id":"public/tags/导数/index.html","hash":"ad08deac45311a88f53a4fe229687627acee983d","modified":1546342839864},{"_id":"public/tags/积分/index.html","hash":"395055c39ab35bf7eea2f17b4aae8170ebb4fca3","modified":1546342839864},{"_id":"public/tags/拟合/index.html","hash":"4cc45877acd89c50f3053c6128a9adfea976bad2","modified":1546342839864},{"_id":"public/tags/范数/index.html","hash":"a4dfceb0077d9373645286d84afceb6cd7da5939","modified":1546342839865},{"_id":"public/tags/python/index.html","hash":"23843a7b9e2b2874d4a86b39f99aec3cbdf01644","modified":1546342839865},{"_id":"public/tags/二进制/index.html","hash":"688f30e3a879d9e3163dee8b88348d1c6b14d1ae","modified":1546342839865},{"_id":"public/2018/12/29/二阶非齐次常系数线性微分方程解法/index.html","hash":"e975722415b1f1a4a06f8992c33a20f266582276","modified":1546342839865},{"_id":"public/2018/11/06/迭代法/index.html","hash":"5fe269a9c59b606ee7ffed08694e7d77f142799c","modified":1546342839865},{"_id":"public/2018/10/19/QR分解之Householder变换/index.html","hash":"c1b5b843073e02cb3e4d2b67614906150d5686d7","modified":1546342839865},{"_id":"public/2018/10/15/一道三角函数无穷积分/index.html","hash":"ab499297141a80091fc30a17ff9cd6674f9bd59e","modified":1546342839865},{"_id":"public/2018/10/12/正定矩阵的cholesky分解/index.html","hash":"3340dc4517cbbe8b517fef0dc9ccf0e8cbd2b29c","modified":1546342839865},{"_id":"public/2018/10/10/一维稳态流动与扩散问题验证/index.html","hash":"12d003517b3ce82bef98ef6900b92387a8f17f96","modified":1546342839865},{"_id":"public/2018/10/10/Fibonacci序列/index.html","hash":"a003561c3cb4e0b79266032dc7a1850c41366e28","modified":1546342839866},{"_id":"public/2018/10/09/多项式拟合/index.html","hash":"bf69bd7dba98940ffbe95b5cb0de70ec6a8ab37d","modified":1546342839867},{"_id":"public/2018/09/28/高斯消去法/index.html","hash":"36852a9cdf9e9d1dcc3f0bc8bcd693d8de20184b","modified":1546342839867},{"_id":"public/2018/09/26/变限积分的导数与雷诺运输定理/index.html","hash":"d758e47ac2ada8de31055a67838c9839f378f818","modified":1546342839868},{"_id":"public/2018/09/25/范数/index.html","hash":"17f3cc042b0f5c69df17c6612705bd2e91bcafbc","modified":1546342839868},{"_id":"public/2018/09/23/fuscFunction/index.html","hash":"799f444097639353636b19df49935a157286d0f5","modified":1546342839868},{"_id":"public/2018/09/23/一道数学证明题/index.html","hash":"fa80fea3b710d5bd497e6f9fcd90a8f9d36ad726","modified":1546342839868},{"_id":"public/2018/09/23/组合/index.html","hash":"49ba32c7042323df5837d6bb823cd5e7b1615cb6","modified":1546342839869},{"_id":"public/2018/09/23/老鼠和毒药/index.html","hash":"803064812d80480b2e24ab4b5e404105686d5a78","modified":1546342839869},{"_id":"public/2018/09/23/markdown中写数学公式的一个问题/index.html","hash":"7846d5b8f89c02e8b0fb24286c99d7967b3de219","modified":1546342839869},{"_id":"public/archives/index.html","hash":"1e06eea6d2a61b735ba3e701bb64c3be911b333c","modified":1546342839869},{"_id":"public/archives/page/2/index.html","hash":"abc053076a4d16fbd149b18a865d9584065d57fb","modified":1546342839869},{"_id":"public/archives/2018/index.html","hash":"7b7f9808a367a58c82d238c83d80ae631178be4d","modified":1546342839869},{"_id":"public/archives/2018/page/2/index.html","hash":"74e2ac41061a734024c5736bea93fdf594417c3b","modified":1546342839870},{"_id":"public/archives/2018/09/index.html","hash":"35df9c15b5f3b8424361cd26d62cf3810e755a0d","modified":1546342839870},{"_id":"public/archives/2018/10/index.html","hash":"e71830c548f786bbbf11c785e4f03ca453a41981","modified":1546342839870},{"_id":"public/index.html","hash":"558bb62e591ebbd7c0509457d65b40326c1388e6","modified":1546342839870},{"_id":"public/page/2/index.html","hash":"8cc40ec2a9936f1c2aecf44daae1df4741697519","modified":1546342839870},{"_id":"public/categories/计算机/index.html","hash":"78b94b77e16031435406c4b2b3145b6ea364e71e","modified":1546342839870},{"_id":"public/categories/数学/index.html","hash":"9680a71a5e7a632d269a36ec65250492f0839567","modified":1546342839870},{"_id":"public/tags/矩阵与数值分析/index.html","hash":"01ee4d000340d5f2cdbf5725733053f0f561aa03","modified":1546342839870},{"_id":"public/lib/blog-encrypt.js","hash":"3891cb1f42bbfd0ab934729a86a90bea7aa9e4e7","modified":1546076837791},{"_id":"public/css/blog-encrypt.css","hash":"d2b434e52dd9406dff5281ad7a2c812be0c250e0","modified":1546076837791},{"_id":"public/lib/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1546076837799},{"_id":"public/tags/数学物理方法/index.html","hash":"a40c66a2dc3a4bfa1bb6b43ea6681c337f11286a","modified":1546342839865}],"Category":[{"name":"计算机","_id":"cjq9a4s0700063t9ky2b3scd6"},{"name":"数学","_id":"cjq9a4s0p000l3t9ky4xk07pc"},{"name":"机器学习","_id":"cjq9a4s12001h3t9k2oph2y6x"}],"Data":[],"Page":[{"_content":"ZiJSdPfAJ7","source":"baidu_verify_ZiJSdPfAJ7.html","raw":"ZiJSdPfAJ7","date":"2018-09-26T03:57:09.487Z","updated":"2018-09-26T03:53:26.053Z","path":"baidu_verify_ZiJSdPfAJ7.html","title":"","comments":1,"layout":"page","_id":"cjq9a4ryh00003t9khx0k4wni","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) -->ZiJSdPfAJ7<!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) -->ZiJSdPfAJ7<!-- rebuild by neat -->"},{"_content":"google-site-verification: google2ae3db88cfdeb72a.html","source":"google2ae3db88cfdeb72a.html","raw":"google-site-verification: google2ae3db88cfdeb72a.html","date":"2018-09-23T20:26:13.897Z","updated":"2018-09-23T20:18:12.922Z","path":"google2ae3db88cfdeb72a.html","title":"","comments":1,"layout":"page","_id":"cjq9a4ryj00013t9ki890pr0i","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) -->google-site-verification: google2ae3db88cfdeb72a.html<!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) -->google-site-verification: google2ae3db88cfdeb72a.html<!-- rebuild by neat -->"},{"title":"board","date":"2018-03-06T15:10:00.000Z","comments":1,"_content":"","source":"board/index.md","raw":"title: board\ndate: 2018-03-06 23:10:00\ncomments: true\n---\n","updated":"2018-03-06T15:11:40.408Z","path":"board/index.html","layout":"page","_id":"cjq9a4s0400033t9kssvlk2wq","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><!-- rebuild by neat -->"},{"title":"categories","date":"2018-09-23T19:27:46.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-24 03:27:46\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-09-23T19:59:05.703Z","path":"categories/index.html","layout":"page","_id":"cjq9a4s0600053t9kvb71wbqb","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><!-- rebuild by neat -->"},{"title":"tags","date":"2018-09-23T19:28:20.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-24 03:28:20\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-09-23T19:57:51.354Z","path":"tags/index.html","layout":"page","_id":"cjq9a4s5u002c3t9kn7heelr5","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><!-- rebuild by neat -->"}],"Post":[{"title":"Fibonacci序列","abbrlink":5621,"date":"2018-10-10T06:19:21.000Z","_content":"\n### 从Fibonacci序列谈起\n#### 定义\n\n$F_0=0,\\quad F_1=1,\\quad F_n=F_{n-1}+F_{n-2}\\quad (n>1)$\n\n递归算法的$F_n$计算时间复杂度为$O(2^n)$，为指数时间。空间复杂度为$S_n=O(n)$为线性空间。\n\n改用备忘录的方式计算Fibonacci序列可以更节约时间。类似如下方式：\n\n| $F_0$ | $F_1$ | $F_2$ | $F_3$ | $F_4$ | $F_5$ |\n|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|\n|   0   | 1     | 1     | 2     | 3     | 5     |\n\n但空间仍然是$O(n)$，如果只需要求$F_n$则有很大空间浪费。所以我们只需要保存前两项即可。\n$P_1=0,P_2=1,C=P_1+P_2=1$,下一次赋值结果为$P_1=1,P_2=1,C=2$,时间复杂度为$O(n)$,空间复杂度为$O(1)$。\n\n更好的方式：\n使用Fibonacci序列的矩阵形式\n$$\\begin{align}\\begin{pmatrix}\nF_{n+1}\\\\\\\\\nF_n\n\\end{pmatrix}&=\\begin{pmatrix}\n1 & 1\\\\\\\\\n1 & 0\n\\end{pmatrix}\n\\begin{pmatrix}\nF_{n}\\\\\\\\\nF_{n-1}\n\\end{pmatrix}\\\\\\\\&=\\begin{pmatrix}\n1 & 1\\\\\\\\\n1 & 0\n\\end{pmatrix}^2\n\\begin{pmatrix}\nF_{n-1}\\\\\\\\\nF_{n-2}\n\\end{pmatrix}\\\\\\\\&\\cdots\\\\\\\\\n&=\\begin{pmatrix}\n1 & 1\\\\\\\\\n1 & 0\n\\end{pmatrix}^n\n\\begin{pmatrix}\nF_{1}\\\\\\\\\nF_{0}\n\\end{pmatrix}\n\\end{align}\n$$\n\n即最后结果为：\n$$\\begin{pmatrix}\nF_{n+1}\\\\\\\\\nF_n\n\\end{pmatrix}=\\begin{pmatrix}\n1 & 1\\\\\\\\\n1 & 0\n\\end{pmatrix}^n\n\\begin{pmatrix}\nF_{1}\\\\\\\\\nF_{0}\n\\end{pmatrix}\n$$\n\n下面用一个简单方法处理计算$\\begin{pmatrix}1 & 1\\\\\\\\1 & 0\\end{pmatrix}^n$\n\n\n$\\text{令：}A=\\begin{pmatrix}\n1 & 1\\\\\\\\\n1 & 0\n\\end{pmatrix},\\text{那么}A^n=\\begin{pmatrix}\nF_{n+1} & F_n\\\\\\\\\nF_n & F_{n-1}\n\\end{pmatrix}\\text{归纳易证}$\n\n$\b\\text{所以}A^{2m}=\\begin{pmatrix}\nF_{2m+1} & F_{2m}\\\\\\\\\nF_{2m} & F_{2m-1}\n\\end{pmatrix}=A^m\\cdot A^m,\\quad A^m=\\begin{pmatrix}\nF_{m+1} & F_m\\\\\\\\\nF_m & F_{m-1}\n\\end{pmatrix}\\\\\\\\\n\\begin{align}\nso:\\begin{pmatrix}\nF_{2m+1} & F_{2m}\\\\\\\\\nF_{2m} & F_{2m-1}\n\\end{pmatrix}&=\n\\begin{pmatrix}\nF_{m+1} & F_m\\\\\\\\\nF_m & F_{m-1}\n\\end{pmatrix}\n\\begin{pmatrix}\nF_{m+1} & F_m\\\\\\\\\nF_m & F_{m-1}\n\\end{pmatrix}\\\\\\\\\n&=\\begin{pmatrix}\nF_{m+1}^2+F_m^2 & F_{m+1}F_m+F_m F_{m-1}\\\\\\\\\nF_{m+1}F_m+F_m F_{m-1} & F_{m}^2+F_{m-1}^2\n\\end{pmatrix}  \\end{align}$\n\n$\\Longrightarrow \\begin{cases}\nF_{2m+1}=F_{m+1}^2+F_m^2\\\\\\\\F_{2m}=F_m(F_{m+1}+ F_{m-1})\n\\end{cases}\\text{得到了Fibonacci序列的另一种递推公式}$\n\n1. $n$为奇数，即$n=2m+1，\\lfloor\\frac{n}{2}\\rfloor=m$\n$$\\begin{pmatrix}\nF_{n+1}\\\\\\\\\nF_{n}\n\\end{pmatrix}=\\begin{pmatrix}\nF_{2m+2}\\\\\\\\\nF_{2m+1}\n\\end{pmatrix}=\\begin{pmatrix}\n(2F_{m}+F_{m+1})F_{m+1}\\\\\\\\\nF_{m}^2+F_{m+1}^2\n\\end{pmatrix}$$\n2. n为偶数，即$n=2m，\\lfloor\\frac{n}{2}\\rfloor=m$\n$$\\begin{pmatrix}\nF_{n+1}\\\\\\\\\nF_{n}\n\\end{pmatrix}=\\begin{pmatrix}\nF_{2m+1}\\\\\\\\\nF_{2m}\n\\end{pmatrix}=\\begin{pmatrix}\nF_{m}^2+F_{m+1}^2\\\\\\\\\n(2F_{m+1}-F_{m})F_{m}\n\\end{pmatrix}$$\n\n> 这里仅用第m项与第m+1项表达，计算过程中的m-1项和m+2项利用Fibonacci数列的递推公式代换掉了。\n\n所以对于$Fibonacci(n)$我们只需要计算$Fibonacci(n/2)=Fibonacci(m)$。其时间复杂度为$O(\\log n)$，空间复杂度也为$O(\\log n)$。\n\npython代码如下：\n```python\ndef Fibonacci(n):\n    if n<=0:\n        return \b(0, 1)\n    f_m, f_m1 = Fibonacci(n/2)\n    if n%2:\n        return f_m**2+f_m1**2, (2*f_m+f_m1)*f_m1\n    return (2*f_m1-f_m)*f_m1, f_m**2+f_m1**2\n```\n\n\n---\n","source":"_posts/Fibonacci序列.md","raw":"---\ntitle: Fibonacci序列\ncategories: 计算机\ntags: 算法\nabbrlink: 5621\ndate: 2018-10-10 14:19:21\n---\n\n### 从Fibonacci序列谈起\n#### 定义\n\n$F_0=0,\\quad F_1=1,\\quad F_n=F_{n-1}+F_{n-2}\\quad (n>1)$\n\n递归算法的$F_n$计算时间复杂度为$O(2^n)$，为指数时间。空间复杂度为$S_n=O(n)$为线性空间。\n\n改用备忘录的方式计算Fibonacci序列可以更节约时间。类似如下方式：\n\n| $F_0$ | $F_1$ | $F_2$ | $F_3$ | $F_4$ | $F_5$ |\n|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|\n|   0   | 1     | 1     | 2     | 3     | 5     |\n\n但空间仍然是$O(n)$，如果只需要求$F_n$则有很大空间浪费。所以我们只需要保存前两项即可。\n$P_1=0,P_2=1,C=P_1+P_2=1$,下一次赋值结果为$P_1=1,P_2=1,C=2$,时间复杂度为$O(n)$,空间复杂度为$O(1)$。\n\n更好的方式：\n使用Fibonacci序列的矩阵形式\n$$\\begin{align}\\begin{pmatrix}\nF_{n+1}\\\\\\\\\nF_n\n\\end{pmatrix}&=\\begin{pmatrix}\n1 & 1\\\\\\\\\n1 & 0\n\\end{pmatrix}\n\\begin{pmatrix}\nF_{n}\\\\\\\\\nF_{n-1}\n\\end{pmatrix}\\\\\\\\&=\\begin{pmatrix}\n1 & 1\\\\\\\\\n1 & 0\n\\end{pmatrix}^2\n\\begin{pmatrix}\nF_{n-1}\\\\\\\\\nF_{n-2}\n\\end{pmatrix}\\\\\\\\&\\cdots\\\\\\\\\n&=\\begin{pmatrix}\n1 & 1\\\\\\\\\n1 & 0\n\\end{pmatrix}^n\n\\begin{pmatrix}\nF_{1}\\\\\\\\\nF_{0}\n\\end{pmatrix}\n\\end{align}\n$$\n\n即最后结果为：\n$$\\begin{pmatrix}\nF_{n+1}\\\\\\\\\nF_n\n\\end{pmatrix}=\\begin{pmatrix}\n1 & 1\\\\\\\\\n1 & 0\n\\end{pmatrix}^n\n\\begin{pmatrix}\nF_{1}\\\\\\\\\nF_{0}\n\\end{pmatrix}\n$$\n\n下面用一个简单方法处理计算$\\begin{pmatrix}1 & 1\\\\\\\\1 & 0\\end{pmatrix}^n$\n\n\n$\\text{令：}A=\\begin{pmatrix}\n1 & 1\\\\\\\\\n1 & 0\n\\end{pmatrix},\\text{那么}A^n=\\begin{pmatrix}\nF_{n+1} & F_n\\\\\\\\\nF_n & F_{n-1}\n\\end{pmatrix}\\text{归纳易证}$\n\n$\b\\text{所以}A^{2m}=\\begin{pmatrix}\nF_{2m+1} & F_{2m}\\\\\\\\\nF_{2m} & F_{2m-1}\n\\end{pmatrix}=A^m\\cdot A^m,\\quad A^m=\\begin{pmatrix}\nF_{m+1} & F_m\\\\\\\\\nF_m & F_{m-1}\n\\end{pmatrix}\\\\\\\\\n\\begin{align}\nso:\\begin{pmatrix}\nF_{2m+1} & F_{2m}\\\\\\\\\nF_{2m} & F_{2m-1}\n\\end{pmatrix}&=\n\\begin{pmatrix}\nF_{m+1} & F_m\\\\\\\\\nF_m & F_{m-1}\n\\end{pmatrix}\n\\begin{pmatrix}\nF_{m+1} & F_m\\\\\\\\\nF_m & F_{m-1}\n\\end{pmatrix}\\\\\\\\\n&=\\begin{pmatrix}\nF_{m+1}^2+F_m^2 & F_{m+1}F_m+F_m F_{m-1}\\\\\\\\\nF_{m+1}F_m+F_m F_{m-1} & F_{m}^2+F_{m-1}^2\n\\end{pmatrix}  \\end{align}$\n\n$\\Longrightarrow \\begin{cases}\nF_{2m+1}=F_{m+1}^2+F_m^2\\\\\\\\F_{2m}=F_m(F_{m+1}+ F_{m-1})\n\\end{cases}\\text{得到了Fibonacci序列的另一种递推公式}$\n\n1. $n$为奇数，即$n=2m+1，\\lfloor\\frac{n}{2}\\rfloor=m$\n$$\\begin{pmatrix}\nF_{n+1}\\\\\\\\\nF_{n}\n\\end{pmatrix}=\\begin{pmatrix}\nF_{2m+2}\\\\\\\\\nF_{2m+1}\n\\end{pmatrix}=\\begin{pmatrix}\n(2F_{m}+F_{m+1})F_{m+1}\\\\\\\\\nF_{m}^2+F_{m+1}^2\n\\end{pmatrix}$$\n2. n为偶数，即$n=2m，\\lfloor\\frac{n}{2}\\rfloor=m$\n$$\\begin{pmatrix}\nF_{n+1}\\\\\\\\\nF_{n}\n\\end{pmatrix}=\\begin{pmatrix}\nF_{2m+1}\\\\\\\\\nF_{2m}\n\\end{pmatrix}=\\begin{pmatrix}\nF_{m}^2+F_{m+1}^2\\\\\\\\\n(2F_{m+1}-F_{m})F_{m}\n\\end{pmatrix}$$\n\n> 这里仅用第m项与第m+1项表达，计算过程中的m-1项和m+2项利用Fibonacci数列的递推公式代换掉了。\n\n所以对于$Fibonacci(n)$我们只需要计算$Fibonacci(n/2)=Fibonacci(m)$。其时间复杂度为$O(\\log n)$，空间复杂度也为$O(\\log n)$。\n\npython代码如下：\n```python\ndef Fibonacci(n):\n    if n<=0:\n        return \b(0, 1)\n    f_m, f_m1 = Fibonacci(n/2)\n    if n%2:\n        return f_m**2+f_m1**2, (2*f_m+f_m1)*f_m1\n    return (2*f_m1-f_m)*f_m1, f_m**2+f_m1**2\n```\n\n\n---\n","slug":"Fibonacci序列","published":1,"updated":"2018-10-10T13:49:37.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq9a4s0100023t9kdqg0km2k","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><h3 id=\"从Fibonacci序列谈起\"><a href=\"#从Fibonacci序列谈起\" class=\"headerlink\" title=\"从Fibonacci序列谈起\"></a>从Fibonacci序列谈起</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>$F_0=0,\\quad F_1=1,\\quad F_n=F_{n-1}+F_{n-2}\\quad (n&gt;1)$</p><p>递归算法的$F_n$计算时间复杂度为$O(2^n)$，为指数时间。空间复杂度为$S_n=O(n)$为线性空间。</p><p>改用备忘录的方式计算Fibonacci序列可以更节约时间。类似如下方式：</p><table><thead><tr><th style=\"text-align:center\">$F_0$</th><th style=\"text-align:center\">$F_1$</th><th style=\"text-align:center\">$F_2$</th><th style=\"text-align:center\">$F_3$</th><th style=\"text-align:center\">$F_4$</th><th style=\"text-align:center\">$F_5$</th></tr></thead><tbody><tr><td style=\"text-align:center\">0</td><td style=\"text-align:center\">1</td><td style=\"text-align:center\">1</td><td style=\"text-align:center\">2</td><td style=\"text-align:center\">3</td><td style=\"text-align:center\">5</td></tr></tbody></table><p>但空间仍然是$O(n)$，如果只需要求$F_n$则有很大空间浪费。所以我们只需要保存前两项即可。<br>$P_1=0,P_2=1,C=P_1+P_2=1$,下一次赋值结果为$P_1=1,P_2=1,C=2$,时间复杂度为$O(n)$,空间复杂度为$O(1)$。</p><p>更好的方式：<br>使用Fibonacci序列的矩阵形式<br>$$\\begin{align}\\begin{pmatrix}<br>F_{n+1}\\\\<br>F_n<br>\\end{pmatrix}&amp;=\\begin{pmatrix}<br>1 &amp; 1\\\\<br>1 &amp; 0<br>\\end{pmatrix}<br>\\begin{pmatrix}<br>F_{n}\\\\<br>F_{n-1}<br>\\end{pmatrix}\\\\&amp;=\\begin{pmatrix}<br>1 &amp; 1\\\\<br>1 &amp; 0<br>\\end{pmatrix}^2<br>\\begin{pmatrix}<br>F_{n-1}\\\\<br>F_{n-2}<br>\\end{pmatrix}\\\\&amp;\\cdots\\\\<br>&amp;=\\begin{pmatrix}<br>1 &amp; 1\\\\<br>1 &amp; 0<br>\\end{pmatrix}^n<br>\\begin{pmatrix}<br>F_{1}\\\\<br>F_{0}<br>\\end{pmatrix}<br>\\end{align}<br>$$</p><p>即最后结果为：<br>$$\\begin{pmatrix}<br>F_{n+1}\\\\<br>F_n<br>\\end{pmatrix}=\\begin{pmatrix}<br>1 &amp; 1\\\\<br>1 &amp; 0<br>\\end{pmatrix}^n<br>\\begin{pmatrix}<br>F_{1}\\\\<br>F_{0}<br>\\end{pmatrix}<br>$$</p><p>下面用一个简单方法处理计算$\\begin{pmatrix}1 &amp; 1\\\\1 &amp; 0\\end{pmatrix}^n$</p><p>$\\text{令：}A=\\begin{pmatrix}<br>1 &amp; 1\\\\<br>1 &amp; 0<br>\\end{pmatrix},\\text{那么}A^n=\\begin{pmatrix}<br>F_{n+1} &amp; F_n\\\\<br>F_n &amp; F_{n-1}<br>\\end{pmatrix}\\text{归纳易证}$</p><p>$\b\\text{所以}A^{2m}=\\begin{pmatrix}<br>F_{2m+1} &amp; F_{2m}\\\\<br>F_{2m} &amp; F_{2m-1}<br>\\end{pmatrix}=A^m\\cdot A^m,\\quad A^m=\\begin{pmatrix}<br>F_{m+1} &amp; F_m\\\\<br>F_m &amp; F_{m-1}<br>\\end{pmatrix}\\\\<br>\\begin{align}<br>so:\\begin{pmatrix}<br>F_{2m+1} &amp; F_{2m}\\\\<br>F_{2m} &amp; F_{2m-1}<br>\\end{pmatrix}&amp;=<br>\\begin{pmatrix}<br>F_{m+1} &amp; F_m\\\\<br>F_m &amp; F_{m-1}<br>\\end{pmatrix}<br>\\begin{pmatrix}<br>F_{m+1} &amp; F_m\\\\<br>F_m &amp; F_{m-1}<br>\\end{pmatrix}\\\\<br>&amp;=\\begin{pmatrix}<br>F_{m+1}^2+F_m^2 &amp; F_{m+1}F_m+F_m F_{m-1}\\\\<br>F_{m+1}F_m+F_m F_{m-1} &amp; F_{m}^2+F_{m-1}^2<br>\\end{pmatrix} \\end{align}$</p><p>$\\Longrightarrow \\begin{cases}<br>F_{2m+1}=F_{m+1}^2+F_m^2\\\\F_{2m}=F_m(F_{m+1}+ F_{m-1})<br>\\end{cases}\\text{得到了Fibonacci序列的另一种递推公式}$</p><ol><li>$n$为奇数，即$n=2m+1，\\lfloor\\frac{n}{2}\\rfloor=m$<br>$$\\begin{pmatrix}<br>F_{n+1}\\\\<br>F_{n}<br>\\end{pmatrix}=\\begin{pmatrix}<br>F_{2m+2}\\\\<br>F_{2m+1}<br>\\end{pmatrix}=\\begin{pmatrix}<br>(2F_{m}+F_{m+1})F_{m+1}\\\\<br>F_{m}^2+F_{m+1}^2<br>\\end{pmatrix}$$</li><li>n为偶数，即$n=2m，\\lfloor\\frac{n}{2}\\rfloor=m$<br>$$\\begin{pmatrix}<br>F_{n+1}\\\\<br>F_{n}<br>\\end{pmatrix}=\\begin{pmatrix}<br>F_{2m+1}\\\\<br>F_{2m}<br>\\end{pmatrix}=\\begin{pmatrix}<br>F_{m}^2+F_{m+1}^2\\\\<br>(2F_{m+1}-F_{m})F_{m}<br>\\end{pmatrix}$$</li></ol><blockquote><p>这里仅用第m项与第m+1项表达，计算过程中的m-1项和m+2项利用Fibonacci数列的递推公式代换掉了。</p></blockquote><p>所以对于$Fibonacci(n)$我们只需要计算$Fibonacci(n/2)=Fibonacci(m)$。其时间复杂度为$O(\\log n)$，空间复杂度也为$O(\\log n)$。</p><p>python代码如下：<br></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Fibonacci</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n&lt;=<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> \b(<span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    f_m, f_m1 = Fibonacci(n/<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n%<span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f_m**<span class=\"number\">2</span>+f_m1**<span class=\"number\">2</span>, (<span class=\"number\">2</span>*f_m+f_m1)*f_m1</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">2</span>*f_m1-f_m)*f_m1, f_m**<span class=\"number\">2</span>+f_m1**<span class=\"number\">2</span></span><br></pre></td></tr></table></figure><p></p><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><h3 id=\"从Fibonacci序列谈起\"><a href=\"#从Fibonacci序列谈起\" class=\"headerlink\" title=\"从Fibonacci序列谈起\"></a>从Fibonacci序列谈起</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>$F_0=0,\\quad F_1=1,\\quad F_n=F_{n-1}+F_{n-2}\\quad (n&gt;1)$</p><p>递归算法的$F_n$计算时间复杂度为$O(2^n)$，为指数时间。空间复杂度为$S_n=O(n)$为线性空间。</p><p>改用备忘录的方式计算Fibonacci序列可以更节约时间。类似如下方式：</p><table><thead><tr><th style=\"text-align:center\">$F_0$</th><th style=\"text-align:center\">$F_1$</th><th style=\"text-align:center\">$F_2$</th><th style=\"text-align:center\">$F_3$</th><th style=\"text-align:center\">$F_4$</th><th style=\"text-align:center\">$F_5$</th></tr></thead><tbody><tr><td style=\"text-align:center\">0</td><td style=\"text-align:center\">1</td><td style=\"text-align:center\">1</td><td style=\"text-align:center\">2</td><td style=\"text-align:center\">3</td><td style=\"text-align:center\">5</td></tr></tbody></table><p>但空间仍然是$O(n)$，如果只需要求$F_n$则有很大空间浪费。所以我们只需要保存前两项即可。<br>$P_1=0,P_2=1,C=P_1+P_2=1$,下一次赋值结果为$P_1=1,P_2=1,C=2$,时间复杂度为$O(n)$,空间复杂度为$O(1)$。</p><p>更好的方式：<br>使用Fibonacci序列的矩阵形式<br>$$\\begin{align}\\begin{pmatrix}<br>F_{n+1}\\\\<br>F_n<br>\\end{pmatrix}&amp;=\\begin{pmatrix}<br>1 &amp; 1\\\\<br>1 &amp; 0<br>\\end{pmatrix}<br>\\begin{pmatrix}<br>F_{n}\\\\<br>F_{n-1}<br>\\end{pmatrix}\\\\&amp;=\\begin{pmatrix}<br>1 &amp; 1\\\\<br>1 &amp; 0<br>\\end{pmatrix}^2<br>\\begin{pmatrix}<br>F_{n-1}\\\\<br>F_{n-2}<br>\\end{pmatrix}\\\\&amp;\\cdots\\\\<br>&amp;=\\begin{pmatrix}<br>1 &amp; 1\\\\<br>1 &amp; 0<br>\\end{pmatrix}^n<br>\\begin{pmatrix}<br>F_{1}\\\\<br>F_{0}<br>\\end{pmatrix}<br>\\end{align}<br>$$</p><p>即最后结果为：<br>$$\\begin{pmatrix}<br>F_{n+1}\\\\<br>F_n<br>\\end{pmatrix}=\\begin{pmatrix}<br>1 &amp; 1\\\\<br>1 &amp; 0<br>\\end{pmatrix}^n<br>\\begin{pmatrix}<br>F_{1}\\\\<br>F_{0}<br>\\end{pmatrix}<br>$$</p><p>下面用一个简单方法处理计算$\\begin{pmatrix}1 &amp; 1\\\\1 &amp; 0\\end{pmatrix}^n$</p><p>$\\text{令：}A=\\begin{pmatrix}<br>1 &amp; 1\\\\<br>1 &amp; 0<br>\\end{pmatrix},\\text{那么}A^n=\\begin{pmatrix}<br>F_{n+1} &amp; F_n\\\\<br>F_n &amp; F_{n-1}<br>\\end{pmatrix}\\text{归纳易证}$</p><p>$\b\\text{所以}A^{2m}=\\begin{pmatrix}<br>F_{2m+1} &amp; F_{2m}\\\\<br>F_{2m} &amp; F_{2m-1}<br>\\end{pmatrix}=A^m\\cdot A^m,\\quad A^m=\\begin{pmatrix}<br>F_{m+1} &amp; F_m\\\\<br>F_m &amp; F_{m-1}<br>\\end{pmatrix}\\\\<br>\\begin{align}<br>so:\\begin{pmatrix}<br>F_{2m+1} &amp; F_{2m}\\\\<br>F_{2m} &amp; F_{2m-1}<br>\\end{pmatrix}&amp;=<br>\\begin{pmatrix}<br>F_{m+1} &amp; F_m\\\\<br>F_m &amp; F_{m-1}<br>\\end{pmatrix}<br>\\begin{pmatrix}<br>F_{m+1} &amp; F_m\\\\<br>F_m &amp; F_{m-1}<br>\\end{pmatrix}\\\\<br>&amp;=\\begin{pmatrix}<br>F_{m+1}^2+F_m^2 &amp; F_{m+1}F_m+F_m F_{m-1}\\\\<br>F_{m+1}F_m+F_m F_{m-1} &amp; F_{m}^2+F_{m-1}^2<br>\\end{pmatrix} \\end{align}$</p><p>$\\Longrightarrow \\begin{cases}<br>F_{2m+1}=F_{m+1}^2+F_m^2\\\\F_{2m}=F_m(F_{m+1}+ F_{m-1})<br>\\end{cases}\\text{得到了Fibonacci序列的另一种递推公式}$</p><ol><li>$n$为奇数，即$n=2m+1，\\lfloor\\frac{n}{2}\\rfloor=m$<br>$$\\begin{pmatrix}<br>F_{n+1}\\\\<br>F_{n}<br>\\end{pmatrix}=\\begin{pmatrix}<br>F_{2m+2}\\\\<br>F_{2m+1}<br>\\end{pmatrix}=\\begin{pmatrix}<br>(2F_{m}+F_{m+1})F_{m+1}\\\\<br>F_{m}^2+F_{m+1}^2<br>\\end{pmatrix}$$</li><li>n为偶数，即$n=2m，\\lfloor\\frac{n}{2}\\rfloor=m$<br>$$\\begin{pmatrix}<br>F_{n+1}\\\\<br>F_{n}<br>\\end{pmatrix}=\\begin{pmatrix}<br>F_{2m+1}\\\\<br>F_{2m}<br>\\end{pmatrix}=\\begin{pmatrix}<br>F_{m}^2+F_{m+1}^2\\\\<br>(2F_{m+1}-F_{m})F_{m}<br>\\end{pmatrix}$$</li></ol><blockquote><p>这里仅用第m项与第m+1项表达，计算过程中的m-1项和m+2项利用Fibonacci数列的递推公式代换掉了。</p></blockquote><p>所以对于$Fibonacci(n)$我们只需要计算$Fibonacci(n/2)=Fibonacci(m)$。其时间复杂度为$O(\\log n)$，空间复杂度也为$O(\\log n)$。</p><p>python代码如下：<br></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Fibonacci</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n&lt;=<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> \b(<span class=\"number\">0</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    f_m, f_m1 = Fibonacci(n/<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n%<span class=\"number\">2</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f_m**<span class=\"number\">2</span>+f_m1**<span class=\"number\">2</span>, (<span class=\"number\">2</span>*f_m+f_m1)*f_m1</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">2</span>*f_m1-f_m)*f_m1, f_m**<span class=\"number\">2</span>+f_m1**<span class=\"number\">2</span></span><br></pre></td></tr></table></figure><p></p><hr><!-- rebuild by neat -->"},{"title":"fusc function problem of Kata","abbrlink":2611,"date":"2018-09-23T12:28:11.000Z","_content":"This Kata is a continuation of [Part 1](http://www.codewars.com/kata/the-fusc-function-part-1). The `fusc` function is defined recursively as follows:\n\n```\nfusc(0) = 0\nfusc(1) = 1\nfusc(2n) = fusc(n)\nfusc(2n + 1) = fusc(n) + fusc(n + 1)\n```\n\nYour job is to produce the code for the `fusc` function. In this kata, your function will be tested with large values of `n` (more than 1000 bits), so you should be concerned about stack overflow and timeouts.\n\n**NOTE: In JavaScript and PHP, your function will be tested with n up to 52 bits. This will still require a non-naive solution. This will also overflow 32-bit operators, but it will be integer arithmetic.**\n\nHint: Define `F(n, a, b) = a * fusc(n) + b * fusc(n + 1)` and provide a recursive definition of `F` *without* referencing `fusc`.\n\n上面是我之前做这题时候的描述，现在再看[这题](http://www.codewars.com/kata/the-fusc-function-part-1)，题目描述都不一样了。。之前直接递归可能是测试数太大了，直接超出最大递归深度。现在这题改了可以通过了，代码就不贴了。\n但是之前谷歌搜了半天搜到了一个叫[Stern's Diatomic Series](http://mathworld.wolfram.com/SternsDiatomicSeries.html)的东西，很有意思，这个递推公式的通项可以写成如下形式：\n\n$$ a_{0}=0,a_{1}=1,a_{n}=\\sum_{k=0}^{n-1}\\limits \\binom{k}{n-k-1}(mod\\,2). $$\n\n---\n","source":"_posts/fuscFunction.md","raw":"---\ntitle: fusc function problem of Kata\ncategories: 计算机\ntags:\n  - 递归\n  - Kata\nabbrlink: 2611\ndate: 2018-09-23 20:28:11\n---\nThis Kata is a continuation of [Part 1](http://www.codewars.com/kata/the-fusc-function-part-1). The `fusc` function is defined recursively as follows:\n\n```\nfusc(0) = 0\nfusc(1) = 1\nfusc(2n) = fusc(n)\nfusc(2n + 1) = fusc(n) + fusc(n + 1)\n```\n\nYour job is to produce the code for the `fusc` function. In this kata, your function will be tested with large values of `n` (more than 1000 bits), so you should be concerned about stack overflow and timeouts.\n\n**NOTE: In JavaScript and PHP, your function will be tested with n up to 52 bits. This will still require a non-naive solution. This will also overflow 32-bit operators, but it will be integer arithmetic.**\n\nHint: Define `F(n, a, b) = a * fusc(n) + b * fusc(n + 1)` and provide a recursive definition of `F` *without* referencing `fusc`.\n\n上面是我之前做这题时候的描述，现在再看[这题](http://www.codewars.com/kata/the-fusc-function-part-1)，题目描述都不一样了。。之前直接递归可能是测试数太大了，直接超出最大递归深度。现在这题改了可以通过了，代码就不贴了。\n但是之前谷歌搜了半天搜到了一个叫[Stern's Diatomic Series](http://mathworld.wolfram.com/SternsDiatomicSeries.html)的东西，很有意思，这个递推公式的通项可以写成如下形式：\n\n$$ a_{0}=0,a_{1}=1,a_{n}=\\sum_{k=0}^{n-1}\\limits \\binom{k}{n-k-1}(mod\\,2). $$\n\n---\n","slug":"fuscFunction","published":1,"updated":"2018-09-27T07:17:29.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq9a4s0500043t9kamvkk6q1","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><p>This Kata is a continuation of <a href=\"http://www.codewars.com/kata/the-fusc-function-part-1\" target=\"_blank\" rel=\"noopener\">Part 1</a>. The <code>fusc</code> function is defined recursively as follows:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fusc(0) = 0</span><br><span class=\"line\">fusc(1) = 1</span><br><span class=\"line\">fusc(2n) = fusc(n)</span><br><span class=\"line\">fusc(2n + 1) = fusc(n) + fusc(n + 1)</span><br></pre></td></tr></table></figure><p>Your job is to produce the code for the <code>fusc</code> function. In this kata, your function will be tested with large values of <code>n</code> (more than 1000 bits), so you should be concerned about stack overflow and timeouts.</p><p><strong>NOTE: In JavaScript and PHP, your function will be tested with n up to 52 bits. This will still require a non-naive solution. This will also overflow 32-bit operators, but it will be integer arithmetic.</strong></p><p>Hint: Define <code>F(n, a, b) = a * fusc(n) + b * fusc(n + 1)</code> and provide a recursive definition of <code>F</code> <em>without</em> referencing <code>fusc</code>.</p><p>上面是我之前做这题时候的描述，现在再看<a href=\"http://www.codewars.com/kata/the-fusc-function-part-1\" target=\"_blank\" rel=\"noopener\">这题</a>，题目描述都不一样了。。之前直接递归可能是测试数太大了，直接超出最大递归深度。现在这题改了可以通过了，代码就不贴了。<br>但是之前谷歌搜了半天搜到了一个叫<a href=\"http://mathworld.wolfram.com/SternsDiatomicSeries.html\" target=\"_blank\" rel=\"noopener\">Stern’s Diatomic Series</a>的东西，很有意思，这个递推公式的通项可以写成如下形式：</p><p>$$ a_{0}=0,a_{1}=1,a_{n}=\\sum_{k=0}^{n-1}\\limits \\binom{k}{n-k-1}(mod\\,2). $$</p><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><p>This Kata is a continuation of <a href=\"http://www.codewars.com/kata/the-fusc-function-part-1\" target=\"_blank\" rel=\"noopener\">Part 1</a>. The <code>fusc</code> function is defined recursively as follows:</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fusc(0) = 0</span><br><span class=\"line\">fusc(1) = 1</span><br><span class=\"line\">fusc(2n) = fusc(n)</span><br><span class=\"line\">fusc(2n + 1) = fusc(n) + fusc(n + 1)</span><br></pre></td></tr></table></figure><p>Your job is to produce the code for the <code>fusc</code> function. In this kata, your function will be tested with large values of <code>n</code> (more than 1000 bits), so you should be concerned about stack overflow and timeouts.</p><p><strong>NOTE: In JavaScript and PHP, your function will be tested with n up to 52 bits. This will still require a non-naive solution. This will also overflow 32-bit operators, but it will be integer arithmetic.</strong></p><p>Hint: Define <code>F(n, a, b) = a * fusc(n) + b * fusc(n + 1)</code> and provide a recursive definition of <code>F</code> <em>without</em> referencing <code>fusc</code>.</p><p>上面是我之前做这题时候的描述，现在再看<a href=\"http://www.codewars.com/kata/the-fusc-function-part-1\" target=\"_blank\" rel=\"noopener\">这题</a>，题目描述都不一样了。。之前直接递归可能是测试数太大了，直接超出最大递归深度。现在这题改了可以通过了，代码就不贴了。<br>但是之前谷歌搜了半天搜到了一个叫<a href=\"http://mathworld.wolfram.com/SternsDiatomicSeries.html\" target=\"_blank\" rel=\"noopener\">Stern’s Diatomic Series</a>的东西，很有意思，这个递推公式的通项可以写成如下形式：</p><p>$$ a_{0}=0,a_{1}=1,a_{n}=\\sum_{k=0}^{n-1}\\limits \\binom{k}{n-k-1}(mod\\,2). $$</p><hr><!-- rebuild by neat -->"},{"title":"关hexo写latex数学公式的一些雷区","abbrlink":46240,"date":"2018-09-23T12:28:11.000Z","_content":"\n### 特殊符号的转义问题\n在markdown中使用latex数学公式时候，不可在数学公式环境下&#40; &#36;&#36;包括进去的部分 &#41;使用&#92;进行转义，否则hexo生成会报错。比如大括号&#123;，不要在数学公式环境内使用&#92;&#123;转义，而应该使用&amp;#123;。\n一些markdown需要转义字符如下：\n\n| 符号 | html代码 | 注释 |\n| :---: | :--------: | :--: |\n| &#33; | &amp;#33; | 惊叹号|\n| &#34; | &amp;#34; | 双引号|\n| &#35; | &amp;#35; | 数字标志|\n| &#36; | &amp;#36; | 百分号|\n| &#37; | &amp;#37; | 单引号|\n| &#38; | &amp;#38; | 左小括号|\n| &#39; | &amp;#39; | 右小括号|\n| &#40; | &amp;#40; | 惊叹号|\n| &#41; | &amp;#41; | 加号|\n| &#42; | &amp;#42; | 小于号|\n| &#43; | &amp;#43; | 等于号|\n| &#60; | &amp;#60; | 大于号|\n| &#61; | &amp;#61; | 问号|\n| &#64; | &amp;#64; | Commercial at|\n| &#91; | &amp;#91; | 左中括号|\n| &#92; | &amp;#92; | 反斜杠|\n| &#93; | &amp;#93; | 右中括号|\n| &#123; | &amp;#123; | 左大括号|\n| &#124; | &amp;#124; | 竖线|\n| &#125; | &amp;#125; | 右大括号|\n\n### 数学环境下的换行问题\n**我们需要\\\\\\\\\\\\\\\\（四个）而不是\\\\\\\\（俩个）实现换行，因为markdown会将反斜杠视作转义\b**\n\n---\n","source":"_posts/markdown中写数学公式的一个问题.md","raw":"---\ntitle: 关hexo写latex数学公式的一些雷区\ncategories: 计算机\ntags:\n  - markdown\n  - latex\nabbrlink: 46240\ndate: 2018-09-23 20:28:11\n---\n\n### 特殊符号的转义问题\n在markdown中使用latex数学公式时候，不可在数学公式环境下&#40; &#36;&#36;包括进去的部分 &#41;使用&#92;进行转义，否则hexo生成会报错。比如大括号&#123;，不要在数学公式环境内使用&#92;&#123;转义，而应该使用&amp;#123;。\n一些markdown需要转义字符如下：\n\n| 符号 | html代码 | 注释 |\n| :---: | :--------: | :--: |\n| &#33; | &amp;#33; | 惊叹号|\n| &#34; | &amp;#34; | 双引号|\n| &#35; | &amp;#35; | 数字标志|\n| &#36; | &amp;#36; | 百分号|\n| &#37; | &amp;#37; | 单引号|\n| &#38; | &amp;#38; | 左小括号|\n| &#39; | &amp;#39; | 右小括号|\n| &#40; | &amp;#40; | 惊叹号|\n| &#41; | &amp;#41; | 加号|\n| &#42; | &amp;#42; | 小于号|\n| &#43; | &amp;#43; | 等于号|\n| &#60; | &amp;#60; | 大于号|\n| &#61; | &amp;#61; | 问号|\n| &#64; | &amp;#64; | Commercial at|\n| &#91; | &amp;#91; | 左中括号|\n| &#92; | &amp;#92; | 反斜杠|\n| &#93; | &amp;#93; | 右中括号|\n| &#123; | &amp;#123; | 左大括号|\n| &#124; | &amp;#124; | 竖线|\n| &#125; | &amp;#125; | 右大括号|\n\n### 数学环境下的换行问题\n**我们需要\\\\\\\\\\\\\\\\（四个）而不是\\\\\\\\（俩个）实现换行，因为markdown会将反斜杠视作转义\b**\n\n---\n","slug":"markdown中写数学公式的一个问题","published":1,"updated":"2018-09-27T07:17:40.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq9a4s0800083t9koz08dcr9","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><h3 id=\"特殊符号的转义问题\"><a href=\"#特殊符号的转义问题\" class=\"headerlink\" title=\"特殊符号的转义问题\"></a>特殊符号的转义问题</h3><p>在markdown中使用latex数学公式时候，不可在数学公式环境下&#40; &#36;&#36;包括进去的部分 &#41;使用&#92;进行转义，否则hexo生成会报错。比如大括号&#123;，不要在数学公式环境内使用&#92;&#123;转义，而应该使用&amp;#123;。<br>一些markdown需要转义字符如下：</p><table><thead><tr><th style=\"text-align:center\">符号</th><th style=\"text-align:center\">html代码</th><th style=\"text-align:center\">注释</th></tr></thead><tbody><tr><td style=\"text-align:center\">&#33;</td><td style=\"text-align:center\">&amp;#33;</td><td style=\"text-align:center\">惊叹号</td></tr><tr><td style=\"text-align:center\">&#34;</td><td style=\"text-align:center\">&amp;#34;</td><td style=\"text-align:center\">双引号</td></tr><tr><td style=\"text-align:center\">&#35;</td><td style=\"text-align:center\">&amp;#35;</td><td style=\"text-align:center\">数字标志</td></tr><tr><td style=\"text-align:center\">&#36;</td><td style=\"text-align:center\">&amp;#36;</td><td style=\"text-align:center\">百分号</td></tr><tr><td style=\"text-align:center\">&#37;</td><td style=\"text-align:center\">&amp;#37;</td><td style=\"text-align:center\">单引号</td></tr><tr><td style=\"text-align:center\">&#38;</td><td style=\"text-align:center\">&amp;#38;</td><td style=\"text-align:center\">左小括号</td></tr><tr><td style=\"text-align:center\">&#39;</td><td style=\"text-align:center\">&amp;#39;</td><td style=\"text-align:center\">右小括号</td></tr><tr><td style=\"text-align:center\">&#40;</td><td style=\"text-align:center\">&amp;#40;</td><td style=\"text-align:center\">惊叹号</td></tr><tr><td style=\"text-align:center\">&#41;</td><td style=\"text-align:center\">&amp;#41;</td><td style=\"text-align:center\">加号</td></tr><tr><td style=\"text-align:center\">&#42;</td><td style=\"text-align:center\">&amp;#42;</td><td style=\"text-align:center\">小于号</td></tr><tr><td style=\"text-align:center\">&#43;</td><td style=\"text-align:center\">&amp;#43;</td><td style=\"text-align:center\">等于号</td></tr><tr><td style=\"text-align:center\">&#60;</td><td style=\"text-align:center\">&amp;#60;</td><td style=\"text-align:center\">大于号</td></tr><tr><td style=\"text-align:center\">&#61;</td><td style=\"text-align:center\">&amp;#61;</td><td style=\"text-align:center\">问号</td></tr><tr><td style=\"text-align:center\">&#64;</td><td style=\"text-align:center\">&amp;#64;</td><td style=\"text-align:center\">Commercial at</td></tr><tr><td style=\"text-align:center\">&#91;</td><td style=\"text-align:center\">&amp;#91;</td><td style=\"text-align:center\">左中括号</td></tr><tr><td style=\"text-align:center\">&#92;</td><td style=\"text-align:center\">&amp;#92;</td><td style=\"text-align:center\">反斜杠</td></tr><tr><td style=\"text-align:center\">&#93;</td><td style=\"text-align:center\">&amp;#93;</td><td style=\"text-align:center\">右中括号</td></tr><tr><td style=\"text-align:center\">&#123;</td><td style=\"text-align:center\">&amp;#123;</td><td style=\"text-align:center\">左大括号</td></tr><tr><td style=\"text-align:center\">&#124;</td><td style=\"text-align:center\">&amp;#124;</td><td style=\"text-align:center\">竖线</td></tr><tr><td style=\"text-align:center\">&#125;</td><td style=\"text-align:center\">&amp;#125;</td><td style=\"text-align:center\">右大括号</td></tr></tbody></table><h3 id=\"数学环境下的换行问题\"><a href=\"#数学环境下的换行问题\" class=\"headerlink\" title=\"数学环境下的换行问题\"></a>数学环境下的换行问题</h3><p><strong>我们需要\\\\\\\\（四个）而不是\\\\（俩个）实现换行，因为markdown会将反斜杠视作转义\b</strong></p><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><h3 id=\"特殊符号的转义问题\"><a href=\"#特殊符号的转义问题\" class=\"headerlink\" title=\"特殊符号的转义问题\"></a>特殊符号的转义问题</h3><p>在markdown中使用latex数学公式时候，不可在数学公式环境下&#40; &#36;&#36;包括进去的部分 &#41;使用&#92;进行转义，否则hexo生成会报错。比如大括号&#123;，不要在数学公式环境内使用&#92;&#123;转义，而应该使用&amp;#123;。<br>一些markdown需要转义字符如下：</p><table><thead><tr><th style=\"text-align:center\">符号</th><th style=\"text-align:center\">html代码</th><th style=\"text-align:center\">注释</th></tr></thead><tbody><tr><td style=\"text-align:center\">&#33;</td><td style=\"text-align:center\">&amp;#33;</td><td style=\"text-align:center\">惊叹号</td></tr><tr><td style=\"text-align:center\">&#34;</td><td style=\"text-align:center\">&amp;#34;</td><td style=\"text-align:center\">双引号</td></tr><tr><td style=\"text-align:center\">&#35;</td><td style=\"text-align:center\">&amp;#35;</td><td style=\"text-align:center\">数字标志</td></tr><tr><td style=\"text-align:center\">&#36;</td><td style=\"text-align:center\">&amp;#36;</td><td style=\"text-align:center\">百分号</td></tr><tr><td style=\"text-align:center\">&#37;</td><td style=\"text-align:center\">&amp;#37;</td><td style=\"text-align:center\">单引号</td></tr><tr><td style=\"text-align:center\">&#38;</td><td style=\"text-align:center\">&amp;#38;</td><td style=\"text-align:center\">左小括号</td></tr><tr><td style=\"text-align:center\">&#39;</td><td style=\"text-align:center\">&amp;#39;</td><td style=\"text-align:center\">右小括号</td></tr><tr><td style=\"text-align:center\">&#40;</td><td style=\"text-align:center\">&amp;#40;</td><td style=\"text-align:center\">惊叹号</td></tr><tr><td style=\"text-align:center\">&#41;</td><td style=\"text-align:center\">&amp;#41;</td><td style=\"text-align:center\">加号</td></tr><tr><td style=\"text-align:center\">&#42;</td><td style=\"text-align:center\">&amp;#42;</td><td style=\"text-align:center\">小于号</td></tr><tr><td style=\"text-align:center\">&#43;</td><td style=\"text-align:center\">&amp;#43;</td><td style=\"text-align:center\">等于号</td></tr><tr><td style=\"text-align:center\">&#60;</td><td style=\"text-align:center\">&amp;#60;</td><td style=\"text-align:center\">大于号</td></tr><tr><td style=\"text-align:center\">&#61;</td><td style=\"text-align:center\">&amp;#61;</td><td style=\"text-align:center\">问号</td></tr><tr><td style=\"text-align:center\">&#64;</td><td style=\"text-align:center\">&amp;#64;</td><td style=\"text-align:center\">Commercial at</td></tr><tr><td style=\"text-align:center\">&#91;</td><td style=\"text-align:center\">&amp;#91;</td><td style=\"text-align:center\">左中括号</td></tr><tr><td style=\"text-align:center\">&#92;</td><td style=\"text-align:center\">&amp;#92;</td><td style=\"text-align:center\">反斜杠</td></tr><tr><td style=\"text-align:center\">&#93;</td><td style=\"text-align:center\">&amp;#93;</td><td style=\"text-align:center\">右中括号</td></tr><tr><td style=\"text-align:center\">&#123;</td><td style=\"text-align:center\">&amp;#123;</td><td style=\"text-align:center\">左大括号</td></tr><tr><td style=\"text-align:center\">&#124;</td><td style=\"text-align:center\">&amp;#124;</td><td style=\"text-align:center\">竖线</td></tr><tr><td style=\"text-align:center\">&#125;</td><td style=\"text-align:center\">&amp;#125;</td><td style=\"text-align:center\">右大括号</td></tr></tbody></table><h3 id=\"数学环境下的换行问题\"><a href=\"#数学环境下的换行问题\" class=\"headerlink\" title=\"数学环境下的换行问题\"></a>数学环境下的换行问题</h3><p><strong>我们需要\\\\\\\\（四个）而不是\\\\（俩个）实现换行，因为markdown会将反斜杠视作转义\b</strong></p><hr><!-- rebuild by neat -->"},{"title":"QR分解之Householder变换","abbrlink":29605,"date":"2018-10-19T12:25:24.000Z","_content":"\n定义Householder矩阵如下：\n$$\\boldsymbol{H}(\\boldsymbol{w})=\\boldsymbol{I}-\\frac{2}{\\boldsymbol{w}^T \\boldsymbol{w}} \\boldsymbol{w} \\boldsymbol{w}^T$$\n显然该矩阵具有如下性质：\n\n1. $\\boldsymbol{H}^T=\\boldsymbol{H}$，即$\\boldsymbol{H}$为对称阵；\n2. $\\boldsymbol{H}^T\\boldsymbol{H}=\\boldsymbol{I}$，即$\\boldsymbol{H}$为正交阵；\n3. 如果$\\boldsymbol{H}\\boldsymbol{x}=\\boldsymbol{y}$，则$\\parallel \\vec{y}\\parallel_2=\\parallel \\vec{x}\\parallel_2$；反之，对于任意两个向量$\\boldsymbol{x},\\boldsymbol{y}\\in \\mathbb{R}^n$，若$\\parallel \\vec{y}\\parallel_2=\\parallel \\vec{x}\\parallel_2$，且$\\vec{x}\\neq\\vec{y}$，则必存在Householder矩阵$\\boldsymbol{H}$，使得$\\boldsymbol{y}=\\boldsymbol{H}\\boldsymbol{x}$；\n4. 设$\\vec{x}=(x_1,x_2,\\cdots,x_n)^T\\in \\mathbb{R}^n$且$\\vec{x}\\neq\\vec{0}$，取$\\vec{w}=\\vec{x}\\pm\\parallel \\vec{x}\\parallel_2 \\vec{e}_1$，则\b$\\boldsymbol{H}(\\boldsymbol{w})\\boldsymbol{x}=\\boldsymbol{H}(\\boldsymbol{x}\\pm\\parallel \\boldsymbol{x}\\parallel_2 \\boldsymbol{e}_1)\\vec{x}=\\pm\\parallel \\vec{x}\\parallel_2 \\vec{e}_1=\\pm\\parallel \\vec{x}\\parallel_2 (1,0,\\cdots,0)^T$.\n\n证明：\b(1),(2)显然，证明(3)显然有：\n$$\\parallel \\boldsymbol{y}\\parallel_2^2=\\boldsymbol{y}^T\\boldsymbol{y}=(\\boldsymbol{H}\\boldsymbol{x})^T(\\boldsymbol{H}\\boldsymbol{x})=\\boldsymbol{x}^T(\\boldsymbol{H}^T\\boldsymbol{H})\\boldsymbol{x}=\\boldsymbol{x}^T\\boldsymbol{x}=\\parallel\\boldsymbol{x}\\parallel_2^2$$\n反之，若$\\parallel \\vec{y}\\parallel_2=\\parallel \\vec{x}\\parallel_2$，且$\\vec{x}\\neq\\vec{y}$,令$\\boldsymbol{w}=\\boldsymbol{x}-\\boldsymbol{y}$,有：\n$$\\parallel\\boldsymbol{w}\\parallel_2^2=(\\boldsymbol{x}-\\boldsymbol{y})^T(\\boldsymbol{x}-\\boldsymbol{y})=(2\\boldsymbol{x}-(\\boldsymbol{x}+\\boldsymbol{y}))^T(\\boldsymbol{x}-\\boldsymbol{y})=2\\boldsymbol{x}^T(\\boldsymbol{x}-\\boldsymbol{y})$$\n\n$$\\begin{align}\\boldsymbol{H}(\\boldsymbol{w})\\boldsymbol{x}&=(\\boldsymbol{I}-\\frac{2}{\\boldsymbol{w}^T \\boldsymbol{w}} \\boldsymbol{w} \\boldsymbol{w}^T)\\boldsymbol{x}=(\\boldsymbol{I}-\\frac{2}{\\parallel\\boldsymbol{x}-\\boldsymbol{y}\\parallel_2^2} (\\boldsymbol{x}-\\boldsymbol{y}) (\\boldsymbol{x}-\\boldsymbol{y})^T)\\boldsymbol{x}\\\\\\\\\n&=\\boldsymbol{x}-\\frac{2(\\boldsymbol{x}-\\boldsymbol{y})^T\\boldsymbol{x}}{\\parallel\\boldsymbol{x}-\\boldsymbol{y}\\parallel_2^2}(\\boldsymbol{x}-\\boldsymbol{y})=\\boldsymbol{x}-(\\boldsymbol{x}-\\boldsymbol{y})=\\boldsymbol{y}\\end{align}$$\n\n性质(4)由性质(3)自然得出。\n\n$m\\times n$阶矩阵三角化过程\n记\n$$\nA_{m\\times n}^{(1)}=A_{m\\times n}=\\begin{bmatrix}a_{11}^{(1)} & a_{12}^{(1)} & \\cdots & a_{1n}^{(1)}\\\\\\\\a_{21}^{(1)} & a_{22}^{(1)} & \\cdots & a_{2n}^{(1)}\\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots\\\\\\\\a_{m1}^{(1)} & a_{m2}^{(1)} & \\cdots & a_{mn}^{(1)}\\end{bmatrix}$$\n\n取正交矩阵$Q_1=H_1$(依性质4取Householder矩阵)，这里$H_1$是将$m$维向量$(a_{11}^{(1)}, a_{21}^{(1)},\\cdots,a_{m1}^{(1)})^T$变换为$m$维向量$(k_1, 0,\\cdots,0)^T$的Householder变换矩阵\n\n$$H_1=I_m-\\alpha_1 \\boldsymbol{u}_1 \\boldsymbol{u}_1^T$$\n这里\n$$|k_1|^2=\\boldsymbol{x}^T \\boldsymbol{x},\\boldsymbol{u}=\\boldsymbol{x-k_1\\boldsymbol{e}_1},\\alpha=\\frac{1}{k_1(k_1-\\boldsymbol{e}_1^T \\boldsymbol{x})}=\\frac{2}{\\boldsymbol{u}^T\\boldsymbol{u}}$$\n\n得到\n$$A_{m\\times n}^{(2)}=Q_1 A_{m\\times n}^{(1)}=\\begin{bmatrix}k_1 & a_{12}^{(2)} & \\cdots & a_{1n}^{(2)}\\\\\\\\0 & a_{22}^{(2)} & \\cdots & a_{2n}^{(2)}\\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots\\\\\\\\0 & a_{m2}^{(2)} & \\cdots & a_{mn}^{(2)}\\end{bmatrix}$$\n\n这里\n$$\n\\begin{bmatrix}a_{1,j}^{(2)}\\\\\\\\a_{2,j}^{(2)}\\\\\\\\ \\vdots \\\\\\\\ a_{m,j}^{(2)}\\end{bmatrix}=H_1\\begin{bmatrix}a_{1,j}^{(1)}\\\\\\\\a_{2,j}^{(1)}\\\\\\\\ \\vdots \\\\\\\\ a_{mj}^{(1)}\\end{bmatrix}=\\begin{bmatrix}a_{1,j}^{(1)}\\\\\\\\a_{2,j}^{(1)}\\\\\\\\ \\vdots \\\\\\\\ a_{mj}^{(1)}\\end{bmatrix}-\\alpha_1\\sum\\limits_{l=1}^{m}u_{1l}a_{l,j}^{(1)}\\boldsymbol{u}_1\\quad\\,j=2,3,\\cdots,n$$\n\n一般第$k$步取正交矩阵$Q_k$\n$$Q_k=\\begin{bmatrix}I_{k-1} & \\quad \\\\\\\\ \\quad & H_k\\end{bmatrix}$$\n这里$H_k$是将$m-k+1$维向量$(a_{k,k}^{(k)},a_{k+1,k}^{(k)},\\cdots,a_{m,k}^{(k)})^T$变换为$m-k+1$维向量$(k_k,0,\\cdots,0)^T$的Householder矩阵\n\n$$H_k=I_{m-k+1}-\\alpha_k \\boldsymbol{u}_k \\boldsymbol{u}_k^T$$\n\n这里$\\boldsymbol{u}_k$为$m-k+1$维向量，这时\n\n$$A_{m\\times n}^{(k+1)}=Q_1 A_{m\\times n}^{(k)}=\\begin{bmatrix}k_1 & a_{1,2}^{(2)} & \\cdots & a_{1,k}^{(2)} & a_{1,k+1}^{(2)} & \\cdots & a_{1,n}^{(2)}\\\\\\\\  & k_2 & \\cdots & a_{2,k}^{(3)} & a_{2,k+1}^{(3)} & \\cdots & a_{2,n}^{(3)}\\\\\\\\\n &  & \\ddots & \\cdots & \\cdots & \\cdots & \\cdots\\\\\\\\  &   &   & k_k & a_{k,k+1}^{(k+1)} & \\cdots & a_{k,n}^{(k+1)}\\\\\\\\& & & & a_{k+1,k+1}^{(k+1)} & \\cdots & a_{k+1,n}^{(k+1)}\\\\\\\\& & & & \\cdots & \\cdots & \\cdots\\\\\\\\& & & & a_{m,k+1}^{(k+1)} & \\cdots & a_{m,n}^{(k+1)} \\end{bmatrix}$$\n\n其中\n$$\n\\begin{bmatrix}a_{k,j}^{(k+1)}\\\\\\\\a_{k+1,j}^{(k+1)}\\\\\\\\ \\vdots \\\\\\\\ a_{m,j}^{(k+1)}\\end{bmatrix}=H_k\\begin{bmatrix}a_{k,j}^{(k)}\\\\\\\\a_{k+1,j}^{(k)}\\\\\\\\ \\vdots \\\\\\\\ a_{mj}^{(k)}\\end{bmatrix}=\\begin{bmatrix}a_{k,j}^{(k)}\\\\\\\\a_{k+1,j}^{(k)}\\\\\\\\ \\vdots \\\\\\\\ a_{mj}^{(k)}\\end{bmatrix}-\\alpha_k\\sum\\limits_{l=1}^{m-k+1}u_{kl}a_{k+l-1,j}^{(k)}\\boldsymbol{u}_k\\quad\\,j=k+1,\\cdots,n,\\text{其他元素不变}$$\n\n记$s=\\min(m-1,n)$则当$k=s$时即可完成矩阵的三角化过程，即\n$$QA=Q_s Q_{s-1} \\cdots Q_1 A=R$$\n由于$Q$为正交矩阵，所以\n$$A=Q^T R$$\n\n$QR$分解的python代码如下\n\n```python\nimport numpy as np\ndef householder(A, y):\n    row = np.shape(A)[0]\n    col = np.shape(A)[1]\n    u = np.zeros(row)\n    for i in range(col):\n        # 计算第i列模\n        aa = 0.0\n        for l in range(i, row):\n            aa += A[l, i]*A[l, i]\n        aa = np.sqrt(aa)\n\n        # 防止分母过小\n        if A[i, i] > 0.0 :\n            ki = -aa\n        else:\n            ki = aa\n        alpha = 1.0/(ki*(ki-A[i, i]))\n        u[i] = A[i, i] - ki\n        A[i, i] = ki\n        for l in range(i+1, row):\n            u[l] = A[l, i]\n            A[l, i] = 0.0\n        for j in range(i+1, col):\n            aa = 0.0\n            for l in range(i, row):\n                aa += u[l] * A[l, j]\n            aa = alpha * aa\n            for l in range(i, row):\n                A[l, j] -= aa * u[l]\n        aa = 0.0\n        for l in range(i, row):\n            aa += u[l] * y[l]\n        aa *= alpha\n        for l in range(i, row):\n            y[l] -= aa * u[l]\n    print(\"Matrix HA, and Hy:\")\n    for i in range(row):\n        for j in range(col):\n            print(\"{:14.8f}\".format(A[i, j]), end='')\n        print(\"  |{:14.8f}\".format(y[i]))\n```\n\n\n---\n","source":"_posts/QR分解之Householder变换.md","raw":"---\ntitle: QR分解之Householder变换\ncategories: 数学\ntags: 矩阵与数值分析\nabbrlink: 29605\ndate: 2018-10-19 20:25:24\n---\n\n定义Householder矩阵如下：\n$$\\boldsymbol{H}(\\boldsymbol{w})=\\boldsymbol{I}-\\frac{2}{\\boldsymbol{w}^T \\boldsymbol{w}} \\boldsymbol{w} \\boldsymbol{w}^T$$\n显然该矩阵具有如下性质：\n\n1. $\\boldsymbol{H}^T=\\boldsymbol{H}$，即$\\boldsymbol{H}$为对称阵；\n2. $\\boldsymbol{H}^T\\boldsymbol{H}=\\boldsymbol{I}$，即$\\boldsymbol{H}$为正交阵；\n3. 如果$\\boldsymbol{H}\\boldsymbol{x}=\\boldsymbol{y}$，则$\\parallel \\vec{y}\\parallel_2=\\parallel \\vec{x}\\parallel_2$；反之，对于任意两个向量$\\boldsymbol{x},\\boldsymbol{y}\\in \\mathbb{R}^n$，若$\\parallel \\vec{y}\\parallel_2=\\parallel \\vec{x}\\parallel_2$，且$\\vec{x}\\neq\\vec{y}$，则必存在Householder矩阵$\\boldsymbol{H}$，使得$\\boldsymbol{y}=\\boldsymbol{H}\\boldsymbol{x}$；\n4. 设$\\vec{x}=(x_1,x_2,\\cdots,x_n)^T\\in \\mathbb{R}^n$且$\\vec{x}\\neq\\vec{0}$，取$\\vec{w}=\\vec{x}\\pm\\parallel \\vec{x}\\parallel_2 \\vec{e}_1$，则\b$\\boldsymbol{H}(\\boldsymbol{w})\\boldsymbol{x}=\\boldsymbol{H}(\\boldsymbol{x}\\pm\\parallel \\boldsymbol{x}\\parallel_2 \\boldsymbol{e}_1)\\vec{x}=\\pm\\parallel \\vec{x}\\parallel_2 \\vec{e}_1=\\pm\\parallel \\vec{x}\\parallel_2 (1,0,\\cdots,0)^T$.\n\n证明：\b(1),(2)显然，证明(3)显然有：\n$$\\parallel \\boldsymbol{y}\\parallel_2^2=\\boldsymbol{y}^T\\boldsymbol{y}=(\\boldsymbol{H}\\boldsymbol{x})^T(\\boldsymbol{H}\\boldsymbol{x})=\\boldsymbol{x}^T(\\boldsymbol{H}^T\\boldsymbol{H})\\boldsymbol{x}=\\boldsymbol{x}^T\\boldsymbol{x}=\\parallel\\boldsymbol{x}\\parallel_2^2$$\n反之，若$\\parallel \\vec{y}\\parallel_2=\\parallel \\vec{x}\\parallel_2$，且$\\vec{x}\\neq\\vec{y}$,令$\\boldsymbol{w}=\\boldsymbol{x}-\\boldsymbol{y}$,有：\n$$\\parallel\\boldsymbol{w}\\parallel_2^2=(\\boldsymbol{x}-\\boldsymbol{y})^T(\\boldsymbol{x}-\\boldsymbol{y})=(2\\boldsymbol{x}-(\\boldsymbol{x}+\\boldsymbol{y}))^T(\\boldsymbol{x}-\\boldsymbol{y})=2\\boldsymbol{x}^T(\\boldsymbol{x}-\\boldsymbol{y})$$\n\n$$\\begin{align}\\boldsymbol{H}(\\boldsymbol{w})\\boldsymbol{x}&=(\\boldsymbol{I}-\\frac{2}{\\boldsymbol{w}^T \\boldsymbol{w}} \\boldsymbol{w} \\boldsymbol{w}^T)\\boldsymbol{x}=(\\boldsymbol{I}-\\frac{2}{\\parallel\\boldsymbol{x}-\\boldsymbol{y}\\parallel_2^2} (\\boldsymbol{x}-\\boldsymbol{y}) (\\boldsymbol{x}-\\boldsymbol{y})^T)\\boldsymbol{x}\\\\\\\\\n&=\\boldsymbol{x}-\\frac{2(\\boldsymbol{x}-\\boldsymbol{y})^T\\boldsymbol{x}}{\\parallel\\boldsymbol{x}-\\boldsymbol{y}\\parallel_2^2}(\\boldsymbol{x}-\\boldsymbol{y})=\\boldsymbol{x}-(\\boldsymbol{x}-\\boldsymbol{y})=\\boldsymbol{y}\\end{align}$$\n\n性质(4)由性质(3)自然得出。\n\n$m\\times n$阶矩阵三角化过程\n记\n$$\nA_{m\\times n}^{(1)}=A_{m\\times n}=\\begin{bmatrix}a_{11}^{(1)} & a_{12}^{(1)} & \\cdots & a_{1n}^{(1)}\\\\\\\\a_{21}^{(1)} & a_{22}^{(1)} & \\cdots & a_{2n}^{(1)}\\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots\\\\\\\\a_{m1}^{(1)} & a_{m2}^{(1)} & \\cdots & a_{mn}^{(1)}\\end{bmatrix}$$\n\n取正交矩阵$Q_1=H_1$(依性质4取Householder矩阵)，这里$H_1$是将$m$维向量$(a_{11}^{(1)}, a_{21}^{(1)},\\cdots,a_{m1}^{(1)})^T$变换为$m$维向量$(k_1, 0,\\cdots,0)^T$的Householder变换矩阵\n\n$$H_1=I_m-\\alpha_1 \\boldsymbol{u}_1 \\boldsymbol{u}_1^T$$\n这里\n$$|k_1|^2=\\boldsymbol{x}^T \\boldsymbol{x},\\boldsymbol{u}=\\boldsymbol{x-k_1\\boldsymbol{e}_1},\\alpha=\\frac{1}{k_1(k_1-\\boldsymbol{e}_1^T \\boldsymbol{x})}=\\frac{2}{\\boldsymbol{u}^T\\boldsymbol{u}}$$\n\n得到\n$$A_{m\\times n}^{(2)}=Q_1 A_{m\\times n}^{(1)}=\\begin{bmatrix}k_1 & a_{12}^{(2)} & \\cdots & a_{1n}^{(2)}\\\\\\\\0 & a_{22}^{(2)} & \\cdots & a_{2n}^{(2)}\\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots\\\\\\\\0 & a_{m2}^{(2)} & \\cdots & a_{mn}^{(2)}\\end{bmatrix}$$\n\n这里\n$$\n\\begin{bmatrix}a_{1,j}^{(2)}\\\\\\\\a_{2,j}^{(2)}\\\\\\\\ \\vdots \\\\\\\\ a_{m,j}^{(2)}\\end{bmatrix}=H_1\\begin{bmatrix}a_{1,j}^{(1)}\\\\\\\\a_{2,j}^{(1)}\\\\\\\\ \\vdots \\\\\\\\ a_{mj}^{(1)}\\end{bmatrix}=\\begin{bmatrix}a_{1,j}^{(1)}\\\\\\\\a_{2,j}^{(1)}\\\\\\\\ \\vdots \\\\\\\\ a_{mj}^{(1)}\\end{bmatrix}-\\alpha_1\\sum\\limits_{l=1}^{m}u_{1l}a_{l,j}^{(1)}\\boldsymbol{u}_1\\quad\\,j=2,3,\\cdots,n$$\n\n一般第$k$步取正交矩阵$Q_k$\n$$Q_k=\\begin{bmatrix}I_{k-1} & \\quad \\\\\\\\ \\quad & H_k\\end{bmatrix}$$\n这里$H_k$是将$m-k+1$维向量$(a_{k,k}^{(k)},a_{k+1,k}^{(k)},\\cdots,a_{m,k}^{(k)})^T$变换为$m-k+1$维向量$(k_k,0,\\cdots,0)^T$的Householder矩阵\n\n$$H_k=I_{m-k+1}-\\alpha_k \\boldsymbol{u}_k \\boldsymbol{u}_k^T$$\n\n这里$\\boldsymbol{u}_k$为$m-k+1$维向量，这时\n\n$$A_{m\\times n}^{(k+1)}=Q_1 A_{m\\times n}^{(k)}=\\begin{bmatrix}k_1 & a_{1,2}^{(2)} & \\cdots & a_{1,k}^{(2)} & a_{1,k+1}^{(2)} & \\cdots & a_{1,n}^{(2)}\\\\\\\\  & k_2 & \\cdots & a_{2,k}^{(3)} & a_{2,k+1}^{(3)} & \\cdots & a_{2,n}^{(3)}\\\\\\\\\n &  & \\ddots & \\cdots & \\cdots & \\cdots & \\cdots\\\\\\\\  &   &   & k_k & a_{k,k+1}^{(k+1)} & \\cdots & a_{k,n}^{(k+1)}\\\\\\\\& & & & a_{k+1,k+1}^{(k+1)} & \\cdots & a_{k+1,n}^{(k+1)}\\\\\\\\& & & & \\cdots & \\cdots & \\cdots\\\\\\\\& & & & a_{m,k+1}^{(k+1)} & \\cdots & a_{m,n}^{(k+1)} \\end{bmatrix}$$\n\n其中\n$$\n\\begin{bmatrix}a_{k,j}^{(k+1)}\\\\\\\\a_{k+1,j}^{(k+1)}\\\\\\\\ \\vdots \\\\\\\\ a_{m,j}^{(k+1)}\\end{bmatrix}=H_k\\begin{bmatrix}a_{k,j}^{(k)}\\\\\\\\a_{k+1,j}^{(k)}\\\\\\\\ \\vdots \\\\\\\\ a_{mj}^{(k)}\\end{bmatrix}=\\begin{bmatrix}a_{k,j}^{(k)}\\\\\\\\a_{k+1,j}^{(k)}\\\\\\\\ \\vdots \\\\\\\\ a_{mj}^{(k)}\\end{bmatrix}-\\alpha_k\\sum\\limits_{l=1}^{m-k+1}u_{kl}a_{k+l-1,j}^{(k)}\\boldsymbol{u}_k\\quad\\,j=k+1,\\cdots,n,\\text{其他元素不变}$$\n\n记$s=\\min(m-1,n)$则当$k=s$时即可完成矩阵的三角化过程，即\n$$QA=Q_s Q_{s-1} \\cdots Q_1 A=R$$\n由于$Q$为正交矩阵，所以\n$$A=Q^T R$$\n\n$QR$分解的python代码如下\n\n```python\nimport numpy as np\ndef householder(A, y):\n    row = np.shape(A)[0]\n    col = np.shape(A)[1]\n    u = np.zeros(row)\n    for i in range(col):\n        # 计算第i列模\n        aa = 0.0\n        for l in range(i, row):\n            aa += A[l, i]*A[l, i]\n        aa = np.sqrt(aa)\n\n        # 防止分母过小\n        if A[i, i] > 0.0 :\n            ki = -aa\n        else:\n            ki = aa\n        alpha = 1.0/(ki*(ki-A[i, i]))\n        u[i] = A[i, i] - ki\n        A[i, i] = ki\n        for l in range(i+1, row):\n            u[l] = A[l, i]\n            A[l, i] = 0.0\n        for j in range(i+1, col):\n            aa = 0.0\n            for l in range(i, row):\n                aa += u[l] * A[l, j]\n            aa = alpha * aa\n            for l in range(i, row):\n                A[l, j] -= aa * u[l]\n        aa = 0.0\n        for l in range(i, row):\n            aa += u[l] * y[l]\n        aa *= alpha\n        for l in range(i, row):\n            y[l] -= aa * u[l]\n    print(\"Matrix HA, and Hy:\")\n    for i in range(row):\n        for j in range(col):\n            print(\"{:14.8f}\".format(A[i, j]), end='')\n        print(\"  |{:14.8f}\".format(y[i]))\n```\n\n\n---\n","slug":"QR分解之Householder变换","published":1,"updated":"2018-11-21T11:49:07.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq9a4s0900093t9k9ubnmbfr","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><p>定义Householder矩阵如下：<br>$$\\boldsymbol{H}(\\boldsymbol{w})=\\boldsymbol{I}-\\frac{2}{\\boldsymbol{w}^T \\boldsymbol{w}} \\boldsymbol{w} \\boldsymbol{w}^T$$<br>显然该矩阵具有如下性质：</p><ol><li>$\\boldsymbol{H}^T=\\boldsymbol{H}$，即$\\boldsymbol{H}$为对称阵；</li><li>$\\boldsymbol{H}^T\\boldsymbol{H}=\\boldsymbol{I}$，即$\\boldsymbol{H}$为正交阵；</li><li>如果$\\boldsymbol{H}\\boldsymbol{x}=\\boldsymbol{y}$，则$\\parallel \\vec{y}\\parallel_2=\\parallel \\vec{x}\\parallel_2$；反之，对于任意两个向量$\\boldsymbol{x},\\boldsymbol{y}\\in \\mathbb{R}^n$，若$\\parallel \\vec{y}\\parallel_2=\\parallel \\vec{x}\\parallel_2$，且$\\vec{x}\\neq\\vec{y}$，则必存在Householder矩阵$\\boldsymbol{H}$，使得$\\boldsymbol{y}=\\boldsymbol{H}\\boldsymbol{x}$；</li><li>设$\\vec{x}=(x_1,x_2,\\cdots,x_n)^T\\in \\mathbb{R}^n$且$\\vec{x}\\neq\\vec{0}$，取$\\vec{w}=\\vec{x}\\pm\\parallel \\vec{x}\\parallel_2 \\vec{e}_1$，则\b$\\boldsymbol{H}(\\boldsymbol{w})\\boldsymbol{x}=\\boldsymbol{H}(\\boldsymbol{x}\\pm\\parallel \\boldsymbol{x}\\parallel_2 \\boldsymbol{e}_1)\\vec{x}=\\pm\\parallel \\vec{x}\\parallel_2 \\vec{e}_1=\\pm\\parallel \\vec{x}\\parallel_2 (1,0,\\cdots,0)^T$.</li></ol><p>证明：\b(1),(2)显然，证明(3)显然有：<br>$$\\parallel \\boldsymbol{y}\\parallel_2^2=\\boldsymbol{y}^T\\boldsymbol{y}=(\\boldsymbol{H}\\boldsymbol{x})^T(\\boldsymbol{H}\\boldsymbol{x})=\\boldsymbol{x}^T(\\boldsymbol{H}^T\\boldsymbol{H})\\boldsymbol{x}=\\boldsymbol{x}^T\\boldsymbol{x}=\\parallel\\boldsymbol{x}\\parallel_2^2$$<br>反之，若$\\parallel \\vec{y}\\parallel_2=\\parallel \\vec{x}\\parallel_2$，且$\\vec{x}\\neq\\vec{y}$,令$\\boldsymbol{w}=\\boldsymbol{x}-\\boldsymbol{y}$,有：<br>$$\\parallel\\boldsymbol{w}\\parallel_2^2=(\\boldsymbol{x}-\\boldsymbol{y})^T(\\boldsymbol{x}-\\boldsymbol{y})=(2\\boldsymbol{x}-(\\boldsymbol{x}+\\boldsymbol{y}))^T(\\boldsymbol{x}-\\boldsymbol{y})=2\\boldsymbol{x}^T(\\boldsymbol{x}-\\boldsymbol{y})$$</p><p>$$\\begin{align}\\boldsymbol{H}(\\boldsymbol{w})\\boldsymbol{x}&amp;=(\\boldsymbol{I}-\\frac{2}{\\boldsymbol{w}^T \\boldsymbol{w}} \\boldsymbol{w} \\boldsymbol{w}^T)\\boldsymbol{x}=(\\boldsymbol{I}-\\frac{2}{\\parallel\\boldsymbol{x}-\\boldsymbol{y}\\parallel_2^2} (\\boldsymbol{x}-\\boldsymbol{y}) (\\boldsymbol{x}-\\boldsymbol{y})^T)\\boldsymbol{x}\\\\<br>&amp;=\\boldsymbol{x}-\\frac{2(\\boldsymbol{x}-\\boldsymbol{y})^T\\boldsymbol{x}}{\\parallel\\boldsymbol{x}-\\boldsymbol{y}\\parallel_2^2}(\\boldsymbol{x}-\\boldsymbol{y})=\\boldsymbol{x}-(\\boldsymbol{x}-\\boldsymbol{y})=\\boldsymbol{y}\\end{align}$$</p><p>性质(4)由性质(3)自然得出。</p><p>$m\\times n$阶矩阵三角化过程<br>记<br>$$<br>A_{m\\times n}^{(1)}=A_{m\\times n}=\\begin{bmatrix}a_{11}^{(1)} &amp; a_{12}^{(1)} &amp; \\cdots &amp; a_{1n}^{(1)}\\\\a_{21}^{(1)} &amp; a_{22}^{(1)} &amp; \\cdots &amp; a_{2n}^{(1)}\\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\\\a_{m1}^{(1)} &amp; a_{m2}^{(1)} &amp; \\cdots &amp; a_{mn}^{(1)}\\end{bmatrix}$$</p><p>取正交矩阵$Q_1=H_1$(依性质4取Householder矩阵)，这里$H_1$是将$m$维向量$(a_{11}^{(1)}, a_{21}^{(1)},\\cdots,a_{m1}^{(1)})^T$变换为$m$维向量$(k_1, 0,\\cdots,0)^T$的Householder变换矩阵</p><p>$$H_1=I_m-\\alpha_1 \\boldsymbol{u}_1 \\boldsymbol{u}_1^T$$<br>这里<br>$$|k_1|^2=\\boldsymbol{x}^T \\boldsymbol{x},\\boldsymbol{u}=\\boldsymbol{x-k_1\\boldsymbol{e}_1},\\alpha=\\frac{1}{k_1(k_1-\\boldsymbol{e}_1^T \\boldsymbol{x})}=\\frac{2}{\\boldsymbol{u}^T\\boldsymbol{u}}$$</p><p>得到<br>$$A_{m\\times n}^{(2)}=Q_1 A_{m\\times n}^{(1)}=\\begin{bmatrix}k_1 &amp; a_{12}^{(2)} &amp; \\cdots &amp; a_{1n}^{(2)}\\\\0 &amp; a_{22}^{(2)} &amp; \\cdots &amp; a_{2n}^{(2)}\\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\\\0 &amp; a_{m2}^{(2)} &amp; \\cdots &amp; a_{mn}^{(2)}\\end{bmatrix}$$</p><p>这里<br>$$<br>\\begin{bmatrix}a_{1,j}^{(2)}\\\\a_{2,j}^{(2)}\\\\ \\vdots \\\\ a_{m,j}^{(2)}\\end{bmatrix}=H_1\\begin{bmatrix}a_{1,j}^{(1)}\\\\a_{2,j}^{(1)}\\\\ \\vdots \\\\ a_{mj}^{(1)}\\end{bmatrix}=\\begin{bmatrix}a_{1,j}^{(1)}\\\\a_{2,j}^{(1)}\\\\ \\vdots \\\\ a_{mj}^{(1)}\\end{bmatrix}-\\alpha_1\\sum\\limits_{l=1}^{m}u_{1l}a_{l,j}^{(1)}\\boldsymbol{u}_1\\quad\\,j=2,3,\\cdots,n$$</p><p>一般第$k$步取正交矩阵$Q_k$<br>$$Q_k=\\begin{bmatrix}I_{k-1} &amp; \\quad \\\\ \\quad &amp; H_k\\end{bmatrix}$$<br>这里$H_k$是将$m-k+1$维向量$(a_{k,k}^{(k)},a_{k+1,k}^{(k)},\\cdots,a_{m,k}^{(k)})^T$变换为$m-k+1$维向量$(k_k,0,\\cdots,0)^T$的Householder矩阵</p><p>$$H_k=I_{m-k+1}-\\alpha_k \\boldsymbol{u}_k \\boldsymbol{u}_k^T$$</p><p>这里$\\boldsymbol{u}_k$为$m-k+1$维向量，这时</p><p>$$A_{m\\times n}^{(k+1)}=Q_1 A_{m\\times n}^{(k)}=\\begin{bmatrix}k_1 &amp; a_{1,2}^{(2)} &amp; \\cdots &amp; a_{1,k}^{(2)} &amp; a_{1,k+1}^{(2)} &amp; \\cdots &amp; a_{1,n}^{(2)}\\\\ &amp; k_2 &amp; \\cdots &amp; a_{2,k}^{(3)} &amp; a_{2,k+1}^{(3)} &amp; \\cdots &amp; a_{2,n}^{(3)}\\\\<br>&amp; &amp; \\ddots &amp; \\cdots &amp; \\cdots &amp; \\cdots &amp; \\cdots\\\\ &amp; &amp; &amp; k_k &amp; a_{k,k+1}^{(k+1)} &amp; \\cdots &amp; a_{k,n}^{(k+1)}\\\\&amp; &amp; &amp; &amp; a_{k+1,k+1}^{(k+1)} &amp; \\cdots &amp; a_{k+1,n}^{(k+1)}\\\\&amp; &amp; &amp; &amp; \\cdots &amp; \\cdots &amp; \\cdots\\\\&amp; &amp; &amp; &amp; a_{m,k+1}^{(k+1)} &amp; \\cdots &amp; a_{m,n}^{(k+1)} \\end{bmatrix}$$</p><p>其中<br>$$<br>\\begin{bmatrix}a_{k,j}^{(k+1)}\\\\a_{k+1,j}^{(k+1)}\\\\ \\vdots \\\\ a_{m,j}^{(k+1)}\\end{bmatrix}=H_k\\begin{bmatrix}a_{k,j}^{(k)}\\\\a_{k+1,j}^{(k)}\\\\ \\vdots \\\\ a_{mj}^{(k)}\\end{bmatrix}=\\begin{bmatrix}a_{k,j}^{(k)}\\\\a_{k+1,j}^{(k)}\\\\ \\vdots \\\\ a_{mj}^{(k)}\\end{bmatrix}-\\alpha_k\\sum\\limits_{l=1}^{m-k+1}u_{kl}a_{k+l-1,j}^{(k)}\\boldsymbol{u}_k\\quad\\,j=k+1,\\cdots,n,\\text{其他元素不变}$$</p><p>记$s=\\min(m-1,n)$则当$k=s$时即可完成矩阵的三角化过程，即<br>$$QA=Q_s Q_{s-1} \\cdots Q_1 A=R$$<br>由于$Q$为正交矩阵，所以<br>$$A=Q^T R$$</p><p>$QR$分解的python代码如下</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">householder</span><span class=\"params\">(A, y)</span>:</span></span><br><span class=\"line\">    row = np.shape(A)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    col = np.shape(A)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    u = np.zeros(row)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(col):</span><br><span class=\"line\">        <span class=\"comment\"># 计算第i列模</span></span><br><span class=\"line\">        aa = <span class=\"number\">0.0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> range(i, row):</span><br><span class=\"line\">            aa += A[l, i]*A[l, i]</span><br><span class=\"line\">        aa = np.sqrt(aa)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 防止分母过小</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> A[i, i] &gt; <span class=\"number\">0.0</span> :</span><br><span class=\"line\">            ki = -aa</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            ki = aa</span><br><span class=\"line\">        alpha = <span class=\"number\">1.0</span>/(ki*(ki-A[i, i]))</span><br><span class=\"line\">        u[i] = A[i, i] - ki</span><br><span class=\"line\">        A[i, i] = ki</span><br><span class=\"line\">        <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> range(i+<span class=\"number\">1</span>, row):</span><br><span class=\"line\">            u[l] = A[l, i]</span><br><span class=\"line\">            A[l, i] = <span class=\"number\">0.0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i+<span class=\"number\">1</span>, col):</span><br><span class=\"line\">            aa = <span class=\"number\">0.0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> range(i, row):</span><br><span class=\"line\">                aa += u[l] * A[l, j]</span><br><span class=\"line\">            aa = alpha * aa</span><br><span class=\"line\">            <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> range(i, row):</span><br><span class=\"line\">                A[l, j] -= aa * u[l]</span><br><span class=\"line\">        aa = <span class=\"number\">0.0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> range(i, row):</span><br><span class=\"line\">            aa += u[l] * y[l]</span><br><span class=\"line\">        aa *= alpha</span><br><span class=\"line\">        <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> range(i, row):</span><br><span class=\"line\">            y[l] -= aa * u[l]</span><br><span class=\"line\">    print(<span class=\"string\">\"Matrix HA, and Hy:\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(row):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(col):</span><br><span class=\"line\">            print(<span class=\"string\">\"&#123;:14.8f&#125;\"</span>.format(A[i, j]), end=<span class=\"string\">''</span>)</span><br><span class=\"line\">        print(<span class=\"string\">\"  |&#123;:14.8f&#125;\"</span>.format(y[i]))</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><p>定义Householder矩阵如下：<br>$$\\boldsymbol{H}(\\boldsymbol{w})=\\boldsymbol{I}-\\frac{2}{\\boldsymbol{w}^T \\boldsymbol{w}} \\boldsymbol{w} \\boldsymbol{w}^T$$<br>显然该矩阵具有如下性质：</p><ol><li>$\\boldsymbol{H}^T=\\boldsymbol{H}$，即$\\boldsymbol{H}$为对称阵；</li><li>$\\boldsymbol{H}^T\\boldsymbol{H}=\\boldsymbol{I}$，即$\\boldsymbol{H}$为正交阵；</li><li>如果$\\boldsymbol{H}\\boldsymbol{x}=\\boldsymbol{y}$，则$\\parallel \\vec{y}\\parallel_2=\\parallel \\vec{x}\\parallel_2$；反之，对于任意两个向量$\\boldsymbol{x},\\boldsymbol{y}\\in \\mathbb{R}^n$，若$\\parallel \\vec{y}\\parallel_2=\\parallel \\vec{x}\\parallel_2$，且$\\vec{x}\\neq\\vec{y}$，则必存在Householder矩阵$\\boldsymbol{H}$，使得$\\boldsymbol{y}=\\boldsymbol{H}\\boldsymbol{x}$；</li><li>设$\\vec{x}=(x_1,x_2,\\cdots,x_n)^T\\in \\mathbb{R}^n$且$\\vec{x}\\neq\\vec{0}$，取$\\vec{w}=\\vec{x}\\pm\\parallel \\vec{x}\\parallel_2 \\vec{e}_1$，则\b$\\boldsymbol{H}(\\boldsymbol{w})\\boldsymbol{x}=\\boldsymbol{H}(\\boldsymbol{x}\\pm\\parallel \\boldsymbol{x}\\parallel_2 \\boldsymbol{e}_1)\\vec{x}=\\pm\\parallel \\vec{x}\\parallel_2 \\vec{e}_1=\\pm\\parallel \\vec{x}\\parallel_2 (1,0,\\cdots,0)^T$.</li></ol><p>证明：\b(1),(2)显然，证明(3)显然有：<br>$$\\parallel \\boldsymbol{y}\\parallel_2^2=\\boldsymbol{y}^T\\boldsymbol{y}=(\\boldsymbol{H}\\boldsymbol{x})^T(\\boldsymbol{H}\\boldsymbol{x})=\\boldsymbol{x}^T(\\boldsymbol{H}^T\\boldsymbol{H})\\boldsymbol{x}=\\boldsymbol{x}^T\\boldsymbol{x}=\\parallel\\boldsymbol{x}\\parallel_2^2$$<br>反之，若$\\parallel \\vec{y}\\parallel_2=\\parallel \\vec{x}\\parallel_2$，且$\\vec{x}\\neq\\vec{y}$,令$\\boldsymbol{w}=\\boldsymbol{x}-\\boldsymbol{y}$,有：<br>$$\\parallel\\boldsymbol{w}\\parallel_2^2=(\\boldsymbol{x}-\\boldsymbol{y})^T(\\boldsymbol{x}-\\boldsymbol{y})=(2\\boldsymbol{x}-(\\boldsymbol{x}+\\boldsymbol{y}))^T(\\boldsymbol{x}-\\boldsymbol{y})=2\\boldsymbol{x}^T(\\boldsymbol{x}-\\boldsymbol{y})$$</p><p>$$\\begin{align}\\boldsymbol{H}(\\boldsymbol{w})\\boldsymbol{x}&amp;=(\\boldsymbol{I}-\\frac{2}{\\boldsymbol{w}^T \\boldsymbol{w}} \\boldsymbol{w} \\boldsymbol{w}^T)\\boldsymbol{x}=(\\boldsymbol{I}-\\frac{2}{\\parallel\\boldsymbol{x}-\\boldsymbol{y}\\parallel_2^2} (\\boldsymbol{x}-\\boldsymbol{y}) (\\boldsymbol{x}-\\boldsymbol{y})^T)\\boldsymbol{x}\\\\<br>&amp;=\\boldsymbol{x}-\\frac{2(\\boldsymbol{x}-\\boldsymbol{y})^T\\boldsymbol{x}}{\\parallel\\boldsymbol{x}-\\boldsymbol{y}\\parallel_2^2}(\\boldsymbol{x}-\\boldsymbol{y})=\\boldsymbol{x}-(\\boldsymbol{x}-\\boldsymbol{y})=\\boldsymbol{y}\\end{align}$$</p><p>性质(4)由性质(3)自然得出。</p><p>$m\\times n$阶矩阵三角化过程<br>记<br>$$<br>A_{m\\times n}^{(1)}=A_{m\\times n}=\\begin{bmatrix}a_{11}^{(1)} &amp; a_{12}^{(1)} &amp; \\cdots &amp; a_{1n}^{(1)}\\\\a_{21}^{(1)} &amp; a_{22}^{(1)} &amp; \\cdots &amp; a_{2n}^{(1)}\\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\\\a_{m1}^{(1)} &amp; a_{m2}^{(1)} &amp; \\cdots &amp; a_{mn}^{(1)}\\end{bmatrix}$$</p><p>取正交矩阵$Q_1=H_1$(依性质4取Householder矩阵)，这里$H_1$是将$m$维向量$(a_{11}^{(1)}, a_{21}^{(1)},\\cdots,a_{m1}^{(1)})^T$变换为$m$维向量$(k_1, 0,\\cdots,0)^T$的Householder变换矩阵</p><p>$$H_1=I_m-\\alpha_1 \\boldsymbol{u}_1 \\boldsymbol{u}_1^T$$<br>这里<br>$$|k_1|^2=\\boldsymbol{x}^T \\boldsymbol{x},\\boldsymbol{u}=\\boldsymbol{x-k_1\\boldsymbol{e}_1},\\alpha=\\frac{1}{k_1(k_1-\\boldsymbol{e}_1^T \\boldsymbol{x})}=\\frac{2}{\\boldsymbol{u}^T\\boldsymbol{u}}$$</p><p>得到<br>$$A_{m\\times n}^{(2)}=Q_1 A_{m\\times n}^{(1)}=\\begin{bmatrix}k_1 &amp; a_{12}^{(2)} &amp; \\cdots &amp; a_{1n}^{(2)}\\\\0 &amp; a_{22}^{(2)} &amp; \\cdots &amp; a_{2n}^{(2)}\\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\\\0 &amp; a_{m2}^{(2)} &amp; \\cdots &amp; a_{mn}^{(2)}\\end{bmatrix}$$</p><p>这里<br>$$<br>\\begin{bmatrix}a_{1,j}^{(2)}\\\\a_{2,j}^{(2)}\\\\ \\vdots \\\\ a_{m,j}^{(2)}\\end{bmatrix}=H_1\\begin{bmatrix}a_{1,j}^{(1)}\\\\a_{2,j}^{(1)}\\\\ \\vdots \\\\ a_{mj}^{(1)}\\end{bmatrix}=\\begin{bmatrix}a_{1,j}^{(1)}\\\\a_{2,j}^{(1)}\\\\ \\vdots \\\\ a_{mj}^{(1)}\\end{bmatrix}-\\alpha_1\\sum\\limits_{l=1}^{m}u_{1l}a_{l,j}^{(1)}\\boldsymbol{u}_1\\quad\\,j=2,3,\\cdots,n$$</p><p>一般第$k$步取正交矩阵$Q_k$<br>$$Q_k=\\begin{bmatrix}I_{k-1} &amp; \\quad \\\\ \\quad &amp; H_k\\end{bmatrix}$$<br>这里$H_k$是将$m-k+1$维向量$(a_{k,k}^{(k)},a_{k+1,k}^{(k)},\\cdots,a_{m,k}^{(k)})^T$变换为$m-k+1$维向量$(k_k,0,\\cdots,0)^T$的Householder矩阵</p><p>$$H_k=I_{m-k+1}-\\alpha_k \\boldsymbol{u}_k \\boldsymbol{u}_k^T$$</p><p>这里$\\boldsymbol{u}_k$为$m-k+1$维向量，这时</p><p>$$A_{m\\times n}^{(k+1)}=Q_1 A_{m\\times n}^{(k)}=\\begin{bmatrix}k_1 &amp; a_{1,2}^{(2)} &amp; \\cdots &amp; a_{1,k}^{(2)} &amp; a_{1,k+1}^{(2)} &amp; \\cdots &amp; a_{1,n}^{(2)}\\\\ &amp; k_2 &amp; \\cdots &amp; a_{2,k}^{(3)} &amp; a_{2,k+1}^{(3)} &amp; \\cdots &amp; a_{2,n}^{(3)}\\\\<br>&amp; &amp; \\ddots &amp; \\cdots &amp; \\cdots &amp; \\cdots &amp; \\cdots\\\\ &amp; &amp; &amp; k_k &amp; a_{k,k+1}^{(k+1)} &amp; \\cdots &amp; a_{k,n}^{(k+1)}\\\\&amp; &amp; &amp; &amp; a_{k+1,k+1}^{(k+1)} &amp; \\cdots &amp; a_{k+1,n}^{(k+1)}\\\\&amp; &amp; &amp; &amp; \\cdots &amp; \\cdots &amp; \\cdots\\\\&amp; &amp; &amp; &amp; a_{m,k+1}^{(k+1)} &amp; \\cdots &amp; a_{m,n}^{(k+1)} \\end{bmatrix}$$</p><p>其中<br>$$<br>\\begin{bmatrix}a_{k,j}^{(k+1)}\\\\a_{k+1,j}^{(k+1)}\\\\ \\vdots \\\\ a_{m,j}^{(k+1)}\\end{bmatrix}=H_k\\begin{bmatrix}a_{k,j}^{(k)}\\\\a_{k+1,j}^{(k)}\\\\ \\vdots \\\\ a_{mj}^{(k)}\\end{bmatrix}=\\begin{bmatrix}a_{k,j}^{(k)}\\\\a_{k+1,j}^{(k)}\\\\ \\vdots \\\\ a_{mj}^{(k)}\\end{bmatrix}-\\alpha_k\\sum\\limits_{l=1}^{m-k+1}u_{kl}a_{k+l-1,j}^{(k)}\\boldsymbol{u}_k\\quad\\,j=k+1,\\cdots,n,\\text{其他元素不变}$$</p><p>记$s=\\min(m-1,n)$则当$k=s$时即可完成矩阵的三角化过程，即<br>$$QA=Q_s Q_{s-1} \\cdots Q_1 A=R$$<br>由于$Q$为正交矩阵，所以<br>$$A=Q^T R$$</p><p>$QR$分解的python代码如下</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">householder</span><span class=\"params\">(A, y)</span>:</span></span><br><span class=\"line\">    row = np.shape(A)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    col = np.shape(A)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    u = np.zeros(row)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(col):</span><br><span class=\"line\">        <span class=\"comment\"># 计算第i列模</span></span><br><span class=\"line\">        aa = <span class=\"number\">0.0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> range(i, row):</span><br><span class=\"line\">            aa += A[l, i]*A[l, i]</span><br><span class=\"line\">        aa = np.sqrt(aa)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 防止分母过小</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> A[i, i] &gt; <span class=\"number\">0.0</span> :</span><br><span class=\"line\">            ki = -aa</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            ki = aa</span><br><span class=\"line\">        alpha = <span class=\"number\">1.0</span>/(ki*(ki-A[i, i]))</span><br><span class=\"line\">        u[i] = A[i, i] - ki</span><br><span class=\"line\">        A[i, i] = ki</span><br><span class=\"line\">        <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> range(i+<span class=\"number\">1</span>, row):</span><br><span class=\"line\">            u[l] = A[l, i]</span><br><span class=\"line\">            A[l, i] = <span class=\"number\">0.0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i+<span class=\"number\">1</span>, col):</span><br><span class=\"line\">            aa = <span class=\"number\">0.0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> range(i, row):</span><br><span class=\"line\">                aa += u[l] * A[l, j]</span><br><span class=\"line\">            aa = alpha * aa</span><br><span class=\"line\">            <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> range(i, row):</span><br><span class=\"line\">                A[l, j] -= aa * u[l]</span><br><span class=\"line\">        aa = <span class=\"number\">0.0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> range(i, row):</span><br><span class=\"line\">            aa += u[l] * y[l]</span><br><span class=\"line\">        aa *= alpha</span><br><span class=\"line\">        <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> range(i, row):</span><br><span class=\"line\">            y[l] -= aa * u[l]</span><br><span class=\"line\">    print(<span class=\"string\">\"Matrix HA, and Hy:\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(row):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(col):</span><br><span class=\"line\">            print(<span class=\"string\">\"&#123;:14.8f&#125;\"</span>.format(A[i, j]), end=<span class=\"string\">''</span>)</span><br><span class=\"line\">        print(<span class=\"string\">\"  |&#123;:14.8f&#125;\"</span>.format(y[i]))</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->"},{"title":"一道三角函数无穷积分两道数论","abbrlink":59135,"date":"2018-10-15T12:48:10.000Z","_content":"\n#### 积分\n\n证明：$\\int_{0}^{\\infty}\\cos{x^p}dx=\\frac{\\Gamma(\\frac{1}{p})\\cos {\\frac{\\pi}{2p}}}{p}$\n\n\b过程：\n$$\\begin{align}\\int_{0}^{\\infty}\\cos{x^p}dx &=\\frac{1}{p}\\int_{0}^{\\infty}\\frac{\\cos u}{u^{1-\\frac{1}{u}}}du=\\frac{1}{p}\\int_0^{\\infty}z^{-\\frac{1}{p}}e^{-zu}dz\\,\\cdot\\int_0^{\\infty}\\cos udu\\\\\\\\\n&=\\frac{1}{p\\Gamma(1-\\frac{1}{p})}\\int_0^{\\infty}z^{-\\frac{1}{p}}dz\\int_0^{\\infty}\\cos u e^{-zu}du\\\\\\\\\n&=\\frac{1}{p\\Gamma(1-\\frac{1}{p})}\\int_0^{\\infty}\\frac{z^{1-\\frac{1}{p}}}{z^2+1}dz,\\quad\\text{let }t=z^2\\\\\\\\\n&=\\frac{1}{2p\\Gamma(1-\\frac{1}{p})}\\int_0^{\\infty}\\frac{t^{-\\frac{1}{2p}}}{t+1}dt=\\frac{1}{2p\\Gamma(1-\\frac{1}{p})}B(1-\\frac{1}{2p},\\,\\frac{1}{2p})\\\\\\\\\n&=\\frac{\\sin\\big[(1-\\frac{1}{p})\\pi\\big]\\Gamma(\\frac{1}{p})}{2p\\pi}\\cdot\\frac{\\pi}{\\sin\\big[(1-\\frac{1}{2p})\\pi\\big]}\\\\\\\\\n&=\\frac{\\Gamma(\\frac{1}{p})\\cos {\\frac{\\pi}{2p}}}{p}\\end{align}$$\n\n其中利用到了:\n\n$$\n\\Gamma(x) = \\int_0^{\\infty}\b\bt^{x-1}e^{-t}dt,\\\\\\\\\n\\frac{1}{x^s}=\\frac{1}{\\Gamma(s)}\\int_0^{\\infty}z^{s-1}e^{-xz}dz,\\\\\\\\\n\\text{余元公式:}\\,\\Gamma(x)\\Gamma(1-x)=\\frac{\\pi}{\\sin{\\pi x}},\\\\\\\\\n\\beta \\text{函数与}\\Gamma\\text{函数关系：}\\, B(x, y) = \\frac{\\Gamma(x)\\Gamma(y)}{\\Gamma(x+y)}\n$$\n\n#### 数论\n\n1. 证明$1+\\frac{1}{2}+\\cdots+\\frac{1}{n}$不是整数，其中$n$为大于1的整数。\n2. 若素数$p\\equiv 3(\\, mod\\,4\\,)$,那么素数$p$不能表示成两整数的平方和。\n\n证明：\n\n1:$\\text{设}1+\\frac{1}{2}+\\cdots+\\frac{1}{n}=k$为整数，两边乘以$n$的阶乘\b那么$n!+\\frac{n!}{2}+\\cdots+\\frac{n!}{n}=k\bn!$.设$p$是小于$n$的最大素数，那么右边$kn!$能被$p$整除，而左边$n!+\\frac{n!}{2}+\\cdots+\\frac{n!}{p}+\\cdots+\\frac{n!}{n}$的每一项，很明显除了$\\frac{n!}{p}$不能被$p$整除外，都能被$p$整除，所以左边不能被$p$整除。矛盾，故$1+\\frac{1}{2}+\\cdots+\\frac{1}{n}$不是整数。\n\n2:由于$p$是素数，且两个奇数平方相加为偶数，两偶数平方相加为也为偶数，所以必然有$p=(2n)^2+(2n+1)^2$,那么$p \\equiv (2n)^2+(2n+1)^2 \\equiv 1(mod 4)$，矛盾，故素数$p$不能表示成两整数的平方和。\n\n\n---\n","source":"_posts/一道三角函数无穷积分.md","raw":"---\ntitle: 一道三角函数无穷积分两道数论\nabbrlink: 59135\ndate: 2018-10-15 20:48:10\ncategories: 数学\ntags: [无穷积分,数论]\n---\n\n#### 积分\n\n证明：$\\int_{0}^{\\infty}\\cos{x^p}dx=\\frac{\\Gamma(\\frac{1}{p})\\cos {\\frac{\\pi}{2p}}}{p}$\n\n\b过程：\n$$\\begin{align}\\int_{0}^{\\infty}\\cos{x^p}dx &=\\frac{1}{p}\\int_{0}^{\\infty}\\frac{\\cos u}{u^{1-\\frac{1}{u}}}du=\\frac{1}{p}\\int_0^{\\infty}z^{-\\frac{1}{p}}e^{-zu}dz\\,\\cdot\\int_0^{\\infty}\\cos udu\\\\\\\\\n&=\\frac{1}{p\\Gamma(1-\\frac{1}{p})}\\int_0^{\\infty}z^{-\\frac{1}{p}}dz\\int_0^{\\infty}\\cos u e^{-zu}du\\\\\\\\\n&=\\frac{1}{p\\Gamma(1-\\frac{1}{p})}\\int_0^{\\infty}\\frac{z^{1-\\frac{1}{p}}}{z^2+1}dz,\\quad\\text{let }t=z^2\\\\\\\\\n&=\\frac{1}{2p\\Gamma(1-\\frac{1}{p})}\\int_0^{\\infty}\\frac{t^{-\\frac{1}{2p}}}{t+1}dt=\\frac{1}{2p\\Gamma(1-\\frac{1}{p})}B(1-\\frac{1}{2p},\\,\\frac{1}{2p})\\\\\\\\\n&=\\frac{\\sin\\big[(1-\\frac{1}{p})\\pi\\big]\\Gamma(\\frac{1}{p})}{2p\\pi}\\cdot\\frac{\\pi}{\\sin\\big[(1-\\frac{1}{2p})\\pi\\big]}\\\\\\\\\n&=\\frac{\\Gamma(\\frac{1}{p})\\cos {\\frac{\\pi}{2p}}}{p}\\end{align}$$\n\n其中利用到了:\n\n$$\n\\Gamma(x) = \\int_0^{\\infty}\b\bt^{x-1}e^{-t}dt,\\\\\\\\\n\\frac{1}{x^s}=\\frac{1}{\\Gamma(s)}\\int_0^{\\infty}z^{s-1}e^{-xz}dz,\\\\\\\\\n\\text{余元公式:}\\,\\Gamma(x)\\Gamma(1-x)=\\frac{\\pi}{\\sin{\\pi x}},\\\\\\\\\n\\beta \\text{函数与}\\Gamma\\text{函数关系：}\\, B(x, y) = \\frac{\\Gamma(x)\\Gamma(y)}{\\Gamma(x+y)}\n$$\n\n#### 数论\n\n1. 证明$1+\\frac{1}{2}+\\cdots+\\frac{1}{n}$不是整数，其中$n$为大于1的整数。\n2. 若素数$p\\equiv 3(\\, mod\\,4\\,)$,那么素数$p$不能表示成两整数的平方和。\n\n证明：\n\n1:$\\text{设}1+\\frac{1}{2}+\\cdots+\\frac{1}{n}=k$为整数，两边乘以$n$的阶乘\b那么$n!+\\frac{n!}{2}+\\cdots+\\frac{n!}{n}=k\bn!$.设$p$是小于$n$的最大素数，那么右边$kn!$能被$p$整除，而左边$n!+\\frac{n!}{2}+\\cdots+\\frac{n!}{p}+\\cdots+\\frac{n!}{n}$的每一项，很明显除了$\\frac{n!}{p}$不能被$p$整除外，都能被$p$整除，所以左边不能被$p$整除。矛盾，故$1+\\frac{1}{2}+\\cdots+\\frac{1}{n}$不是整数。\n\n2:由于$p$是素数，且两个奇数平方相加为偶数，两偶数平方相加为也为偶数，所以必然有$p=(2n)^2+(2n+1)^2$,那么$p \\equiv (2n)^2+(2n+1)^2 \\equiv 1(mod 4)$，矛盾，故素数$p$不能表示成两整数的平方和。\n\n\n---\n","slug":"一道三角函数无穷积分","published":1,"updated":"2018-11-21T11:54:41.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq9a4s0a000a3t9k9cica8yk","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><h4 id=\"积分\"><a href=\"#积分\" class=\"headerlink\" title=\"积分\"></a>积分</h4><p>证明：$\\int_{0}^{\\infty}\\cos{x^p}dx=\\frac{\\Gamma(\\frac{1}{p})\\cos {\\frac{\\pi}{2p}}}{p}$</p><p>\b过程：<br>$$\\begin{align}\\int_{0}^{\\infty}\\cos{x^p}dx &amp;=\\frac{1}{p}\\int_{0}^{\\infty}\\frac{\\cos u}{u^{1-\\frac{1}{u}}}du=\\frac{1}{p}\\int_0^{\\infty}z^{-\\frac{1}{p}}e^{-zu}dz\\,\\cdot\\int_0^{\\infty}\\cos udu\\\\<br>&amp;=\\frac{1}{p\\Gamma(1-\\frac{1}{p})}\\int_0^{\\infty}z^{-\\frac{1}{p}}dz\\int_0^{\\infty}\\cos u e^{-zu}du\\\\<br>&amp;=\\frac{1}{p\\Gamma(1-\\frac{1}{p})}\\int_0^{\\infty}\\frac{z^{1-\\frac{1}{p}}}{z^2+1}dz,\\quad\\text{let }t=z^2\\\\<br>&amp;=\\frac{1}{2p\\Gamma(1-\\frac{1}{p})}\\int_0^{\\infty}\\frac{t^{-\\frac{1}{2p}}}{t+1}dt=\\frac{1}{2p\\Gamma(1-\\frac{1}{p})}B(1-\\frac{1}{2p},\\,\\frac{1}{2p})\\\\<br>&amp;=\\frac{\\sin\\big[(1-\\frac{1}{p})\\pi\\big]\\Gamma(\\frac{1}{p})}{2p\\pi}\\cdot\\frac{\\pi}{\\sin\\big[(1-\\frac{1}{2p})\\pi\\big]}\\\\<br>&amp;=\\frac{\\Gamma(\\frac{1}{p})\\cos {\\frac{\\pi}{2p}}}{p}\\end{align}$$</p><p>其中利用到了:</p><p>$$<br>\\Gamma(x) = \\int_0^{\\infty}\b\bt^{x-1}e^{-t}dt,\\\\<br>\\frac{1}{x^s}=\\frac{1}{\\Gamma(s)}\\int_0^{\\infty}z^{s-1}e^{-xz}dz,\\\\<br>\\text{余元公式:}\\,\\Gamma(x)\\Gamma(1-x)=\\frac{\\pi}{\\sin{\\pi x}},\\\\<br>\\beta \\text{函数与}\\Gamma\\text{函数关系：}\\, B(x, y) = \\frac{\\Gamma(x)\\Gamma(y)}{\\Gamma(x+y)}<br>$$</p><h4 id=\"数论\"><a href=\"#数论\" class=\"headerlink\" title=\"数论\"></a>数论</h4><ol><li>证明$1+\\frac{1}{2}+\\cdots+\\frac{1}{n}$不是整数，其中$n$为大于1的整数。</li><li>若素数$p\\equiv 3(\\, mod\\,4\\,)$,那么素数$p$不能表示成两整数的平方和。</li></ol><p>证明：</p><p>1:$\\text{设}1+\\frac{1}{2}+\\cdots+\\frac{1}{n}=k$为整数，两边乘以$n$的阶乘\b那么$n!+\\frac{n!}{2}+\\cdots+\\frac{n!}{n}=k\bn!$.设$p$是小于$n$的最大素数，那么右边$kn!$能被$p$整除，而左边$n!+\\frac{n!}{2}+\\cdots+\\frac{n!}{p}+\\cdots+\\frac{n!}{n}$的每一项，很明显除了$\\frac{n!}{p}$不能被$p$整除外，都能被$p$整除，所以左边不能被$p$整除。矛盾，故$1+\\frac{1}{2}+\\cdots+\\frac{1}{n}$不是整数。</p><p>2:由于$p$是素数，且两个奇数平方相加为偶数，两偶数平方相加为也为偶数，所以必然有$p=(2n)^2+(2n+1)^2$,那么$p \\equiv (2n)^2+(2n+1)^2 \\equiv 1(mod 4)$，矛盾，故素数$p$不能表示成两整数的平方和。</p><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><h4 id=\"积分\"><a href=\"#积分\" class=\"headerlink\" title=\"积分\"></a>积分</h4><p>证明：$\\int_{0}^{\\infty}\\cos{x^p}dx=\\frac{\\Gamma(\\frac{1}{p})\\cos {\\frac{\\pi}{2p}}}{p}$</p><p>\b过程：<br>$$\\begin{align}\\int_{0}^{\\infty}\\cos{x^p}dx &amp;=\\frac{1}{p}\\int_{0}^{\\infty}\\frac{\\cos u}{u^{1-\\frac{1}{u}}}du=\\frac{1}{p}\\int_0^{\\infty}z^{-\\frac{1}{p}}e^{-zu}dz\\,\\cdot\\int_0^{\\infty}\\cos udu\\\\<br>&amp;=\\frac{1}{p\\Gamma(1-\\frac{1}{p})}\\int_0^{\\infty}z^{-\\frac{1}{p}}dz\\int_0^{\\infty}\\cos u e^{-zu}du\\\\<br>&amp;=\\frac{1}{p\\Gamma(1-\\frac{1}{p})}\\int_0^{\\infty}\\frac{z^{1-\\frac{1}{p}}}{z^2+1}dz,\\quad\\text{let }t=z^2\\\\<br>&amp;=\\frac{1}{2p\\Gamma(1-\\frac{1}{p})}\\int_0^{\\infty}\\frac{t^{-\\frac{1}{2p}}}{t+1}dt=\\frac{1}{2p\\Gamma(1-\\frac{1}{p})}B(1-\\frac{1}{2p},\\,\\frac{1}{2p})\\\\<br>&amp;=\\frac{\\sin\\big[(1-\\frac{1}{p})\\pi\\big]\\Gamma(\\frac{1}{p})}{2p\\pi}\\cdot\\frac{\\pi}{\\sin\\big[(1-\\frac{1}{2p})\\pi\\big]}\\\\<br>&amp;=\\frac{\\Gamma(\\frac{1}{p})\\cos {\\frac{\\pi}{2p}}}{p}\\end{align}$$</p><p>其中利用到了:</p><p>$$<br>\\Gamma(x) = \\int_0^{\\infty}\b\bt^{x-1}e^{-t}dt,\\\\<br>\\frac{1}{x^s}=\\frac{1}{\\Gamma(s)}\\int_0^{\\infty}z^{s-1}e^{-xz}dz,\\\\<br>\\text{余元公式:}\\,\\Gamma(x)\\Gamma(1-x)=\\frac{\\pi}{\\sin{\\pi x}},\\\\<br>\\beta \\text{函数与}\\Gamma\\text{函数关系：}\\, B(x, y) = \\frac{\\Gamma(x)\\Gamma(y)}{\\Gamma(x+y)}<br>$$</p><h4 id=\"数论\"><a href=\"#数论\" class=\"headerlink\" title=\"数论\"></a>数论</h4><ol><li>证明$1+\\frac{1}{2}+\\cdots+\\frac{1}{n}$不是整数，其中$n$为大于1的整数。</li><li>若素数$p\\equiv 3(\\, mod\\,4\\,)$,那么素数$p$不能表示成两整数的平方和。</li></ol><p>证明：</p><p>1:$\\text{设}1+\\frac{1}{2}+\\cdots+\\frac{1}{n}=k$为整数，两边乘以$n$的阶乘\b那么$n!+\\frac{n!}{2}+\\cdots+\\frac{n!}{n}=k\bn!$.设$p$是小于$n$的最大素数，那么右边$kn!$能被$p$整除，而左边$n!+\\frac{n!}{2}+\\cdots+\\frac{n!}{p}+\\cdots+\\frac{n!}{n}$的每一项，很明显除了$\\frac{n!}{p}$不能被$p$整除外，都能被$p$整除，所以左边不能被$p$整除。矛盾，故$1+\\frac{1}{2}+\\cdots+\\frac{1}{n}$不是整数。</p><p>2:由于$p$是素数，且两个奇数平方相加为偶数，两偶数平方相加为也为偶数，所以必然有$p=(2n)^2+(2n+1)^2$,那么$p \\equiv (2n)^2+(2n+1)^2 \\equiv 1(mod 4)$，矛盾，故素数$p$不能表示成两整数的平方和。</p><hr><!-- rebuild by neat -->"},{"title":"一维稳态流动与扩散问题验证","abbrlink":19049,"date":"2018-10-10T14:22:14.000Z","_content":"\n### 控制一维稳态流动与扩散问题验证\n考虑一段长为1m的区域，其稳态无源项的对流扩散方程如下：\n$$\\dfrac{d}{dx}(\\rho u\\phi)=\\dfrac{d}{dx}(\\Gamma\\dfrac{d\\phi}{dx})$$\n流动还需满足连续性方程：\n$$\\dfrac{d(\\rho u)}{dx}$$\n![](/images/WX20181010-205935@2x.png)\n积分上两式可得：\n$$(\\rho u A\\phi)_e-(\\rho u A\\phi)_w=\\big(\\Gamma A\\dfrac{d\\phi}{dx}\\big)_e-\\big(\\Gamma A\\dfrac{d\\phi}{dx}\\big)_w\\\\\\\\\n(\\rho u)_e-(\\rho u)_w=0$$\n定义两变量\n- $F=\\rho u$ 表示单位面积对流通量\n- $D=\\frac{\\Gamma}{\\delta x}$ 表示通过单元面的扩导\n\n所以积分的对流扩散方程可重新写为：\n$F_w=(\\rho u)_w,D_w=\\frac{\\Gamma_w}{\\delta x_{WP}},F_e=(\\rho u)_e,D_e=\\frac{\\Gamma_e}{\\delta x_{PE}}.$\n\n连续性方程为:\n$F_e-F_w=0$\n\n使用中心差分离散方程最后的形式为：\n$$a_P \\phi_P=a_W \\phi_W+a_E \\phi_E,\\text{其中}a_W=D_w+\\frac{F_w}{2},a_E=D_e-\\frac{F_e}{2},a_P=a_E+a_W+(F_e-F_w)$$\n\n本次算例解析解为：\n$$\\frac{\\phi-\\phi_0}{\\phi_L-\\phi_0}=\\frac{\\exp(\\frac{\\rho ux}{\\Gamma})-1}{\\exp(\\frac{\\rho uL}{\\Gamma})-1}$$\n\n边界条件为：$\\phi_0=1$当$x=0$和$\\phi_L=0$当$x=L$.\n对边界点，其离散方程应改为：\n- 对于第一个点，$-(a_P+a_W) \\phi_P+a_E\\phi_E+2a_W\\phi_0=0 $\n- 对于最后一个点，$a_W \\phi_W-(a_P+a_E) \\phi_P=0 $\n\n三种情况验证：\n1. u=0.1 m/s,节点数为5\n2. u=2.5 m/s,节点数为5\n3. u=2.5 m/s,节点数为20\n\n得到三种图像如下：\n![case1](/images/case1.png)\n![case2](/images/case2.png)\n![case3](/images/case3.png)\n\npython代码如下：\n\n```python\n#!/usr/bin/env python  \n# encoding: utf-8  \nimport numpy as np\nimport matplotlib.pyplot as plt\nu = 2.5 # 流速\nn=20 # 划分节点数（或者说控制体个数）\nL = 1.0 # 总长度\nrho = 1.0 # 密度\nGamma = 0.1 # 扩散系数\n\n#解析解\nx = np.linspace(0,1,100)\nphi = np.array([(np.exp(rho*u*L/Gamma)-np.exp(rho*u*xx/Gamma))/(np.exp(rho*u*L/Gamma)-1) for xx in x])\n\n#数值解\ndelta_x = L/n # 控制体边长\nF = rho*u # 对流通量\nD = Gamma/delta_x # 扩导\naW=D+F/2\naE=D-F/2\naP=aW+aE\nA = -aP*np.ones(n)\nB = np.zeros(n)\nB[0] = -2*aW\nA[0] = A[0]-aW\nA[n-1] = A[n-1]-aE\n#Thomas算法，并同时画图\n#计算过程使用托马斯算法，这里由于生成的三对阵简答，没有使用通用的thomas算法，而是针对本算例进行了简化\nfor i in range(1,n):\n    A[i] = A[i]-aW*aE/A[i-1]\n    B[i] = B[i]-aW*B[i-1]/A[i-1]\nB[n-1] = B[n-1]/A[n-1]\nxx = np.linspace(delta_x/2,1-delta_x/2,n)\nplt.scatter(xx[n-1], B[n-1], color='', marker='o', edgecolors='g', s=100, label='numerical solution')\nfor i in range(n-2,-1,-1):\n    B[i] = (B[i]-aE*B[i+1])/A[i]\n    plt.scatter(xx[i], B[i], color='', marker='o', edgecolors='g', s=100)\n\nplt.scatter(0, 1, color='', marker='o', edgecolors='g', s=100) # 边界点\nplt.scatter(1, 0, color='', marker='o', edgecolors='g', s=100) # 边界点\nplt.plot(x,phi,label='analysis solution')\nplt.rcParams['font.sans-serif']=['SimHei']\nplt.xlabel(u\"位置\") # x轴名称\nplt.ylabel(u\"变量\") # y轴名称\nplt.title(u\"一维稳态对流扩散问题\") # 图名\nplt.legend()\n#plt.text() # 在图上自定位置处写下标记\n#plt.axis([0,L,0,1]) # 设定坐标轴范围\nplt.grid(True) # 开关网格\nplt.savefig(\"case3.png\")\nplt.show() # 打印图像\n```\n\n---\n","source":"_posts/一维稳态流动与扩散问题验证.md","raw":"---\ntitle: 一维稳态流动与扩散问题验证\nabbrlink: 19049\ndate: 2018-10-10 22:22:14\ncategories:\ntags:\n---\n\n### 控制一维稳态流动与扩散问题验证\n考虑一段长为1m的区域，其稳态无源项的对流扩散方程如下：\n$$\\dfrac{d}{dx}(\\rho u\\phi)=\\dfrac{d}{dx}(\\Gamma\\dfrac{d\\phi}{dx})$$\n流动还需满足连续性方程：\n$$\\dfrac{d(\\rho u)}{dx}$$\n![](/images/WX20181010-205935@2x.png)\n积分上两式可得：\n$$(\\rho u A\\phi)_e-(\\rho u A\\phi)_w=\\big(\\Gamma A\\dfrac{d\\phi}{dx}\\big)_e-\\big(\\Gamma A\\dfrac{d\\phi}{dx}\\big)_w\\\\\\\\\n(\\rho u)_e-(\\rho u)_w=0$$\n定义两变量\n- $F=\\rho u$ 表示单位面积对流通量\n- $D=\\frac{\\Gamma}{\\delta x}$ 表示通过单元面的扩导\n\n所以积分的对流扩散方程可重新写为：\n$F_w=(\\rho u)_w,D_w=\\frac{\\Gamma_w}{\\delta x_{WP}},F_e=(\\rho u)_e,D_e=\\frac{\\Gamma_e}{\\delta x_{PE}}.$\n\n连续性方程为:\n$F_e-F_w=0$\n\n使用中心差分离散方程最后的形式为：\n$$a_P \\phi_P=a_W \\phi_W+a_E \\phi_E,\\text{其中}a_W=D_w+\\frac{F_w}{2},a_E=D_e-\\frac{F_e}{2},a_P=a_E+a_W+(F_e-F_w)$$\n\n本次算例解析解为：\n$$\\frac{\\phi-\\phi_0}{\\phi_L-\\phi_0}=\\frac{\\exp(\\frac{\\rho ux}{\\Gamma})-1}{\\exp(\\frac{\\rho uL}{\\Gamma})-1}$$\n\n边界条件为：$\\phi_0=1$当$x=0$和$\\phi_L=0$当$x=L$.\n对边界点，其离散方程应改为：\n- 对于第一个点，$-(a_P+a_W) \\phi_P+a_E\\phi_E+2a_W\\phi_0=0 $\n- 对于最后一个点，$a_W \\phi_W-(a_P+a_E) \\phi_P=0 $\n\n三种情况验证：\n1. u=0.1 m/s,节点数为5\n2. u=2.5 m/s,节点数为5\n3. u=2.5 m/s,节点数为20\n\n得到三种图像如下：\n![case1](/images/case1.png)\n![case2](/images/case2.png)\n![case3](/images/case3.png)\n\npython代码如下：\n\n```python\n#!/usr/bin/env python  \n# encoding: utf-8  \nimport numpy as np\nimport matplotlib.pyplot as plt\nu = 2.5 # 流速\nn=20 # 划分节点数（或者说控制体个数）\nL = 1.0 # 总长度\nrho = 1.0 # 密度\nGamma = 0.1 # 扩散系数\n\n#解析解\nx = np.linspace(0,1,100)\nphi = np.array([(np.exp(rho*u*L/Gamma)-np.exp(rho*u*xx/Gamma))/(np.exp(rho*u*L/Gamma)-1) for xx in x])\n\n#数值解\ndelta_x = L/n # 控制体边长\nF = rho*u # 对流通量\nD = Gamma/delta_x # 扩导\naW=D+F/2\naE=D-F/2\naP=aW+aE\nA = -aP*np.ones(n)\nB = np.zeros(n)\nB[0] = -2*aW\nA[0] = A[0]-aW\nA[n-1] = A[n-1]-aE\n#Thomas算法，并同时画图\n#计算过程使用托马斯算法，这里由于生成的三对阵简答，没有使用通用的thomas算法，而是针对本算例进行了简化\nfor i in range(1,n):\n    A[i] = A[i]-aW*aE/A[i-1]\n    B[i] = B[i]-aW*B[i-1]/A[i-1]\nB[n-1] = B[n-1]/A[n-1]\nxx = np.linspace(delta_x/2,1-delta_x/2,n)\nplt.scatter(xx[n-1], B[n-1], color='', marker='o', edgecolors='g', s=100, label='numerical solution')\nfor i in range(n-2,-1,-1):\n    B[i] = (B[i]-aE*B[i+1])/A[i]\n    plt.scatter(xx[i], B[i], color='', marker='o', edgecolors='g', s=100)\n\nplt.scatter(0, 1, color='', marker='o', edgecolors='g', s=100) # 边界点\nplt.scatter(1, 0, color='', marker='o', edgecolors='g', s=100) # 边界点\nplt.plot(x,phi,label='analysis solution')\nplt.rcParams['font.sans-serif']=['SimHei']\nplt.xlabel(u\"位置\") # x轴名称\nplt.ylabel(u\"变量\") # y轴名称\nplt.title(u\"一维稳态对流扩散问题\") # 图名\nplt.legend()\n#plt.text() # 在图上自定位置处写下标记\n#plt.axis([0,L,0,1]) # 设定坐标轴范围\nplt.grid(True) # 开关网格\nplt.savefig(\"case3.png\")\nplt.show() # 打印图像\n```\n\n---\n","slug":"一维稳态流动与扩散问题验证","published":1,"updated":"2018-10-15T15:11:34.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq9a4s0g000e3t9kvmft9prg","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><h3 id=\"控制一维稳态流动与扩散问题验证\"><a href=\"#控制一维稳态流动与扩散问题验证\" class=\"headerlink\" title=\"控制一维稳态流动与扩散问题验证\"></a>控制一维稳态流动与扩散问题验证</h3><p>考虑一段长为1m的区域，其稳态无源项的对流扩散方程如下：<br>$$\\dfrac{d}{dx}(\\rho u\\phi)=\\dfrac{d}{dx}(\\Gamma\\dfrac{d\\phi}{dx})$$<br>流动还需满足连续性方程：<br>$$\\dfrac{d(\\rho u)}{dx}$$<br><img src=\"/images/WX20181010-205935@2x.png\" alt=\"\"><br>积分上两式可得：<br>$$(\\rho u A\\phi)_e-(\\rho u A\\phi)_w=\\big(\\Gamma A\\dfrac{d\\phi}{dx}\\big)_e-\\big(\\Gamma A\\dfrac{d\\phi}{dx}\\big)_w\\\\<br>(\\rho u)_e-(\\rho u)_w=0$$<br>定义两变量</p><ul><li>$F=\\rho u$ 表示单位面积对流通量</li><li>$D=\\frac{\\Gamma}{\\delta x}$ 表示通过单元面的扩导</li></ul><p>所以积分的对流扩散方程可重新写为：<br>$F_w=(\\rho u)_w,D_w=\\frac{\\Gamma_w}{\\delta x_{WP}},F_e=(\\rho u)_e,D_e=\\frac{\\Gamma_e}{\\delta x_{PE}}.$</p><p>连续性方程为:<br>$F_e-F_w=0$</p><p>使用中心差分离散方程最后的形式为：<br>$$a_P \\phi_P=a_W \\phi_W+a_E \\phi_E,\\text{其中}a_W=D_w+\\frac{F_w}{2},a_E=D_e-\\frac{F_e}{2},a_P=a_E+a_W+(F_e-F_w)$$</p><p>本次算例解析解为：<br>$$\\frac{\\phi-\\phi_0}{\\phi_L-\\phi_0}=\\frac{\\exp(\\frac{\\rho ux}{\\Gamma})-1}{\\exp(\\frac{\\rho uL}{\\Gamma})-1}$$</p><p>边界条件为：$\\phi_0=1$当$x=0$和$\\phi_L=0$当$x=L$.<br>对边界点，其离散方程应改为：</p><ul><li>对于第一个点，$-(a_P+a_W) \\phi_P+a_E\\phi_E+2a_W\\phi_0=0 $</li><li>对于最后一个点，$a_W \\phi_W-(a_P+a_E) \\phi_P=0 $</li></ul><p>三种情况验证：</p><ol><li>u=0.1 m/s,节点数为5</li><li>u=2.5 m/s,节点数为5</li><li>u=2.5 m/s,节点数为20</li></ol><p>得到三种图像如下：<br><img src=\"/images/case1.png\" alt=\"case1\"><br><img src=\"/images/case2.png\" alt=\"case2\"><br><img src=\"/images/case3.png\" alt=\"case3\"></p><p>python代码如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python  </span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8  </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">u = <span class=\"number\">2.5</span> <span class=\"comment\"># 流速</span></span><br><span class=\"line\">n=<span class=\"number\">20</span> <span class=\"comment\"># 划分节点数（或者说控制体个数）</span></span><br><span class=\"line\">L = <span class=\"number\">1.0</span> <span class=\"comment\"># 总长度</span></span><br><span class=\"line\">rho = <span class=\"number\">1.0</span> <span class=\"comment\"># 密度</span></span><br><span class=\"line\">Gamma = <span class=\"number\">0.1</span> <span class=\"comment\"># 扩散系数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#解析解</span></span><br><span class=\"line\">x = np.linspace(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\">phi = np.array([(np.exp(rho*u*L/Gamma)-np.exp(rho*u*xx/Gamma))/(np.exp(rho*u*L/Gamma)<span class=\"number\">-1</span>) <span class=\"keyword\">for</span> xx <span class=\"keyword\">in</span> x])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#数值解</span></span><br><span class=\"line\">delta_x = L/n <span class=\"comment\"># 控制体边长</span></span><br><span class=\"line\">F = rho*u <span class=\"comment\"># 对流通量</span></span><br><span class=\"line\">D = Gamma/delta_x <span class=\"comment\"># 扩导</span></span><br><span class=\"line\">aW=D+F/<span class=\"number\">2</span></span><br><span class=\"line\">aE=D-F/<span class=\"number\">2</span></span><br><span class=\"line\">aP=aW+aE</span><br><span class=\"line\">A = -aP*np.ones(n)</span><br><span class=\"line\">B = np.zeros(n)</span><br><span class=\"line\">B[<span class=\"number\">0</span>] = <span class=\"number\">-2</span>*aW</span><br><span class=\"line\">A[<span class=\"number\">0</span>] = A[<span class=\"number\">0</span>]-aW</span><br><span class=\"line\">A[n<span class=\"number\">-1</span>] = A[n<span class=\"number\">-1</span>]-aE</span><br><span class=\"line\"><span class=\"comment\">#Thomas算法，并同时画图</span></span><br><span class=\"line\"><span class=\"comment\">#计算过程使用托马斯算法，这里由于生成的三对阵简答，没有使用通用的thomas算法，而是针对本算例进行了简化</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">    A[i] = A[i]-aW*aE/A[i<span class=\"number\">-1</span>]</span><br><span class=\"line\">    B[i] = B[i]-aW*B[i<span class=\"number\">-1</span>]/A[i<span class=\"number\">-1</span>]</span><br><span class=\"line\">B[n<span class=\"number\">-1</span>] = B[n<span class=\"number\">-1</span>]/A[n<span class=\"number\">-1</span>]</span><br><span class=\"line\">xx = np.linspace(delta_x/<span class=\"number\">2</span>,<span class=\"number\">1</span>-delta_x/<span class=\"number\">2</span>,n)</span><br><span class=\"line\">plt.scatter(xx[n<span class=\"number\">-1</span>], B[n<span class=\"number\">-1</span>], color=<span class=\"string\">''</span>, marker=<span class=\"string\">'o'</span>, edgecolors=<span class=\"string\">'g'</span>, s=<span class=\"number\">100</span>, label=<span class=\"string\">'numerical solution'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">    B[i] = (B[i]-aE*B[i+<span class=\"number\">1</span>])/A[i]</span><br><span class=\"line\">    plt.scatter(xx[i], B[i], color=<span class=\"string\">''</span>, marker=<span class=\"string\">'o'</span>, edgecolors=<span class=\"string\">'g'</span>, s=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.scatter(<span class=\"number\">0</span>, <span class=\"number\">1</span>, color=<span class=\"string\">''</span>, marker=<span class=\"string\">'o'</span>, edgecolors=<span class=\"string\">'g'</span>, s=<span class=\"number\">100</span>) <span class=\"comment\"># 边界点</span></span><br><span class=\"line\">plt.scatter(<span class=\"number\">1</span>, <span class=\"number\">0</span>, color=<span class=\"string\">''</span>, marker=<span class=\"string\">'o'</span>, edgecolors=<span class=\"string\">'g'</span>, s=<span class=\"number\">100</span>) <span class=\"comment\"># 边界点</span></span><br><span class=\"line\">plt.plot(x,phi,label=<span class=\"string\">'analysis solution'</span>)</span><br><span class=\"line\">plt.rcParams[<span class=\"string\">'font.sans-serif'</span>]=[<span class=\"string\">'SimHei'</span>]</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">u\"位置\"</span>) <span class=\"comment\"># x轴名称</span></span><br><span class=\"line\">plt.ylabel(<span class=\"string\">u\"变量\"</span>) <span class=\"comment\"># y轴名称</span></span><br><span class=\"line\">plt.title(<span class=\"string\">u\"一维稳态对流扩散问题\"</span>) <span class=\"comment\"># 图名</span></span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\"><span class=\"comment\">#plt.text() # 在图上自定位置处写下标记</span></span><br><span class=\"line\"><span class=\"comment\">#plt.axis([0,L,0,1]) # 设定坐标轴范围</span></span><br><span class=\"line\">plt.grid(<span class=\"keyword\">True</span>) <span class=\"comment\"># 开关网格</span></span><br><span class=\"line\">plt.savefig(<span class=\"string\">\"case3.png\"</span>)</span><br><span class=\"line\">plt.show() <span class=\"comment\"># 打印图像</span></span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><h3 id=\"控制一维稳态流动与扩散问题验证\"><a href=\"#控制一维稳态流动与扩散问题验证\" class=\"headerlink\" title=\"控制一维稳态流动与扩散问题验证\"></a>控制一维稳态流动与扩散问题验证</h3><p>考虑一段长为1m的区域，其稳态无源项的对流扩散方程如下：<br>$$\\dfrac{d}{dx}(\\rho u\\phi)=\\dfrac{d}{dx}(\\Gamma\\dfrac{d\\phi}{dx})$$<br>流动还需满足连续性方程：<br>$$\\dfrac{d(\\rho u)}{dx}$$<br><img src=\"/images/WX20181010-205935@2x.png\" alt=\"\"><br>积分上两式可得：<br>$$(\\rho u A\\phi)_e-(\\rho u A\\phi)_w=\\big(\\Gamma A\\dfrac{d\\phi}{dx}\\big)_e-\\big(\\Gamma A\\dfrac{d\\phi}{dx}\\big)_w\\\\<br>(\\rho u)_e-(\\rho u)_w=0$$<br>定义两变量</p><ul><li>$F=\\rho u$ 表示单位面积对流通量</li><li>$D=\\frac{\\Gamma}{\\delta x}$ 表示通过单元面的扩导</li></ul><p>所以积分的对流扩散方程可重新写为：<br>$F_w=(\\rho u)_w,D_w=\\frac{\\Gamma_w}{\\delta x_{WP}},F_e=(\\rho u)_e,D_e=\\frac{\\Gamma_e}{\\delta x_{PE}}.$</p><p>连续性方程为:<br>$F_e-F_w=0$</p><p>使用中心差分离散方程最后的形式为：<br>$$a_P \\phi_P=a_W \\phi_W+a_E \\phi_E,\\text{其中}a_W=D_w+\\frac{F_w}{2},a_E=D_e-\\frac{F_e}{2},a_P=a_E+a_W+(F_e-F_w)$$</p><p>本次算例解析解为：<br>$$\\frac{\\phi-\\phi_0}{\\phi_L-\\phi_0}=\\frac{\\exp(\\frac{\\rho ux}{\\Gamma})-1}{\\exp(\\frac{\\rho uL}{\\Gamma})-1}$$</p><p>边界条件为：$\\phi_0=1$当$x=0$和$\\phi_L=0$当$x=L$.<br>对边界点，其离散方程应改为：</p><ul><li>对于第一个点，$-(a_P+a_W) \\phi_P+a_E\\phi_E+2a_W\\phi_0=0 $</li><li>对于最后一个点，$a_W \\phi_W-(a_P+a_E) \\phi_P=0 $</li></ul><p>三种情况验证：</p><ol><li>u=0.1 m/s,节点数为5</li><li>u=2.5 m/s,节点数为5</li><li>u=2.5 m/s,节点数为20</li></ol><p>得到三种图像如下：<br><img src=\"/images/case1.png\" alt=\"case1\"><br><img src=\"/images/case2.png\" alt=\"case2\"><br><img src=\"/images/case3.png\" alt=\"case3\"></p><p>python代码如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python  </span></span><br><span class=\"line\"><span class=\"comment\"># encoding: utf-8  </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">u = <span class=\"number\">2.5</span> <span class=\"comment\"># 流速</span></span><br><span class=\"line\">n=<span class=\"number\">20</span> <span class=\"comment\"># 划分节点数（或者说控制体个数）</span></span><br><span class=\"line\">L = <span class=\"number\">1.0</span> <span class=\"comment\"># 总长度</span></span><br><span class=\"line\">rho = <span class=\"number\">1.0</span> <span class=\"comment\"># 密度</span></span><br><span class=\"line\">Gamma = <span class=\"number\">0.1</span> <span class=\"comment\"># 扩散系数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#解析解</span></span><br><span class=\"line\">x = np.linspace(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\">phi = np.array([(np.exp(rho*u*L/Gamma)-np.exp(rho*u*xx/Gamma))/(np.exp(rho*u*L/Gamma)<span class=\"number\">-1</span>) <span class=\"keyword\">for</span> xx <span class=\"keyword\">in</span> x])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#数值解</span></span><br><span class=\"line\">delta_x = L/n <span class=\"comment\"># 控制体边长</span></span><br><span class=\"line\">F = rho*u <span class=\"comment\"># 对流通量</span></span><br><span class=\"line\">D = Gamma/delta_x <span class=\"comment\"># 扩导</span></span><br><span class=\"line\">aW=D+F/<span class=\"number\">2</span></span><br><span class=\"line\">aE=D-F/<span class=\"number\">2</span></span><br><span class=\"line\">aP=aW+aE</span><br><span class=\"line\">A = -aP*np.ones(n)</span><br><span class=\"line\">B = np.zeros(n)</span><br><span class=\"line\">B[<span class=\"number\">0</span>] = <span class=\"number\">-2</span>*aW</span><br><span class=\"line\">A[<span class=\"number\">0</span>] = A[<span class=\"number\">0</span>]-aW</span><br><span class=\"line\">A[n<span class=\"number\">-1</span>] = A[n<span class=\"number\">-1</span>]-aE</span><br><span class=\"line\"><span class=\"comment\">#Thomas算法，并同时画图</span></span><br><span class=\"line\"><span class=\"comment\">#计算过程使用托马斯算法，这里由于生成的三对阵简答，没有使用通用的thomas算法，而是针对本算例进行了简化</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,n):</span><br><span class=\"line\">    A[i] = A[i]-aW*aE/A[i<span class=\"number\">-1</span>]</span><br><span class=\"line\">    B[i] = B[i]-aW*B[i<span class=\"number\">-1</span>]/A[i<span class=\"number\">-1</span>]</span><br><span class=\"line\">B[n<span class=\"number\">-1</span>] = B[n<span class=\"number\">-1</span>]/A[n<span class=\"number\">-1</span>]</span><br><span class=\"line\">xx = np.linspace(delta_x/<span class=\"number\">2</span>,<span class=\"number\">1</span>-delta_x/<span class=\"number\">2</span>,n)</span><br><span class=\"line\">plt.scatter(xx[n<span class=\"number\">-1</span>], B[n<span class=\"number\">-1</span>], color=<span class=\"string\">''</span>, marker=<span class=\"string\">'o'</span>, edgecolors=<span class=\"string\">'g'</span>, s=<span class=\"number\">100</span>, label=<span class=\"string\">'numerical solution'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n<span class=\"number\">-2</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">    B[i] = (B[i]-aE*B[i+<span class=\"number\">1</span>])/A[i]</span><br><span class=\"line\">    plt.scatter(xx[i], B[i], color=<span class=\"string\">''</span>, marker=<span class=\"string\">'o'</span>, edgecolors=<span class=\"string\">'g'</span>, s=<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.scatter(<span class=\"number\">0</span>, <span class=\"number\">1</span>, color=<span class=\"string\">''</span>, marker=<span class=\"string\">'o'</span>, edgecolors=<span class=\"string\">'g'</span>, s=<span class=\"number\">100</span>) <span class=\"comment\"># 边界点</span></span><br><span class=\"line\">plt.scatter(<span class=\"number\">1</span>, <span class=\"number\">0</span>, color=<span class=\"string\">''</span>, marker=<span class=\"string\">'o'</span>, edgecolors=<span class=\"string\">'g'</span>, s=<span class=\"number\">100</span>) <span class=\"comment\"># 边界点</span></span><br><span class=\"line\">plt.plot(x,phi,label=<span class=\"string\">'analysis solution'</span>)</span><br><span class=\"line\">plt.rcParams[<span class=\"string\">'font.sans-serif'</span>]=[<span class=\"string\">'SimHei'</span>]</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">u\"位置\"</span>) <span class=\"comment\"># x轴名称</span></span><br><span class=\"line\">plt.ylabel(<span class=\"string\">u\"变量\"</span>) <span class=\"comment\"># y轴名称</span></span><br><span class=\"line\">plt.title(<span class=\"string\">u\"一维稳态对流扩散问题\"</span>) <span class=\"comment\"># 图名</span></span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\"><span class=\"comment\">#plt.text() # 在图上自定位置处写下标记</span></span><br><span class=\"line\"><span class=\"comment\">#plt.axis([0,L,0,1]) # 设定坐标轴范围</span></span><br><span class=\"line\">plt.grid(<span class=\"keyword\">True</span>) <span class=\"comment\"># 开关网格</span></span><br><span class=\"line\">plt.savefig(<span class=\"string\">\"case3.png\"</span>)</span><br><span class=\"line\">plt.show() <span class=\"comment\"># 打印图像</span></span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->"},{"title":"二阶非齐次常系数线性微分方程解法","abbrlink":1642,"date":"2018-12-29T06:40:41.000Z","_content":"\n\n\n\n\b高数中在求解形如$y''+py'+q=f(x)$的二阶常系数非齐次线性微分方程的时候，是分成各种情况，然后按照各种情况给出解的形式，高数书中都有讲到，这里不再赘述。可参考[链接](https://wenku.baidu.com/view/1ff60dd233d4b14e8524687a.html)。\n\n\b\b这种机械记忆太困难了，\b然后我找找找就找到了求解\b该方程的一般方法——[常数变易法](https://en.wikipedia.org/wiki/Variation_of_parameters)。\n\n\b\b\b\b常数变易法应该是个很熟悉的名词，在高数课本上推导一阶非齐次常系数线性微分方程的求解公式的时候就是用的该方法。在一般的高阶非齐次线性微分方程上，该方法同样适用。\n\n#### 一阶非齐次线性微分方程\n\n\b对于一阶齐次线性微分方程$y' + p(x)y = 0$，可以直接通过分离变量，直接积分得到通解：\n\n$$\b\\begin{aligned}\n\\frac{dy}{dx} + p(x)y = 0&\\Rightarrow \\frac{dy}{y}=-p(x)dx\n\\\\\\\\&\\Rightarrow \\ln |y| =\\int-p(x)dx\n\\\\\\\\&\\Rightarrow y = C_0 e^{\\int-p(x)dx}\n\\end{aligned}$$\n\n而求解一阶非齐次线性微分方程$y' + p(x)y = q(x)$，我们知道非齐次线性微分方程的通解=齐次方程的通解+非齐次方程的一个特解，我们只需将齐次方程通解的常系数$C_0$改成关于$x$的函数$C(x)$来求解非齐次方程的一个特解。\n\n设非齐次方程的一个特解为$y$，齐次方程的通解为$y_c$，非齐次方程的一个特解为$y_p$，有：\n\n\b$$y=y_c+y_p,,\\quad y_c = C_0 e^{\\int-p(x)dx},\\quad y_p=C(x)e^{\\int-p(x)dx}$$\n\n下面\b计算\b$C(x)$:\n\n将$y_p=C(x)e^{\\int-p(x)dx}$代入微分方程$y' + p(x)y = q(x)$有:\n\n$$\b\\begin{align}\nC ^ { \\prime } &( x ) e ^ { - \\int p ( x ) d x } - C ( x ) p ( x ) e ^ { - \\int p ( x ) d x } + p ( x ) C ( x ) e ^ { - \\int p ( x ) d x } = q ( x )\\\\\\\\ \\Rightarrow &C ^ { \\prime } ( x ) = e ^ { \\int p ( x ) d x } q ( x )\n\\\\\\\\ \\Rightarrow &C ( x ) = \\int e ^ { \\int p ( x ) d x } q ( x ) dx + C_1\n\\\\\\\\\n\\end{align}$$\n\n\n$$\\therefore y=y_c+y_p= e ^ { - \\int p ( x ) d x }\\Big(C _ { 0 }  + \\int q ( x ) e ^ { \\int p ( x ) d x } d x\\Big)$$\n\n#### 二阶非齐次线性微分方程\n\n二阶齐次线性微分方程的通解形式为$y=C_1 u_1(x)+C_2 u_2(x)$，这里不赘述具体形式。和一阶非齐次方程求解一样的过程，我们使用常数变易法求二阶非齐次方程$y''+p(x)y'+q(x)y=f(x)$的一个特解。\n\n令$y_p=A(x) u_1(x)+B(x) u_2(x)$，注意到这里有两个未知量$A(x),B(x)$，需要两个方程才能求解出，注意到对于齐次方程$A(x),B(x)$均为常数，所以我们添加另一个条件为$0=A'(x) u_1(x)+B'(x) u_2(x)$。\n\n将$y_p=A(x) u_1(x)+B(x) u_2(x)$代入微分方程有：\n\n$\b$\n\\begin{align}y'&=A'(x) u_1(x)+B'(x) u_2(x)+A(x) u_1'(x)+B(x)u_2'(x)\b\n\\\\\\\\&=A(x) u_1'(x)+B(x)u_2'(x)\n\\\\\\\\y''&=\bA'(x) u_1'(x)+B'(x)u_2'(x)+A(x) u_1''(x)+B(x)u_2''(x)\\end{align}\n$$\n\n$$\\begin{align}\\therefore y''+py'+qy&=A ( x ) (u _ { 1 }'' +pu _ { 1 }' +qu _ { 1 })  + B ( x ) (u _ { 2 }'' +pu _ { 2 }' +qu _ { 2 }) \\\\\\\\&\\quad+ A ^ { \\prime } ( x ) u _ { 1 } ^ { \\prime } ( x ) + B ^ { \\prime } ( x ) u _ { 2 } ^ { \\prime } ( x )\\\\\\\\\n&=A ^ { \\prime } ( x ) u _ { 1 } ^ { \\prime } ( x ) + B ^ { \\prime } ( x ) u _ { 2 } ^ { \\prime } ( x )\\\\\\\\&=f(x)\\end{align}$$\n\n$\\therefore$我们得到\n\n$$\n\\begin{aligned}\nA ^ { \\prime } ( x ) u _ { 1 }  ( x ) + B ^ { \\prime } ( x ) u _ { 2 } (x)&=0\n\\\\\\\\A ^ { \\prime } ( x ) u _ { 1 } ^ { \\prime } ( x ) + B ^ { \\prime } ( x ) u _ { 2 } ^ { \\prime } ( x )&=f(x)\n\\end{aligned}\n$$\n\n\b\b解得：\n$$A'(x)=-\\frac{1}{W}u_2(x)f(x),\\, B'(x)=\\frac{1}{W}u_1(x)f(x)$$\n即：\n$$A(x)=\\int_0^x-\\frac{1}{W}u_2(t)f(t)dt+C_1,\\, B(x)=\\int_0^x\\frac{1}{W}u_1(t)f(t)dt+C_2$$\n\n其中\b$W$表示朗斯基行列式：\n\n$$W(x)=\\left|\\begin{array}{cc}\n    u_1(x) &    u_2(x)    \\\\\\\\\n    u_1'(x) &    u_2'(x)  \n\\end{array}\\right| $$\n\n\n\n\n$$\b\\therefore y=C_1 u_1(x)+C_2u_2(x)+\\int_0^x\\frac{u_1(t)u_2(x)-u_2(t)u_1(x)}{W}f(t)dt$$\n\n\n#### 非齐次微分方程解的物理意义\n\b\b\n\b\b设某个线性系统满足线性微分方程$\\frac{d^2 x}{dt^2}+w^2x=f$，比如受驱弹簧谐振子。第一项表示谐振子的加速度，第二项表示\b弹簧拉伸的张力，右项表示单位质量受作用的外力。\n\n我们考虑\b\b某$\\tau$时刻到$\\tau+d \\tau$时刻的情况，外力从$\\tau$时刻开始作用到$\\tau+d \\tau$时刻结束。在这个极短的时间里，谐振子\b没有来得及产生位移，所以有：\n$$x^{(\\tau)}|_{t=\\tau+d \\tau}=0$$\n而\b\b根据冲量定理有，\b单位质量谐振子动量的变化等于该时间间隔内外力的冲量，有:\n\n$$\nx_t^{(\\tau)}|_{t=\\tau+d \\tau}-x_t^{(\\tau)}|_{t=\\tau}=f(\\tau) d \\tau\n$$\n注意到在\b$\\tau $外力刚开始作用，没有使动量(速度)产生变化，所以$x_t^{(\\tau)}|_{t=\\tau}=0$,所以有：\n$$\nx_t^{(\\tau)}|_{t=\\tau+d \\tau}=f(\\tau) d \\tau\n$$\n\n综上对于二阶非齐次线性系统$\\frac{d^2 x}{dt^2}+w^2x=f$的求解，可以\b转化为\b求解齐次方程，满足：\n$$\\frac{d^2 x^{(\\tau)}}{dt^2}+w^2x^{(\\tau)}=0,\\,x^{(\\tau)}(\\tau+d\\tau)=0,\\,\\frac{dx^{(\\tau)}}{dt}{\\Bigg|}_{\\tau+d\\tau}=f(\\tau)d\\tau$$\n\n记$x^{(\\tau)}(t)=u(t,\\tau)d\\tau$,则:\n\n$$x(t)=\\int_0^t u(t,\\tau)d\\tau$$\n\n\b其中$u(t,\\tau)$满足：\n\n$$\\frac{d^2 u}{dt^2}+w^2u=0,\\,u(\\tau)=0,\\,u'(\\tau)=f(\\tau)$$\n\n该公式称为冲量定理。\n\n> 冲量定理在求解线性系统中有广泛应用，无论是常微分方程还是偏微分方程。\n\n\n\n\n\n---\n","source":"_posts/二阶非齐次常系数线性微分方程解法.md","raw":"---\ntitle: 二阶非齐次常系数线性微分方程解法\ncategories: 数学\ntags: [常微分方程,数学物理方法]\nabbrlink: 1642\ndate: 2018-12-29 14:40:41\n---\n\n\n\n\n\b高数中在求解形如$y''+py'+q=f(x)$的二阶常系数非齐次线性微分方程的时候，是分成各种情况，然后按照各种情况给出解的形式，高数书中都有讲到，这里不再赘述。可参考[链接](https://wenku.baidu.com/view/1ff60dd233d4b14e8524687a.html)。\n\n\b\b这种机械记忆太困难了，\b然后我找找找就找到了求解\b该方程的一般方法——[常数变易法](https://en.wikipedia.org/wiki/Variation_of_parameters)。\n\n\b\b\b\b常数变易法应该是个很熟悉的名词，在高数课本上推导一阶非齐次常系数线性微分方程的求解公式的时候就是用的该方法。在一般的高阶非齐次线性微分方程上，该方法同样适用。\n\n#### 一阶非齐次线性微分方程\n\n\b对于一阶齐次线性微分方程$y' + p(x)y = 0$，可以直接通过分离变量，直接积分得到通解：\n\n$$\b\\begin{aligned}\n\\frac{dy}{dx} + p(x)y = 0&\\Rightarrow \\frac{dy}{y}=-p(x)dx\n\\\\\\\\&\\Rightarrow \\ln |y| =\\int-p(x)dx\n\\\\\\\\&\\Rightarrow y = C_0 e^{\\int-p(x)dx}\n\\end{aligned}$$\n\n而求解一阶非齐次线性微分方程$y' + p(x)y = q(x)$，我们知道非齐次线性微分方程的通解=齐次方程的通解+非齐次方程的一个特解，我们只需将齐次方程通解的常系数$C_0$改成关于$x$的函数$C(x)$来求解非齐次方程的一个特解。\n\n设非齐次方程的一个特解为$y$，齐次方程的通解为$y_c$，非齐次方程的一个特解为$y_p$，有：\n\n\b$$y=y_c+y_p,,\\quad y_c = C_0 e^{\\int-p(x)dx},\\quad y_p=C(x)e^{\\int-p(x)dx}$$\n\n下面\b计算\b$C(x)$:\n\n将$y_p=C(x)e^{\\int-p(x)dx}$代入微分方程$y' + p(x)y = q(x)$有:\n\n$$\b\\begin{align}\nC ^ { \\prime } &( x ) e ^ { - \\int p ( x ) d x } - C ( x ) p ( x ) e ^ { - \\int p ( x ) d x } + p ( x ) C ( x ) e ^ { - \\int p ( x ) d x } = q ( x )\\\\\\\\ \\Rightarrow &C ^ { \\prime } ( x ) = e ^ { \\int p ( x ) d x } q ( x )\n\\\\\\\\ \\Rightarrow &C ( x ) = \\int e ^ { \\int p ( x ) d x } q ( x ) dx + C_1\n\\\\\\\\\n\\end{align}$$\n\n\n$$\\therefore y=y_c+y_p= e ^ { - \\int p ( x ) d x }\\Big(C _ { 0 }  + \\int q ( x ) e ^ { \\int p ( x ) d x } d x\\Big)$$\n\n#### 二阶非齐次线性微分方程\n\n二阶齐次线性微分方程的通解形式为$y=C_1 u_1(x)+C_2 u_2(x)$，这里不赘述具体形式。和一阶非齐次方程求解一样的过程，我们使用常数变易法求二阶非齐次方程$y''+p(x)y'+q(x)y=f(x)$的一个特解。\n\n令$y_p=A(x) u_1(x)+B(x) u_2(x)$，注意到这里有两个未知量$A(x),B(x)$，需要两个方程才能求解出，注意到对于齐次方程$A(x),B(x)$均为常数，所以我们添加另一个条件为$0=A'(x) u_1(x)+B'(x) u_2(x)$。\n\n将$y_p=A(x) u_1(x)+B(x) u_2(x)$代入微分方程有：\n\n$\b$\n\\begin{align}y'&=A'(x) u_1(x)+B'(x) u_2(x)+A(x) u_1'(x)+B(x)u_2'(x)\b\n\\\\\\\\&=A(x) u_1'(x)+B(x)u_2'(x)\n\\\\\\\\y''&=\bA'(x) u_1'(x)+B'(x)u_2'(x)+A(x) u_1''(x)+B(x)u_2''(x)\\end{align}\n$$\n\n$$\\begin{align}\\therefore y''+py'+qy&=A ( x ) (u _ { 1 }'' +pu _ { 1 }' +qu _ { 1 })  + B ( x ) (u _ { 2 }'' +pu _ { 2 }' +qu _ { 2 }) \\\\\\\\&\\quad+ A ^ { \\prime } ( x ) u _ { 1 } ^ { \\prime } ( x ) + B ^ { \\prime } ( x ) u _ { 2 } ^ { \\prime } ( x )\\\\\\\\\n&=A ^ { \\prime } ( x ) u _ { 1 } ^ { \\prime } ( x ) + B ^ { \\prime } ( x ) u _ { 2 } ^ { \\prime } ( x )\\\\\\\\&=f(x)\\end{align}$$\n\n$\\therefore$我们得到\n\n$$\n\\begin{aligned}\nA ^ { \\prime } ( x ) u _ { 1 }  ( x ) + B ^ { \\prime } ( x ) u _ { 2 } (x)&=0\n\\\\\\\\A ^ { \\prime } ( x ) u _ { 1 } ^ { \\prime } ( x ) + B ^ { \\prime } ( x ) u _ { 2 } ^ { \\prime } ( x )&=f(x)\n\\end{aligned}\n$$\n\n\b\b解得：\n$$A'(x)=-\\frac{1}{W}u_2(x)f(x),\\, B'(x)=\\frac{1}{W}u_1(x)f(x)$$\n即：\n$$A(x)=\\int_0^x-\\frac{1}{W}u_2(t)f(t)dt+C_1,\\, B(x)=\\int_0^x\\frac{1}{W}u_1(t)f(t)dt+C_2$$\n\n其中\b$W$表示朗斯基行列式：\n\n$$W(x)=\\left|\\begin{array}{cc}\n    u_1(x) &    u_2(x)    \\\\\\\\\n    u_1'(x) &    u_2'(x)  \n\\end{array}\\right| $$\n\n\n\n\n$$\b\\therefore y=C_1 u_1(x)+C_2u_2(x)+\\int_0^x\\frac{u_1(t)u_2(x)-u_2(t)u_1(x)}{W}f(t)dt$$\n\n\n#### 非齐次微分方程解的物理意义\n\b\b\n\b\b设某个线性系统满足线性微分方程$\\frac{d^2 x}{dt^2}+w^2x=f$，比如受驱弹簧谐振子。第一项表示谐振子的加速度，第二项表示\b弹簧拉伸的张力，右项表示单位质量受作用的外力。\n\n我们考虑\b\b某$\\tau$时刻到$\\tau+d \\tau$时刻的情况，外力从$\\tau$时刻开始作用到$\\tau+d \\tau$时刻结束。在这个极短的时间里，谐振子\b没有来得及产生位移，所以有：\n$$x^{(\\tau)}|_{t=\\tau+d \\tau}=0$$\n而\b\b根据冲量定理有，\b单位质量谐振子动量的变化等于该时间间隔内外力的冲量，有:\n\n$$\nx_t^{(\\tau)}|_{t=\\tau+d \\tau}-x_t^{(\\tau)}|_{t=\\tau}=f(\\tau) d \\tau\n$$\n注意到在\b$\\tau $外力刚开始作用，没有使动量(速度)产生变化，所以$x_t^{(\\tau)}|_{t=\\tau}=0$,所以有：\n$$\nx_t^{(\\tau)}|_{t=\\tau+d \\tau}=f(\\tau) d \\tau\n$$\n\n综上对于二阶非齐次线性系统$\\frac{d^2 x}{dt^2}+w^2x=f$的求解，可以\b转化为\b求解齐次方程，满足：\n$$\\frac{d^2 x^{(\\tau)}}{dt^2}+w^2x^{(\\tau)}=0,\\,x^{(\\tau)}(\\tau+d\\tau)=0,\\,\\frac{dx^{(\\tau)}}{dt}{\\Bigg|}_{\\tau+d\\tau}=f(\\tau)d\\tau$$\n\n记$x^{(\\tau)}(t)=u(t,\\tau)d\\tau$,则:\n\n$$x(t)=\\int_0^t u(t,\\tau)d\\tau$$\n\n\b其中$u(t,\\tau)$满足：\n\n$$\\frac{d^2 u}{dt^2}+w^2u=0,\\,u(\\tau)=0,\\,u'(\\tau)=f(\\tau)$$\n\n该公式称为冲量定理。\n\n> 冲量定理在求解线性系统中有广泛应用，无论是常微分方程还是偏微分方程。\n\n\n\n\n\n---\n","slug":"二阶非齐次常系数线性微分方程解法","published":1,"updated":"2018-12-29T10:59:04.715Z","_id":"cjq9a4s0j000f3t9kdvom1fww","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- build time:Sat Dec 29 2018 18:59:13 GMT+0800 (CST) --><p>\b高数中在求解形如$y’’+py’+q=f(x)$的二阶常系数非齐次线性微分方程的时候，是分成各种情况，然后按照各种情况给出解的形式，高数书中都有讲到，这里不再赘述。可参考<a href=\"https://wenku.baidu.com/view/1ff60dd233d4b14e8524687a.html\" target=\"_blank\" rel=\"noopener\">链接</a>。</p><p>\b\b这种机械记忆太困难了，\b然后我找找找就找到了求解\b该方程的一般方法——<a href=\"https://en.wikipedia.org/wiki/Variation_of_parameters\" target=\"_blank\" rel=\"noopener\">常数变易法</a>。</p><p>\b\b\b\b常数变易法应该是个很熟悉的名词，在高数课本上推导一阶非齐次常系数线性微分方程的求解公式的时候就是用的该方法。在一般的高阶非齐次线性微分方程上，该方法同样适用。</p><h4 id=\"一阶非齐次线性微分方程\"><a href=\"#一阶非齐次线性微分方程\" class=\"headerlink\" title=\"一阶非齐次线性微分方程\"></a>一阶非齐次线性微分方程</h4><p>\b对于一阶齐次线性微分方程$y’ + p(x)y = 0$，可以直接通过分离变量，直接积分得到通解：</p><p>$$\b\\begin{aligned}<br>\\frac{dy}{dx} + p(x)y = 0&amp;\\Rightarrow \\frac{dy}{y}=-p(x)dx<br>\\\\&amp;\\Rightarrow \\ln |y| =\\int-p(x)dx<br>\\\\&amp;\\Rightarrow y = C_0 e^{\\int-p(x)dx}<br>\\end{aligned}$$</p><p>而求解一阶非齐次线性微分方程$y’ + p(x)y = q(x)$，我们知道非齐次线性微分方程的通解=齐次方程的通解+非齐次方程的一个特解，我们只需将齐次方程通解的常系数$C_0$改成关于$x$的函数$C(x)$来求解非齐次方程的一个特解。</p><p>设非齐次方程的一个特解为$y$，齐次方程的通解为$y_c$，非齐次方程的一个特解为$y_p$，有：</p><p>\b$$y=y_c+y_p,,\\quad y_c = C_0 e^{\\int-p(x)dx},\\quad y_p=C(x)e^{\\int-p(x)dx}$$</p><p>下面\b计算\b$C(x)$:</p><p>将$y_p=C(x)e^{\\int-p(x)dx}$代入微分方程$y’ + p(x)y = q(x)$有:</p><p>$$\b\\begin{align}<br>C ^ { \\prime } &amp;( x ) e ^ { - \\int p ( x ) d x } - C ( x ) p ( x ) e ^ { - \\int p ( x ) d x } + p ( x ) C ( x ) e ^ { - \\int p ( x ) d x } = q ( x )\\\\ \\Rightarrow &amp;C ^ { \\prime } ( x ) = e ^ { \\int p ( x ) d x } q ( x )<br>\\\\ \\Rightarrow &amp;C ( x ) = \\int e ^ { \\int p ( x ) d x } q ( x ) dx + C_1<br>\\\\<br>\\end{align}$$</p><p>$$\\therefore y=y_c+y_p= e ^ { - \\int p ( x ) d x }\\Big(C _ { 0 } + \\int q ( x ) e ^ { \\int p ( x ) d x } d x\\Big)$$</p><h4 id=\"二阶非齐次线性微分方程\"><a href=\"#二阶非齐次线性微分方程\" class=\"headerlink\" title=\"二阶非齐次线性微分方程\"></a>二阶非齐次线性微分方程</h4><p>二阶齐次线性微分方程的通解形式为$y=C_1 u_1(x)+C_2 u_2(x)$，这里不赘述具体形式。和一阶非齐次方程求解一样的过程，我们使用常数变易法求二阶非齐次方程$y’’+p(x)y’+q(x)y=f(x)$的一个特解。</p><p>令$y_p=A(x) u_1(x)+B(x) u_2(x)$，注意到这里有两个未知量$A(x),B(x)$，需要两个方程才能求解出，注意到对于齐次方程$A(x),B(x)$均为常数，所以我们添加另一个条件为$0=A’(x) u_1(x)+B’(x) u_2(x)$。</p><p>将$y_p=A(x) u_1(x)+B(x) u_2(x)$代入微分方程有：</p><p>$\b$<br>\\begin{align}y’&amp;=A’(x) u_1(x)+B’(x) u_2(x)+A(x) u_1’(x)+B(x)u_2’(x)\b<br>\\\\&amp;=A(x) u_1’(x)+B(x)u_2’(x)<br>\\\\y’’&amp;=\bA’(x) u_1’(x)+B’(x)u_2’(x)+A(x) u_1’’(x)+B(x)u_2’’(x)\\end{align}<br>$$</p><p>$$\\begin{align}\\therefore y’’+py’+qy&amp;=A ( x ) (u _ { 1 }’’ +pu _ { 1 }’ +qu _ { 1 }) + B ( x ) (u _ { 2 }’’ +pu _ { 2 }’ +qu _ { 2 }) \\\\&amp;\\quad+ A ^ { \\prime } ( x ) u _ { 1 } ^ { \\prime } ( x ) + B ^ { \\prime } ( x ) u _ { 2 } ^ { \\prime } ( x )\\\\<br>&amp;=A ^ { \\prime } ( x ) u _ { 1 } ^ { \\prime } ( x ) + B ^ { \\prime } ( x ) u _ { 2 } ^ { \\prime } ( x )\\\\&amp;=f(x)\\end{align}$$</p><p>$\\therefore$我们得到</p><p>$$<br>\\begin{aligned}<br>A ^ { \\prime } ( x ) u _ { 1 } ( x ) + B ^ { \\prime } ( x ) u _ { 2 } (x)&amp;=0<br>\\\\A ^ { \\prime } ( x ) u _ { 1 } ^ { \\prime } ( x ) + B ^ { \\prime } ( x ) u _ { 2 } ^ { \\prime } ( x )&amp;=f(x)<br>\\end{aligned}<br>$$</p><p>\b\b解得：<br>$$A’(x)=-\\frac{1}{W}u_2(x)f(x),\\, B’(x)=\\frac{1}{W}u_1(x)f(x)$$<br>即：<br>$$A(x)=\\int_0^x-\\frac{1}{W}u_2(t)f(t)dt+C_1,\\, B(x)=\\int_0^x\\frac{1}{W}u_1(t)f(t)dt+C_2$$</p><p>其中\b$W$表示朗斯基行列式：</p><p>$$W(x)=\\left|\\begin{array}{cc}<br>u_1(x) &amp; u_2(x) \\\\<br>u_1’(x) &amp; u_2’(x)<br>\\end{array}\\right| $$</p><p>$$\b\\therefore y=C_1 u_1(x)+C_2u_2(x)+\\int_0^x\\frac{u_1(t)u_2(x)-u_2(t)u_1(x)}{W}f(t)dt$$</p><h4 id=\"非齐次微分方程解的物理意义\"><a href=\"#非齐次微分方程解的物理意义\" class=\"headerlink\" title=\"非齐次微分方程解的物理意义\"></a>非齐次微分方程解的物理意义</h4><p>\b\b<br>\b\b设某个线性系统满足线性微分方程$\\frac{d^2 x}{dt^2}+w^2x=f$，比如受驱弹簧谐振子。第一项表示谐振子的加速度，第二项表示\b弹簧拉伸的张力，右项表示单位质量受作用的外力。</p><p>我们考虑\b\b某$\\tau$时刻到$\\tau+d \\tau$时刻的情况，外力从$\\tau$时刻开始作用到$\\tau+d \\tau$时刻结束。在这个极短的时间里，谐振子\b没有来得及产生位移，所以有：<br>$$x^{(\\tau)}|_{t=\\tau+d \\tau}=0$$<br>而\b\b根据冲量定理有，\b单位质量谐振子动量的变化等于该时间间隔内外力的冲量，有:</p><p>$$<br>x_t^{(\\tau)}|_{t=\\tau+d \\tau}-x_t^{(\\tau)}|_{t=\\tau}=f(\\tau) d \\tau<br>$$<br>注意到在\b$\\tau $外力刚开始作用，没有使动量(速度)产生变化，所以$x_t^{(\\tau)}|_{t=\\tau}=0$,所以有：<br>$$<br>x_t^{(\\tau)}|_{t=\\tau+d \\tau}=f(\\tau) d \\tau<br>$$</p><p>综上对于二阶非齐次线性系统$\\frac{d^2 x}{dt^2}+w^2x=f$的求解，可以\b转化为\b求解齐次方程，满足：<br>$$\\frac{d^2 x^{(\\tau)}}{dt^2}+w^2x^{(\\tau)}=0,\\,x^{(\\tau)}(\\tau+d\\tau)=0,\\,\\frac{dx^{(\\tau)}}{dt}{\\Bigg|}_{\\tau+d\\tau}=f(\\tau)d\\tau$$</p><p>记$x^{(\\tau)}(t)=u(t,\\tau)d\\tau$,则:</p><p>$$x(t)=\\int_0^t u(t,\\tau)d\\tau$$</p><p>\b其中$u(t,\\tau)$满足：</p><p>$$\\frac{d^2 u}{dt^2}+w^2u=0,\\,u(\\tau)=0,\\,u’(\\tau)=f(\\tau)$$</p><p>该公式称为冲量定理。</p><blockquote><p>冲量定理在求解线性系统中有广泛应用，无论是常微分方程还是偏微分方程。</p></blockquote><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 18:59:13 GMT+0800 (CST) --><p>\b高数中在求解形如$y’’+py’+q=f(x)$的二阶常系数非齐次线性微分方程的时候，是分成各种情况，然后按照各种情况给出解的形式，高数书中都有讲到，这里不再赘述。可参考<a href=\"https://wenku.baidu.com/view/1ff60dd233d4b14e8524687a.html\" target=\"_blank\" rel=\"noopener\">链接</a>。</p><p>\b\b这种机械记忆太困难了，\b然后我找找找就找到了求解\b该方程的一般方法——<a href=\"https://en.wikipedia.org/wiki/Variation_of_parameters\" target=\"_blank\" rel=\"noopener\">常数变易法</a>。</p><p>\b\b\b\b常数变易法应该是个很熟悉的名词，在高数课本上推导一阶非齐次常系数线性微分方程的求解公式的时候就是用的该方法。在一般的高阶非齐次线性微分方程上，该方法同样适用。</p><h4 id=\"一阶非齐次线性微分方程\"><a href=\"#一阶非齐次线性微分方程\" class=\"headerlink\" title=\"一阶非齐次线性微分方程\"></a>一阶非齐次线性微分方程</h4><p>\b对于一阶齐次线性微分方程$y’ + p(x)y = 0$，可以直接通过分离变量，直接积分得到通解：</p><p>$$\b\\begin{aligned}<br>\\frac{dy}{dx} + p(x)y = 0&amp;\\Rightarrow \\frac{dy}{y}=-p(x)dx<br>\\\\&amp;\\Rightarrow \\ln |y| =\\int-p(x)dx<br>\\\\&amp;\\Rightarrow y = C_0 e^{\\int-p(x)dx}<br>\\end{aligned}$$</p><p>而求解一阶非齐次线性微分方程$y’ + p(x)y = q(x)$，我们知道非齐次线性微分方程的通解=齐次方程的通解+非齐次方程的一个特解，我们只需将齐次方程通解的常系数$C_0$改成关于$x$的函数$C(x)$来求解非齐次方程的一个特解。</p><p>设非齐次方程的一个特解为$y$，齐次方程的通解为$y_c$，非齐次方程的一个特解为$y_p$，有：</p><p>\b$$y=y_c+y_p,,\\quad y_c = C_0 e^{\\int-p(x)dx},\\quad y_p=C(x)e^{\\int-p(x)dx}$$</p><p>下面\b计算\b$C(x)$:</p><p>将$y_p=C(x)e^{\\int-p(x)dx}$代入微分方程$y’ + p(x)y = q(x)$有:</p><p>$$\b\\begin{align}<br>C ^ { \\prime } &amp;( x ) e ^ { - \\int p ( x ) d x } - C ( x ) p ( x ) e ^ { - \\int p ( x ) d x } + p ( x ) C ( x ) e ^ { - \\int p ( x ) d x } = q ( x )\\\\ \\Rightarrow &amp;C ^ { \\prime } ( x ) = e ^ { \\int p ( x ) d x } q ( x )<br>\\\\ \\Rightarrow &amp;C ( x ) = \\int e ^ { \\int p ( x ) d x } q ( x ) dx + C_1<br>\\\\<br>\\end{align}$$</p><p>$$\\therefore y=y_c+y_p= e ^ { - \\int p ( x ) d x }\\Big(C _ { 0 } + \\int q ( x ) e ^ { \\int p ( x ) d x } d x\\Big)$$</p><h4 id=\"二阶非齐次线性微分方程\"><a href=\"#二阶非齐次线性微分方程\" class=\"headerlink\" title=\"二阶非齐次线性微分方程\"></a>二阶非齐次线性微分方程</h4><p>二阶齐次线性微分方程的通解形式为$y=C_1 u_1(x)+C_2 u_2(x)$，这里不赘述具体形式。和一阶非齐次方程求解一样的过程，我们使用常数变易法求二阶非齐次方程$y’’+p(x)y’+q(x)y=f(x)$的一个特解。</p><p>令$y_p=A(x) u_1(x)+B(x) u_2(x)$，注意到这里有两个未知量$A(x),B(x)$，需要两个方程才能求解出，注意到对于齐次方程$A(x),B(x)$均为常数，所以我们添加另一个条件为$0=A’(x) u_1(x)+B’(x) u_2(x)$。</p><p>将$y_p=A(x) u_1(x)+B(x) u_2(x)$代入微分方程有：</p><p>$\b$<br>\\begin{align}y’&amp;=A’(x) u_1(x)+B’(x) u_2(x)+A(x) u_1’(x)+B(x)u_2’(x)\b<br>\\\\&amp;=A(x) u_1’(x)+B(x)u_2’(x)<br>\\\\y’’&amp;=\bA’(x) u_1’(x)+B’(x)u_2’(x)+A(x) u_1’’(x)+B(x)u_2’’(x)\\end{align}<br>$$</p><p>$$\\begin{align}\\therefore y’’+py’+qy&amp;=A ( x ) (u _ { 1 }’’ +pu _ { 1 }’ +qu _ { 1 }) + B ( x ) (u _ { 2 }’’ +pu _ { 2 }’ +qu _ { 2 }) \\\\&amp;\\quad+ A ^ { \\prime } ( x ) u _ { 1 } ^ { \\prime } ( x ) + B ^ { \\prime } ( x ) u _ { 2 } ^ { \\prime } ( x )\\\\<br>&amp;=A ^ { \\prime } ( x ) u _ { 1 } ^ { \\prime } ( x ) + B ^ { \\prime } ( x ) u _ { 2 } ^ { \\prime } ( x )\\\\&amp;=f(x)\\end{align}$$</p><p>$\\therefore$我们得到</p><p>$$<br>\\begin{aligned}<br>A ^ { \\prime } ( x ) u _ { 1 } ( x ) + B ^ { \\prime } ( x ) u _ { 2 } (x)&amp;=0<br>\\\\A ^ { \\prime } ( x ) u _ { 1 } ^ { \\prime } ( x ) + B ^ { \\prime } ( x ) u _ { 2 } ^ { \\prime } ( x )&amp;=f(x)<br>\\end{aligned}<br>$$</p><p>\b\b解得：<br>$$A’(x)=-\\frac{1}{W}u_2(x)f(x),\\, B’(x)=\\frac{1}{W}u_1(x)f(x)$$<br>即：<br>$$A(x)=\\int_0^x-\\frac{1}{W}u_2(t)f(t)dt+C_1,\\, B(x)=\\int_0^x\\frac{1}{W}u_1(t)f(t)dt+C_2$$</p><p>其中\b$W$表示朗斯基行列式：</p><p>$$W(x)=\\left|\\begin{array}{cc}<br>u_1(x) &amp; u_2(x) \\\\<br>u_1’(x) &amp; u_2’(x)<br>\\end{array}\\right| $$</p><p>$$\b\\therefore y=C_1 u_1(x)+C_2u_2(x)+\\int_0^x\\frac{u_1(t)u_2(x)-u_2(t)u_1(x)}{W}f(t)dt$$</p><h4 id=\"非齐次微分方程解的物理意义\"><a href=\"#非齐次微分方程解的物理意义\" class=\"headerlink\" title=\"非齐次微分方程解的物理意义\"></a>非齐次微分方程解的物理意义</h4><p>\b\b<br>\b\b设某个线性系统满足线性微分方程$\\frac{d^2 x}{dt^2}+w^2x=f$，比如受驱弹簧谐振子。第一项表示谐振子的加速度，第二项表示\b弹簧拉伸的张力，右项表示单位质量受作用的外力。</p><p>我们考虑\b\b某$\\tau$时刻到$\\tau+d \\tau$时刻的情况，外力从$\\tau$时刻开始作用到$\\tau+d \\tau$时刻结束。在这个极短的时间里，谐振子\b没有来得及产生位移，所以有：<br>$$x^{(\\tau)}|_{t=\\tau+d \\tau}=0$$<br>而\b\b根据冲量定理有，\b单位质量谐振子动量的变化等于该时间间隔内外力的冲量，有:</p><p>$$<br>x_t^{(\\tau)}|_{t=\\tau+d \\tau}-x_t^{(\\tau)}|_{t=\\tau}=f(\\tau) d \\tau<br>$$<br>注意到在\b$\\tau $外力刚开始作用，没有使动量(速度)产生变化，所以$x_t^{(\\tau)}|_{t=\\tau}=0$,所以有：<br>$$<br>x_t^{(\\tau)}|_{t=\\tau+d \\tau}=f(\\tau) d \\tau<br>$$</p><p>综上对于二阶非齐次线性系统$\\frac{d^2 x}{dt^2}+w^2x=f$的求解，可以\b转化为\b求解齐次方程，满足：<br>$$\\frac{d^2 x^{(\\tau)}}{dt^2}+w^2x^{(\\tau)}=0,\\,x^{(\\tau)}(\\tau+d\\tau)=0,\\,\\frac{dx^{(\\tau)}}{dt}{\\Bigg|}_{\\tau+d\\tau}=f(\\tau)d\\tau$$</p><p>记$x^{(\\tau)}(t)=u(t,\\tau)d\\tau$,则:</p><p>$$x(t)=\\int_0^t u(t,\\tau)d\\tau$$</p><p>\b其中$u(t,\\tau)$满足：</p><p>$$\\frac{d^2 u}{dt^2}+w^2u=0,\\,u(\\tau)=0,\\,u’(\\tau)=f(\\tau)$$</p><p>该公式称为冲量定理。</p><blockquote><p>冲量定理在求解线性系统中有广泛应用，无论是常微分方程还是偏微分方程。</p></blockquote><hr><!-- rebuild by neat -->"},{"title":"无理数小数部分的稠密性","abbrlink":58919,"date":"2018-09-23T12:28:11.000Z","_content":"\n引理: $s·k$ 的小数部分在区间$[0,1]$上稠密，其中$s$为无理数，$k$为整数。\n$prove:$即证明对任意正整数$m$，存在整数k使得 0 &#60; &#123; $ks$ &#125; &#60; $\\frac {1} {m} $。将\\[0,1\\]区间分成m份$\\[0,\\frac{1}{m}\\)$，$\\[\\frac{1}{m},\\frac{2}{m}\\)$ ，$\\cdots$，$\\[\\frac{m-1}{m},1\\]$，由抽屉原理可知，对于序列 &#123; &#123; $ts$ &#125; &#125; ,$(t=1,2,\\cdots,m+1)$至少存在两者位于同一个小段区间内，假设为&#123; $ps$ &#125;,  &#123; $qs$ &#125;，即0 &#60; &#123;$ps$&#125; $-$ &#123;$qs$&#125; &#60; $\\frac{1}{m}$.取$k=p-q$即可。\n\n问题：证明$\\lim \\limits_{x\\rightarrow0^+} \\frac{1}{x}-\\lfloor \\frac{1}{x} \\rfloor$极限不存在。\n\n$prove:$设$s$为无理数，$k$为正整数$(k=1,2,\\cdots,n,\\cdots)$。取$x=\\frac{1}{ks}$，由引理知序列&#123; $ks$$-$$\\lfloor$ $ks$ $\\rfloor$ &#125;在$[0,1]$内稠密，故序列&#123; $ks$$-$$\\lfloor$ $ks$ $\\rfloor$ &#125;极限不存在，即$x\\rightarrow 0^+ $时，存在子列&#123; $ks$$-$$\\lfloor$ $ks$ $\\rfloor$ &#125;，极限不存在，即$\\lim \\limits_{x\\rightarrow0^+} \\frac{1}{x}-\\lfloor \\frac{1}{x} \\rfloor$极限不存在。\n\n---\n","source":"_posts/一道数学证明题.md","raw":"---\ntitle: 无理数小数部分的稠密性\ncategories: 数学\ntags:\n  - 无理数\n  - 稠密性\nabbrlink: 58919\ndate: 2018-09-23 20:28:11\n---\n\n引理: $s·k$ 的小数部分在区间$[0,1]$上稠密，其中$s$为无理数，$k$为整数。\n$prove:$即证明对任意正整数$m$，存在整数k使得 0 &#60; &#123; $ks$ &#125; &#60; $\\frac {1} {m} $。将\\[0,1\\]区间分成m份$\\[0,\\frac{1}{m}\\)$，$\\[\\frac{1}{m},\\frac{2}{m}\\)$ ，$\\cdots$，$\\[\\frac{m-1}{m},1\\]$，由抽屉原理可知，对于序列 &#123; &#123; $ts$ &#125; &#125; ,$(t=1,2,\\cdots,m+1)$至少存在两者位于同一个小段区间内，假设为&#123; $ps$ &#125;,  &#123; $qs$ &#125;，即0 &#60; &#123;$ps$&#125; $-$ &#123;$qs$&#125; &#60; $\\frac{1}{m}$.取$k=p-q$即可。\n\n问题：证明$\\lim \\limits_{x\\rightarrow0^+} \\frac{1}{x}-\\lfloor \\frac{1}{x} \\rfloor$极限不存在。\n\n$prove:$设$s$为无理数，$k$为正整数$(k=1,2,\\cdots,n,\\cdots)$。取$x=\\frac{1}{ks}$，由引理知序列&#123; $ks$$-$$\\lfloor$ $ks$ $\\rfloor$ &#125;在$[0,1]$内稠密，故序列&#123; $ks$$-$$\\lfloor$ $ks$ $\\rfloor$ &#125;极限不存在，即$x\\rightarrow 0^+ $时，存在子列&#123; $ks$$-$$\\lfloor$ $ks$ $\\rfloor$ &#125;，极限不存在，即$\\lim \\limits_{x\\rightarrow0^+} \\frac{1}{x}-\\lfloor \\frac{1}{x} \\rfloor$极限不存在。\n\n---\n","slug":"一道数学证明题","published":1,"updated":"2018-09-27T07:17:05.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq9a4s0n000j3t9kyxs6npch","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><p>引理: $s·k$ 的小数部分在区间$[0,1]$上稠密，其中$s$为无理数，$k$为整数。<br>$prove:$即证明对任意正整数$m$，存在整数k使得 0 &#60; &#123; $ks$ &#125; &#60; $\\frac {1} {m} $。将[0,1]区间分成m份$[0,\\frac{1}{m})$，$[\\frac{1}{m},\\frac{2}{m})$ ，$\\cdots$，$[\\frac{m-1}{m},1]$，由抽屉原理可知，对于序列 &#123; &#123; $ts$ &#125; &#125; ,$(t=1,2,\\cdots,m+1)$至少存在两者位于同一个小段区间内，假设为&#123; $ps$ &#125;, &#123; $qs$ &#125;，即0 &#60; &#123;$ps$&#125; $-$ &#123;$qs$&#125; &#60; $\\frac{1}{m}$.取$k=p-q$即可。</p><p>问题：证明$\\lim \\limits_{x\\rightarrow0^+} \\frac{1}{x}-\\lfloor \\frac{1}{x} \\rfloor$极限不存在。</p><p>$prove:$设$s$为无理数，$k$为正整数$(k=1,2,\\cdots,n,\\cdots)$。取$x=\\frac{1}{ks}$，由引理知序列&#123; $ks$$-$$\\lfloor$ $ks$ $\\rfloor$ &#125;在$[0,1]$内稠密，故序列&#123; $ks$$-$$\\lfloor$ $ks$ $\\rfloor$ &#125;极限不存在，即$x\\rightarrow 0^+ $时，存在子列&#123; $ks$$-$$\\lfloor$ $ks$ $\\rfloor$ &#125;，极限不存在，即$\\lim \\limits_{x\\rightarrow0^+} \\frac{1}{x}-\\lfloor \\frac{1}{x} \\rfloor$极限不存在。</p><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><p>引理: $s·k$ 的小数部分在区间$[0,1]$上稠密，其中$s$为无理数，$k$为整数。<br>$prove:$即证明对任意正整数$m$，存在整数k使得 0 &#60; &#123; $ks$ &#125; &#60; $\\frac {1} {m} $。将[0,1]区间分成m份$[0,\\frac{1}{m})$，$[\\frac{1}{m},\\frac{2}{m})$ ，$\\cdots$，$[\\frac{m-1}{m},1]$，由抽屉原理可知，对于序列 &#123; &#123; $ts$ &#125; &#125; ,$(t=1,2,\\cdots,m+1)$至少存在两者位于同一个小段区间内，假设为&#123; $ps$ &#125;, &#123; $qs$ &#125;，即0 &#60; &#123;$ps$&#125; $-$ &#123;$qs$&#125; &#60; $\\frac{1}{m}$.取$k=p-q$即可。</p><p>问题：证明$\\lim \\limits_{x\\rightarrow0^+} \\frac{1}{x}-\\lfloor \\frac{1}{x} \\rfloor$极限不存在。</p><p>$prove:$设$s$为无理数，$k$为正整数$(k=1,2,\\cdots,n,\\cdots)$。取$x=\\frac{1}{ks}$，由引理知序列&#123; $ks$$-$$\\lfloor$ $ks$ $\\rfloor$ &#125;在$[0,1]$内稠密，故序列&#123; $ks$$-$$\\lfloor$ $ks$ $\\rfloor$ &#125;极限不存在，即$x\\rightarrow 0^+ $时，存在子列&#123; $ks$$-$$\\lfloor$ $ks$ $\\rfloor$ &#125;，极限不存在，即$\\lim \\limits_{x\\rightarrow0^+} \\frac{1}{x}-\\lfloor \\frac{1}{x} \\rfloor$极限不存在。</p><hr><!-- rebuild by neat -->"},{"title":"变限积分的导数与雷诺运输定理","abbrlink":20372,"date":"2018-09-26T15:40:51.000Z","_content":"\n\n变限积分求导，我是这么俗称这个公式的，维基百科称为[积分符号内取微分](https://en.wikipedia.org/wiki/Differentiation_under_the_integral_sign)\n\n$$\n\\dfrac{d}{dt}\\int\\limits_{\\alpha(t)}^{\\beta(t)} f(x,t)dx=\\int\\limits_{\\alpha(t)}^{\\beta(t)} \\frac{\\partial f(x,t)}{\\partial t}dx+\\beta^{\\prime}(t)f(\\beta(t),t)-\\alpha^{\\prime}(t)f(\\alpha(t),t)\n$$\n\n最开始是搞数学竞赛的时候看别的大神炫技学会的，然后看了[微积分学教程](https://book.douban.com/subject/1728600/)又巩固了一遍，一般数学分析书都有证明。这个公式在《[别闹了，费曼](https://spaces.ac.cn/archives/1615)》中也有介绍。\n\b变限积分求导公式是个很一般的公式，这里提到它是因为在复习**雷诺运输定理**的时候发现了他两之间的联系——雷诺运输定理也就是变限积分求导公式的三维情况。\n\n**雷诺运输定理：**\n\n对于随时间变化的区域$\\Omega (t)$，其边界为$\\partial \\Omega (t)$，该区域内对$\\boldsymbol{f}=\\boldsymbol{f}(x,t)$的\b积分的导数为：\n$$\n\\dfrac{d}{dt} \\big( \\int _{\\Omega (t)} \\boldsymbol{f}\\,{dV} \\big) =\\int _{\\Omega (t)} {\\frac{\\partial \\boldsymbol{f}}{\\partial t}}\\,{dV}+\\int _{\\partial \\Omega (t)} ({\\vec  {v}} \\cdot {\\vec  {n}} ) \\boldsymbol{f}\\, {dA} .\n$$\n\n\b\n\n---\n","source":"_posts/变限积分的导数与雷诺运输定理.md","raw":"---\ntitle: 变限积分的导数与雷诺运输定理\ncategories: 数学\ntags:\n  - 导数\n  - 积分\nabbrlink: 20372\ndate: 2018-09-26 23:40:51\n---\n\n\n变限积分求导，我是这么俗称这个公式的，维基百科称为[积分符号内取微分](https://en.wikipedia.org/wiki/Differentiation_under_the_integral_sign)\n\n$$\n\\dfrac{d}{dt}\\int\\limits_{\\alpha(t)}^{\\beta(t)} f(x,t)dx=\\int\\limits_{\\alpha(t)}^{\\beta(t)} \\frac{\\partial f(x,t)}{\\partial t}dx+\\beta^{\\prime}(t)f(\\beta(t),t)-\\alpha^{\\prime}(t)f(\\alpha(t),t)\n$$\n\n最开始是搞数学竞赛的时候看别的大神炫技学会的，然后看了[微积分学教程](https://book.douban.com/subject/1728600/)又巩固了一遍，一般数学分析书都有证明。这个公式在《[别闹了，费曼](https://spaces.ac.cn/archives/1615)》中也有介绍。\n\b变限积分求导公式是个很一般的公式，这里提到它是因为在复习**雷诺运输定理**的时候发现了他两之间的联系——雷诺运输定理也就是变限积分求导公式的三维情况。\n\n**雷诺运输定理：**\n\n对于随时间变化的区域$\\Omega (t)$，其边界为$\\partial \\Omega (t)$，该区域内对$\\boldsymbol{f}=\\boldsymbol{f}(x,t)$的\b积分的导数为：\n$$\n\\dfrac{d}{dt} \\big( \\int _{\\Omega (t)} \\boldsymbol{f}\\,{dV} \\big) =\\int _{\\Omega (t)} {\\frac{\\partial \\boldsymbol{f}}{\\partial t}}\\,{dV}+\\int _{\\partial \\Omega (t)} ({\\vec  {v}} \\cdot {\\vec  {n}} ) \\boldsymbol{f}\\, {dA} .\n$$\n\n\b\n\n---\n","slug":"变限积分的导数与雷诺运输定理","published":1,"updated":"2018-09-27T11:01:49.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq9a4s0p000k3t9k52fpds8c","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><p>变限积分求导，我是这么俗称这个公式的，维基百科称为<a href=\"https://en.wikipedia.org/wiki/Differentiation_under_the_integral_sign\" target=\"_blank\" rel=\"noopener\">积分符号内取微分</a></p><p>$$<br>\\dfrac{d}{dt}\\int\\limits_{\\alpha(t)}^{\\beta(t)} f(x,t)dx=\\int\\limits_{\\alpha(t)}^{\\beta(t)} \\frac{\\partial f(x,t)}{\\partial t}dx+\\beta^{\\prime}(t)f(\\beta(t),t)-\\alpha^{\\prime}(t)f(\\alpha(t),t)<br>$$</p><p>最开始是搞数学竞赛的时候看别的大神炫技学会的，然后看了<a href=\"https://book.douban.com/subject/1728600/\" target=\"_blank\" rel=\"noopener\">微积分学教程</a>又巩固了一遍，一般数学分析书都有证明。这个公式在《<a href=\"https://spaces.ac.cn/archives/1615\" target=\"_blank\" rel=\"noopener\">别闹了，费曼</a>》中也有介绍。<br>\b变限积分求导公式是个很一般的公式，这里提到它是因为在复习<strong>雷诺运输定理</strong>的时候发现了他两之间的联系——雷诺运输定理也就是变限积分求导公式的三维情况。</p><p><strong>雷诺运输定理：</strong></p><p>对于随时间变化的区域$\\Omega (t)$，其边界为$\\partial \\Omega (t)$，该区域内对$\\boldsymbol{f}=\\boldsymbol{f}(x,t)$的\b积分的导数为：<br>$$<br>\\dfrac{d}{dt} \\big( \\int _{\\Omega (t)} \\boldsymbol{f}\\,{dV} \\big) =\\int _{\\Omega (t)} {\\frac{\\partial \\boldsymbol{f}}{\\partial t}}\\,{dV}+\\int _{\\partial \\Omega (t)} ({\\vec {v}} \\cdot {\\vec {n}} ) \\boldsymbol{f}\\, {dA} .<br>$$</p><p>\b</p><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><p>变限积分求导，我是这么俗称这个公式的，维基百科称为<a href=\"https://en.wikipedia.org/wiki/Differentiation_under_the_integral_sign\" target=\"_blank\" rel=\"noopener\">积分符号内取微分</a></p><p>$$<br>\\dfrac{d}{dt}\\int\\limits_{\\alpha(t)}^{\\beta(t)} f(x,t)dx=\\int\\limits_{\\alpha(t)}^{\\beta(t)} \\frac{\\partial f(x,t)}{\\partial t}dx+\\beta^{\\prime}(t)f(\\beta(t),t)-\\alpha^{\\prime}(t)f(\\alpha(t),t)<br>$$</p><p>最开始是搞数学竞赛的时候看别的大神炫技学会的，然后看了<a href=\"https://book.douban.com/subject/1728600/\" target=\"_blank\" rel=\"noopener\">微积分学教程</a>又巩固了一遍，一般数学分析书都有证明。这个公式在《<a href=\"https://spaces.ac.cn/archives/1615\" target=\"_blank\" rel=\"noopener\">别闹了，费曼</a>》中也有介绍。<br>\b变限积分求导公式是个很一般的公式，这里提到它是因为在复习<strong>雷诺运输定理</strong>的时候发现了他两之间的联系——雷诺运输定理也就是变限积分求导公式的三维情况。</p><p><strong>雷诺运输定理：</strong></p><p>对于随时间变化的区域$\\Omega (t)$，其边界为$\\partial \\Omega (t)$，该区域内对$\\boldsymbol{f}=\\boldsymbol{f}(x,t)$的\b积分的导数为：<br>$$<br>\\dfrac{d}{dt} \\big( \\int _{\\Omega (t)} \\boldsymbol{f}\\,{dV} \\big) =\\int _{\\Omega (t)} {\\frac{\\partial \\boldsymbol{f}}{\\partial t}}\\,{dV}+\\int _{\\partial \\Omega (t)} ({\\vec {v}} \\cdot {\\vec {n}} ) \\boldsymbol{f}\\, {dA} .<br>$$</p><p>\b</p><hr><!-- rebuild by neat -->"},{"title":"多项式拟合","abbrlink":45428,"date":"2018-10-09T10:04:19.000Z","_content":"\n给定一个训练数据集：\n$$T=\\begin{Bmatrix}(x_1,y_1),(x_2,y_2),\\cdots,(x_N,y_N)\\end{Bmatrix}$$\n其中，$x_i\\in \\mathbb{R}$是输入$x$的观测值，$y_i\\in\\mathbb{R}$是相应的输出$y$的观测值，$i=1,2,\\cdots,N.$多项式拟合需要做的就是在$M$次多项式函数中选择一个对已知数据和未知数据都有很好的预测能\b力的函数。\n\n设$M$次多项式函数为：\n\n$$f_M(x,w)=w_0+w_1 x+w_2 x^2+\\cdots+w_M x^M=\\sum\\limits_{j=0}^{M}w_j x^j$$\n式中$x$是单变量输入，$w_0,w_1,\\cdots,w_M$是$M+1$个参数。\n\n选取平方损失为损失函数：\n\n$$L(w)=\\frac{1}{2}\\sum\\limits_{i=1}^{N}\\bigg(\\sum\\limits_{j=0}^{M}w_j x_{i}^{j}-y_i\\bigg)^2$$\n\n对$w_j$求偏导并令其为$0$可得：\n$$\\frac{\\partial L}{\\partial w_j}=x_1^j (\\sum\\limits_{j=0}^{M}w_j x_1^j -y_1)+x_2^j (\\sum\\limits_{j=0}^{M}w_j x_2^j -y_2)+\\cdots+x_N^j (\\sum\\limits_{j=0}^{M}w_j x_N^j -y_N)=0\\Rightarrow \\\\\\\\\n\\sum\\limits_{j=0}^{M}\\sum\\limits_{i=1}^{N}w_j x_i^j=\\sum\\limits_{i=1}^{N}x_i^j y_i$$\n\n对于$j=0,1,\\cdots,M$可得到如下线性方程组：\n$$\\begin{pmatrix}\n  \\sum\\limits_{i=1}^{N}x_i^0 & \\sum\\limits_{i=1}^{N}x_i^1 & \\cdots & \\sum\\limits_{i=1}^{N}x_i^M \\\\\\\\\n  \\sum\\limits_{i=1}^{N}x_i^1 & \\sum\\limits_{i=1}^{N}x_i^2 & \\cdots & \\sum\\limits_{i=1}^{N}x_i^{M+1} \\\\\\\\\n  \\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n  \\sum\\limits_{i=1}^{N}x_i^M & \\sum\\limits_{i=1}^{N}x_i^{M+1} & \\cdots & \\sum\\limits_{i=1}^{N}x_i^{M+M}\n \\end{pmatrix}\\begin{pmatrix}\n   w_0\\\\\\\\\n   w_1\\\\\\\\\n   \\vdots\\\\\\\\\n   w_M\n  \\end{pmatrix}=\\begin{pmatrix}\n     \\sum\\limits_{i=1}^{N}x_i^0 y_i \\\\\\\\\n    \\sum\\limits_{i=1}^{N}x_i^1 y_i \\\\\\\\\n    \\vdots \\\\\\\\\n    \\sum\\limits_{i=1}^{N}x_i^M y_i\n   \\end{pmatrix}$$\n求解上述方程组即可得到拟合多项式系数 $w_0^{\\ast},w_1^{\\ast},\\cdots,w_M^{\\ast} $\b.\n\npython代码如下：\n\n```python\nimport numpy as np\nN = \b5 #\b\b多项式的阶数\n\ndef getCoefficientMatrix(x,y):\n    global N\n    MeasureNumber = len(x)\n    A = np.zeros((N+1,N+1))\n    B = np.zeros(N+1)\n    for i in range(N+1):\n        for j in range(N+1):\n            for k in range(MeasureNumber):\n                A[i, j] += np.math.pow(x[k], i+j) #生成系数矩阵每个系数，可以改进为先求出0次到2(N+1)次方的\b和，然后一一填入系数矩阵\n        for k in range(MeasureNumber):\n            B[i] += np.math.pow(x[k], i)*y[k]\n    return A, B\n\nA, B = getCoefficientMatrix(x,y)\nOmega = np.linalg.solve(A,B) #线性方程组求解，自己编程实现可以使用推荐使用共轭梯度\n\n```\n\n---\n","source":"_posts/多项式拟合.md","raw":"---\ntitle: 多项式拟合\nabbrlink: 45428\ndate: 2018-10-09 18:04:19\ncategories: 机器学习\ntags: 拟合\n---\n\n给定一个训练数据集：\n$$T=\\begin{Bmatrix}(x_1,y_1),(x_2,y_2),\\cdots,(x_N,y_N)\\end{Bmatrix}$$\n其中，$x_i\\in \\mathbb{R}$是输入$x$的观测值，$y_i\\in\\mathbb{R}$是相应的输出$y$的观测值，$i=1,2,\\cdots,N.$多项式拟合需要做的就是在$M$次多项式函数中选择一个对已知数据和未知数据都有很好的预测能\b力的函数。\n\n设$M$次多项式函数为：\n\n$$f_M(x,w)=w_0+w_1 x+w_2 x^2+\\cdots+w_M x^M=\\sum\\limits_{j=0}^{M}w_j x^j$$\n式中$x$是单变量输入，$w_0,w_1,\\cdots,w_M$是$M+1$个参数。\n\n选取平方损失为损失函数：\n\n$$L(w)=\\frac{1}{2}\\sum\\limits_{i=1}^{N}\\bigg(\\sum\\limits_{j=0}^{M}w_j x_{i}^{j}-y_i\\bigg)^2$$\n\n对$w_j$求偏导并令其为$0$可得：\n$$\\frac{\\partial L}{\\partial w_j}=x_1^j (\\sum\\limits_{j=0}^{M}w_j x_1^j -y_1)+x_2^j (\\sum\\limits_{j=0}^{M}w_j x_2^j -y_2)+\\cdots+x_N^j (\\sum\\limits_{j=0}^{M}w_j x_N^j -y_N)=0\\Rightarrow \\\\\\\\\n\\sum\\limits_{j=0}^{M}\\sum\\limits_{i=1}^{N}w_j x_i^j=\\sum\\limits_{i=1}^{N}x_i^j y_i$$\n\n对于$j=0,1,\\cdots,M$可得到如下线性方程组：\n$$\\begin{pmatrix}\n  \\sum\\limits_{i=1}^{N}x_i^0 & \\sum\\limits_{i=1}^{N}x_i^1 & \\cdots & \\sum\\limits_{i=1}^{N}x_i^M \\\\\\\\\n  \\sum\\limits_{i=1}^{N}x_i^1 & \\sum\\limits_{i=1}^{N}x_i^2 & \\cdots & \\sum\\limits_{i=1}^{N}x_i^{M+1} \\\\\\\\\n  \\vdots & \\vdots & \\ddots & \\vdots \\\\\\\\\n  \\sum\\limits_{i=1}^{N}x_i^M & \\sum\\limits_{i=1}^{N}x_i^{M+1} & \\cdots & \\sum\\limits_{i=1}^{N}x_i^{M+M}\n \\end{pmatrix}\\begin{pmatrix}\n   w_0\\\\\\\\\n   w_1\\\\\\\\\n   \\vdots\\\\\\\\\n   w_M\n  \\end{pmatrix}=\\begin{pmatrix}\n     \\sum\\limits_{i=1}^{N}x_i^0 y_i \\\\\\\\\n    \\sum\\limits_{i=1}^{N}x_i^1 y_i \\\\\\\\\n    \\vdots \\\\\\\\\n    \\sum\\limits_{i=1}^{N}x_i^M y_i\n   \\end{pmatrix}$$\n求解上述方程组即可得到拟合多项式系数 $w_0^{\\ast},w_1^{\\ast},\\cdots,w_M^{\\ast} $\b.\n\npython代码如下：\n\n```python\nimport numpy as np\nN = \b5 #\b\b多项式的阶数\n\ndef getCoefficientMatrix(x,y):\n    global N\n    MeasureNumber = len(x)\n    A = np.zeros((N+1,N+1))\n    B = np.zeros(N+1)\n    for i in range(N+1):\n        for j in range(N+1):\n            for k in range(MeasureNumber):\n                A[i, j] += np.math.pow(x[k], i+j) #生成系数矩阵每个系数，可以改进为先求出0次到2(N+1)次方的\b和，然后一一填入系数矩阵\n        for k in range(MeasureNumber):\n            B[i] += np.math.pow(x[k], i)*y[k]\n    return A, B\n\nA, B = getCoefficientMatrix(x,y)\nOmega = np.linalg.solve(A,B) #线性方程组求解，自己编程实现可以使用推荐使用共轭梯度\n\n```\n\n---\n","slug":"多项式拟合","published":1,"updated":"2018-12-29T11:14:56.628Z","_id":"cjq9a4s0q000o3t9k9u97xcid","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- build time:Sun Dec 30 2018 20:25:52 GMT+0800 (CST) --><p>给定一个训练数据集：<br>$$T=\\begin{Bmatrix}(x_1,y_1),(x_2,y_2),\\cdots,(x_N,y_N)\\end{Bmatrix}$$<br>其中，$x_i\\in \\mathbb{R}$是输入$x$的观测值，$y_i\\in\\mathbb{R}$是相应的输出$y$的观测值，$i=1,2,\\cdots,N.$多项式拟合需要做的就是在$M$次多项式函数中选择一个对已知数据和未知数据都有很好的预测能\b力的函数。</p><p>设$M$次多项式函数为：</p><p>$$f_M(x,w)=w_0+w_1 x+w_2 x^2+\\cdots+w_M x^M=\\sum\\limits_{j=0}^{M}w_j x^j$$<br>式中$x$是单变量输入，$w_0,w_1,\\cdots,w_M$是$M+1$个参数。</p><p>选取平方损失为损失函数：</p><p>$$L(w)=\\frac{1}{2}\\sum\\limits_{i=1}^{N}\\bigg(\\sum\\limits_{j=0}^{M}w_j x_{i}^{j}-y_i\\bigg)^2$$</p><p>对$w_j$求偏导并令其为$0$可得：<br>$$\\frac{\\partial L}{\\partial w_j}=x_1^j (\\sum\\limits_{j=0}^{M}w_j x_1^j -y_1)+x_2^j (\\sum\\limits_{j=0}^{M}w_j x_2^j -y_2)+\\cdots+x_N^j (\\sum\\limits_{j=0}^{M}w_j x_N^j -y_N)=0\\Rightarrow \\\\<br>\\sum\\limits_{j=0}^{M}\\sum\\limits_{i=1}^{N}w_j x_i^j=\\sum\\limits_{i=1}^{N}x_i^j y_i$$</p><p>对于$j=0,1,\\cdots,M$可得到如下线性方程组：<br>$$\\begin{pmatrix}<br>\\sum\\limits_{i=1}^{N}x_i^0 &amp; \\sum\\limits_{i=1}^{N}x_i^1 &amp; \\cdots &amp; \\sum\\limits_{i=1}^{N}x_i^M \\\\<br>\\sum\\limits_{i=1}^{N}x_i^1 &amp; \\sum\\limits_{i=1}^{N}x_i^2 &amp; \\cdots &amp; \\sum\\limits_{i=1}^{N}x_i^{M+1} \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>\\sum\\limits_{i=1}^{N}x_i^M &amp; \\sum\\limits_{i=1}^{N}x_i^{M+1} &amp; \\cdots &amp; \\sum\\limits_{i=1}^{N}x_i^{M+M}<br>\\end{pmatrix}\\begin{pmatrix}<br>w_0\\\\<br>w_1\\\\<br>\\vdots\\\\<br>w_M<br>\\end{pmatrix}=\\begin{pmatrix}<br>\\sum\\limits_{i=1}^{N}x_i^0 y_i \\\\<br>\\sum\\limits_{i=1}^{N}x_i^1 y_i \\\\<br>\\vdots \\\\<br>\\sum\\limits_{i=1}^{N}x_i^M y_i<br>\\end{pmatrix}$$<br>求解上述方程组即可得到拟合多项式系数 $w_0^{\\ast},w_1^{\\ast},\\cdots,w_M^{\\ast} $\b.</p><p>python代码如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">N = \b<span class=\"number\">5</span> <span class=\"comment\">#\b\b多项式的阶数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getCoefficientMatrix</span><span class=\"params\">(x,y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> N</span><br><span class=\"line\">    MeasureNumber = len(x)</span><br><span class=\"line\">    A = np.zeros((N+<span class=\"number\">1</span>,N+<span class=\"number\">1</span>))</span><br><span class=\"line\">    B = np.zeros(N+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(N+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(N+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(MeasureNumber):</span><br><span class=\"line\">                A[i, j] += np.math.pow(x[k], i+j) <span class=\"comment\">#生成系数矩阵每个系数，可以改进为先求出0次到2(N+1)次方的\b和，然后一一填入系数矩阵</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(MeasureNumber):</span><br><span class=\"line\">            B[i] += np.math.pow(x[k], i)*y[k]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A, B</span><br><span class=\"line\"></span><br><span class=\"line\">A, B = getCoefficientMatrix(x,y)</span><br><span class=\"line\">Omega = np.linalg.solve(A,B) <span class=\"comment\">#线性方程组求解，自己编程实现可以使用推荐使用共轭梯度</span></span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sun Dec 30 2018 20:25:52 GMT+0800 (CST) --><p>给定一个训练数据集：<br>$$T=\\begin{Bmatrix}(x_1,y_1),(x_2,y_2),\\cdots,(x_N,y_N)\\end{Bmatrix}$$<br>其中，$x_i\\in \\mathbb{R}$是输入$x$的观测值，$y_i\\in\\mathbb{R}$是相应的输出$y$的观测值，$i=1,2,\\cdots,N.$多项式拟合需要做的就是在$M$次多项式函数中选择一个对已知数据和未知数据都有很好的预测能\b力的函数。</p><p>设$M$次多项式函数为：</p><p>$$f_M(x,w)=w_0+w_1 x+w_2 x^2+\\cdots+w_M x^M=\\sum\\limits_{j=0}^{M}w_j x^j$$<br>式中$x$是单变量输入，$w_0,w_1,\\cdots,w_M$是$M+1$个参数。</p><p>选取平方损失为损失函数：</p><p>$$L(w)=\\frac{1}{2}\\sum\\limits_{i=1}^{N}\\bigg(\\sum\\limits_{j=0}^{M}w_j x_{i}^{j}-y_i\\bigg)^2$$</p><p>对$w_j$求偏导并令其为$0$可得：<br>$$\\frac{\\partial L}{\\partial w_j}=x_1^j (\\sum\\limits_{j=0}^{M}w_j x_1^j -y_1)+x_2^j (\\sum\\limits_{j=0}^{M}w_j x_2^j -y_2)+\\cdots+x_N^j (\\sum\\limits_{j=0}^{M}w_j x_N^j -y_N)=0\\Rightarrow \\\\<br>\\sum\\limits_{j=0}^{M}\\sum\\limits_{i=1}^{N}w_j x_i^j=\\sum\\limits_{i=1}^{N}x_i^j y_i$$</p><p>对于$j=0,1,\\cdots,M$可得到如下线性方程组：<br>$$\\begin{pmatrix}<br>\\sum\\limits_{i=1}^{N}x_i^0 &amp; \\sum\\limits_{i=1}^{N}x_i^1 &amp; \\cdots &amp; \\sum\\limits_{i=1}^{N}x_i^M \\\\<br>\\sum\\limits_{i=1}^{N}x_i^1 &amp; \\sum\\limits_{i=1}^{N}x_i^2 &amp; \\cdots &amp; \\sum\\limits_{i=1}^{N}x_i^{M+1} \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\<br>\\sum\\limits_{i=1}^{N}x_i^M &amp; \\sum\\limits_{i=1}^{N}x_i^{M+1} &amp; \\cdots &amp; \\sum\\limits_{i=1}^{N}x_i^{M+M}<br>\\end{pmatrix}\\begin{pmatrix}<br>w_0\\\\<br>w_1\\\\<br>\\vdots\\\\<br>w_M<br>\\end{pmatrix}=\\begin{pmatrix}<br>\\sum\\limits_{i=1}^{N}x_i^0 y_i \\\\<br>\\sum\\limits_{i=1}^{N}x_i^1 y_i \\\\<br>\\vdots \\\\<br>\\sum\\limits_{i=1}^{N}x_i^M y_i<br>\\end{pmatrix}$$<br>求解上述方程组即可得到拟合多项式系数 $w_0^{\\ast},w_1^{\\ast},\\cdots,w_M^{\\ast} $\b.</p><p>python代码如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">N = \b<span class=\"number\">5</span> <span class=\"comment\">#\b\b多项式的阶数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getCoefficientMatrix</span><span class=\"params\">(x,y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> N</span><br><span class=\"line\">    MeasureNumber = len(x)</span><br><span class=\"line\">    A = np.zeros((N+<span class=\"number\">1</span>,N+<span class=\"number\">1</span>))</span><br><span class=\"line\">    B = np.zeros(N+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(N+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(N+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(MeasureNumber):</span><br><span class=\"line\">                A[i, j] += np.math.pow(x[k], i+j) <span class=\"comment\">#生成系数矩阵每个系数，可以改进为先求出0次到2(N+1)次方的\b和，然后一一填入系数矩阵</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(MeasureNumber):</span><br><span class=\"line\">            B[i] += np.math.pow(x[k], i)*y[k]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A, B</span><br><span class=\"line\"></span><br><span class=\"line\">A, B = getCoefficientMatrix(x,y)</span><br><span class=\"line\">Omega = np.linalg.solve(A,B) <span class=\"comment\">#线性方程组求解，自己编程实现可以使用推荐使用共轭梯度</span></span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->"},{"title":"正定矩阵的cholesky分解","abbrlink":56208,"date":"2018-10-12T02:27:00.000Z","_content":"\n### 正定矩阵的cholesky分解\n由于正定矩阵的主子式均大于零，可得正定矩阵的顺序主子式均大于零，所以正定矩阵$\\boldsymbol A$有唯一的$\\boldsymbol{LDU}$分解，即：\n$$\n\\boldsymbol A = \\boldsymbol{LDU}$$\n这里$\\boldsymbol L$为单位下三角矩阵，$\\boldsymbol U$为单位上三角矩阵，$\\boldsymbol D$为对角矩阵。又$\\boldsymbol A$是对称矩阵，故：\n$$\n\\boldsymbol A = \\boldsymbol A^T=(\\boldsymbol{LDU})^T=\\boldsymbol U^T \\boldsymbol D \\boldsymbol L^T$$\n\n根据$\\boldsymbol{LDU}$分解的唯一性得\n$$\n\\boldsymbol U=\\boldsymbol L^T$$\n故正定矩阵$\\boldsymbol A$有分解式\n$$\\boldsymbol A = \\boldsymbol L \\boldsymbol D \\boldsymbol L^T$$\n这里$\\boldsymbol L$的对角元素皆为1.记\n$$\\boldsymbol D = diag(d_1,d_2,\\cdots,d_n)$$\n由$\\boldsymbol A$的正定性可得\n$$d_i>0,i=1,2,\\cdots,n$$\n若记\n$$D^{\\frac{1}{2}}=diag(\\sqrt{d_1},\\sqrt{d_2},\\cdots,\\sqrt{d_n})$$\n则\n$$\\boldsymbol A = \\boldsymbol L\\boldsymbol D^{\\frac{1}{2}}\\boldsymbol D^{\\frac{1}{2}}\\boldsymbol L^T=(\\boldsymbol L\\boldsymbol D^{\\frac{1}{2}})(\\boldsymbol L\\boldsymbol D^{\\frac{1}{2}})^T=\\widetilde{\\boldsymbol L} \\widetilde{\\boldsymbol L}^T$$\n这里$\\widetilde{\\boldsymbol L}=\\boldsymbol L \\boldsymbol D^{\\frac{1}{2}}$是下三角矩阵，其对角元素皆为正数，则这种分解也是唯一的。称之为正定矩阵的Cholesky分解。\n#### 计算公式\n由\n$$\\boldsymbol A = \\begin{pmatrix}a_{11} & a_{12} & \\cdots & a_{1n}\\\\\\\\\na_{21} & a_{22} & \\cdots & a_{2n}\\\\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots\\\\\\\\\\\na_{n1} & a_{n2} & \\cdots & a_{nn}\\end{pmatrix}=\\begin{pmatrix}l_{11} &  &  & \\\\\\\\\nl_{21} & l_{22} &  & \\\\\\\\\\\n\\vdots & \\vdots & \\ddots & \\\\\\\\\\\nl_{n1} & l_{n2} & \\cdots & l_{nn}\\end{pmatrix}\\begin{pmatrix}l_{11} & l_{21} & \\cdots & l_{n1}\\\\\\\\\n & l_{22} & \\cdots & l_{n2}\\\\\\\\\\\n &  & \\ddots & \\vdots \\\\\\\\\\\n &  &  & l_{nn}\\end{pmatrix}=\\boldsymbol L \\boldsymbol L^T$$\n\n 矩阵对应每项相等可以得到矩阵$\\boldsymbol L$的各项计算公式：\n $$\n a_{ik}=\\sum\\limits_{s=1}^{k-1}l_{is}l_{ks}+l_{kk}^2$$\n 所以：\n $$l_{kk}=\\sqrt{a_{kk}-\\sum\\limits_{s=1}^{k-1}l_{ks}^2}\\\\\\\\\n l_{ik}=\\frac{a_{ik}-\\sum\\limits_{s=1}^{k-1}l_{is}l_{ks}}{l_{kk}},\\quad i=k+1,\\cdots,n$$\n\npython代码如下：\n\n```python\ndef chollt(A):\n    EPSILON = 1e-8\n    DIM = len(A)\n    for k in range(DIM):\n        for i in range(k, DIM):\n            for j in range(k):\n                A[i, k] = A[i, k] - A[i, j] * A[k, j]\n        if np.fabs(A[k, k]) < EPSILON:\n            return 1\n        A[k, k] = np.math.sqrt(A[k, k])\n        for i in range(k+1, DIM):\n            A[i, k] = A[i, k] / A[k, k]\n    return 0\n```\n\n---\n","source":"_posts/正定矩阵的cholesky分解.md","raw":"---\ntitle: 正定矩阵的cholesky分解\nabbrlink: 56208\ndate: 2018-10-12 10:27:00\ncategories: 数学\ntags: 矩阵与数值分析\n---\n\n### 正定矩阵的cholesky分解\n由于正定矩阵的主子式均大于零，可得正定矩阵的顺序主子式均大于零，所以正定矩阵$\\boldsymbol A$有唯一的$\\boldsymbol{LDU}$分解，即：\n$$\n\\boldsymbol A = \\boldsymbol{LDU}$$\n这里$\\boldsymbol L$为单位下三角矩阵，$\\boldsymbol U$为单位上三角矩阵，$\\boldsymbol D$为对角矩阵。又$\\boldsymbol A$是对称矩阵，故：\n$$\n\\boldsymbol A = \\boldsymbol A^T=(\\boldsymbol{LDU})^T=\\boldsymbol U^T \\boldsymbol D \\boldsymbol L^T$$\n\n根据$\\boldsymbol{LDU}$分解的唯一性得\n$$\n\\boldsymbol U=\\boldsymbol L^T$$\n故正定矩阵$\\boldsymbol A$有分解式\n$$\\boldsymbol A = \\boldsymbol L \\boldsymbol D \\boldsymbol L^T$$\n这里$\\boldsymbol L$的对角元素皆为1.记\n$$\\boldsymbol D = diag(d_1,d_2,\\cdots,d_n)$$\n由$\\boldsymbol A$的正定性可得\n$$d_i>0,i=1,2,\\cdots,n$$\n若记\n$$D^{\\frac{1}{2}}=diag(\\sqrt{d_1},\\sqrt{d_2},\\cdots,\\sqrt{d_n})$$\n则\n$$\\boldsymbol A = \\boldsymbol L\\boldsymbol D^{\\frac{1}{2}}\\boldsymbol D^{\\frac{1}{2}}\\boldsymbol L^T=(\\boldsymbol L\\boldsymbol D^{\\frac{1}{2}})(\\boldsymbol L\\boldsymbol D^{\\frac{1}{2}})^T=\\widetilde{\\boldsymbol L} \\widetilde{\\boldsymbol L}^T$$\n这里$\\widetilde{\\boldsymbol L}=\\boldsymbol L \\boldsymbol D^{\\frac{1}{2}}$是下三角矩阵，其对角元素皆为正数，则这种分解也是唯一的。称之为正定矩阵的Cholesky分解。\n#### 计算公式\n由\n$$\\boldsymbol A = \\begin{pmatrix}a_{11} & a_{12} & \\cdots & a_{1n}\\\\\\\\\na_{21} & a_{22} & \\cdots & a_{2n}\\\\\\\\\\\n\\vdots & \\vdots & \\ddots & \\vdots\\\\\\\\\\\na_{n1} & a_{n2} & \\cdots & a_{nn}\\end{pmatrix}=\\begin{pmatrix}l_{11} &  &  & \\\\\\\\\nl_{21} & l_{22} &  & \\\\\\\\\\\n\\vdots & \\vdots & \\ddots & \\\\\\\\\\\nl_{n1} & l_{n2} & \\cdots & l_{nn}\\end{pmatrix}\\begin{pmatrix}l_{11} & l_{21} & \\cdots & l_{n1}\\\\\\\\\n & l_{22} & \\cdots & l_{n2}\\\\\\\\\\\n &  & \\ddots & \\vdots \\\\\\\\\\\n &  &  & l_{nn}\\end{pmatrix}=\\boldsymbol L \\boldsymbol L^T$$\n\n 矩阵对应每项相等可以得到矩阵$\\boldsymbol L$的各项计算公式：\n $$\n a_{ik}=\\sum\\limits_{s=1}^{k-1}l_{is}l_{ks}+l_{kk}^2$$\n 所以：\n $$l_{kk}=\\sqrt{a_{kk}-\\sum\\limits_{s=1}^{k-1}l_{ks}^2}\\\\\\\\\n l_{ik}=\\frac{a_{ik}-\\sum\\limits_{s=1}^{k-1}l_{is}l_{ks}}{l_{kk}},\\quad i=k+1,\\cdots,n$$\n\npython代码如下：\n\n```python\ndef chollt(A):\n    EPSILON = 1e-8\n    DIM = len(A)\n    for k in range(DIM):\n        for i in range(k, DIM):\n            for j in range(k):\n                A[i, k] = A[i, k] - A[i, j] * A[k, j]\n        if np.fabs(A[k, k]) < EPSILON:\n            return 1\n        A[k, k] = np.math.sqrt(A[k, k])\n        for i in range(k+1, DIM):\n            A[i, k] = A[i, k] / A[k, k]\n    return 0\n```\n\n---\n","slug":"正定矩阵的cholesky分解","published":1,"updated":"2018-11-21T11:48:02.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq9a4s0r000q3t9k2h34jtwe","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><h3 id=\"正定矩阵的cholesky分解\"><a href=\"#正定矩阵的cholesky分解\" class=\"headerlink\" title=\"正定矩阵的cholesky分解\"></a>正定矩阵的cholesky分解</h3><p>由于正定矩阵的主子式均大于零，可得正定矩阵的顺序主子式均大于零，所以正定矩阵$\\boldsymbol A$有唯一的$\\boldsymbol{LDU}$分解，即：<br>$$<br>\\boldsymbol A = \\boldsymbol{LDU}$$<br>这里$\\boldsymbol L$为单位下三角矩阵，$\\boldsymbol U$为单位上三角矩阵，$\\boldsymbol D$为对角矩阵。又$\\boldsymbol A$是对称矩阵，故：<br>$$<br>\\boldsymbol A = \\boldsymbol A^T=(\\boldsymbol{LDU})^T=\\boldsymbol U^T \\boldsymbol D \\boldsymbol L^T$$</p><p>根据$\\boldsymbol{LDU}$分解的唯一性得<br>$$<br>\\boldsymbol U=\\boldsymbol L^T$$<br>故正定矩阵$\\boldsymbol A$有分解式<br>$$\\boldsymbol A = \\boldsymbol L \\boldsymbol D \\boldsymbol L^T$$<br>这里$\\boldsymbol L$的对角元素皆为1.记<br>$$\\boldsymbol D = diag(d_1,d_2,\\cdots,d_n)$$<br>由$\\boldsymbol A$的正定性可得<br>$$d_i&gt;0,i=1,2,\\cdots,n$$<br>若记<br>$$D^{\\frac{1}{2}}=diag(\\sqrt{d_1},\\sqrt{d_2},\\cdots,\\sqrt{d_n})$$<br>则<br>$$\\boldsymbol A = \\boldsymbol L\\boldsymbol D^{\\frac{1}{2}}\\boldsymbol D^{\\frac{1}{2}}\\boldsymbol L^T=(\\boldsymbol L\\boldsymbol D^{\\frac{1}{2}})(\\boldsymbol L\\boldsymbol D^{\\frac{1}{2}})^T=\\widetilde{\\boldsymbol L} \\widetilde{\\boldsymbol L}^T$$<br>这里$\\widetilde{\\boldsymbol L}=\\boldsymbol L \\boldsymbol D^{\\frac{1}{2}}$是下三角矩阵，其对角元素皆为正数，则这种分解也是唯一的。称之为正定矩阵的Cholesky分解。</p><h4 id=\"计算公式\"><a href=\"#计算公式\" class=\"headerlink\" title=\"计算公式\"></a>计算公式</h4><p>由<br>$$\\boldsymbol A = \\begin{pmatrix}a_{11} &amp; a_{12} &amp; \\cdots &amp; a_{1n}\\\\<br>a_{21} &amp; a_{22} &amp; \\cdots &amp; a_{2n}\\\\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\\\\\<br>a_{n1} &amp; a_{n2} &amp; \\cdots &amp; a_{nn}\\end{pmatrix}=\\begin{pmatrix}l_{11} &amp; &amp; &amp; \\\\<br>l_{21} &amp; l_{22} &amp; &amp; \\\\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\\\\\<br>l_{n1} &amp; l_{n2} &amp; \\cdots &amp; l_{nn}\\end{pmatrix}\\begin{pmatrix}l_{11} &amp; l_{21} &amp; \\cdots &amp; l_{n1}\\\\<br>&amp; l_{22} &amp; \\cdots &amp; l_{n2}\\\\\\<br>&amp; &amp; \\ddots &amp; \\vdots \\\\\\<br>&amp; &amp; &amp; l_{nn}\\end{pmatrix}=\\boldsymbol L \\boldsymbol L^T$$</p><p>矩阵对应每项相等可以得到矩阵$\\boldsymbol L$的各项计算公式：<br>$$<br>a_{ik}=\\sum\\limits_{s=1}^{k-1}l_{is}l_{ks}+l_{kk}^2$$<br>所以：<br>$$l_{kk}=\\sqrt{a_{kk}-\\sum\\limits_{s=1}^{k-1}l_{ks}^2}\\\\<br>l_{ik}=\\frac{a_{ik}-\\sum\\limits_{s=1}^{k-1}l_{is}l_{ks}}{l_{kk}},\\quad i=k+1,\\cdots,n$$</p><p>python代码如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">chollt</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    EPSILON = <span class=\"number\">1e-8</span></span><br><span class=\"line\">    DIM = len(A)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(DIM):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k, DIM):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">                A[i, k] = A[i, k] - A[i, j] * A[k, j]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> np.fabs(A[k, k]) &lt; EPSILON:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">        A[k, k] = np.math.sqrt(A[k, k])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k+<span class=\"number\">1</span>, DIM):</span><br><span class=\"line\">            A[i, k] = A[i, k] / A[k, k]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><h3 id=\"正定矩阵的cholesky分解\"><a href=\"#正定矩阵的cholesky分解\" class=\"headerlink\" title=\"正定矩阵的cholesky分解\"></a>正定矩阵的cholesky分解</h3><p>由于正定矩阵的主子式均大于零，可得正定矩阵的顺序主子式均大于零，所以正定矩阵$\\boldsymbol A$有唯一的$\\boldsymbol{LDU}$分解，即：<br>$$<br>\\boldsymbol A = \\boldsymbol{LDU}$$<br>这里$\\boldsymbol L$为单位下三角矩阵，$\\boldsymbol U$为单位上三角矩阵，$\\boldsymbol D$为对角矩阵。又$\\boldsymbol A$是对称矩阵，故：<br>$$<br>\\boldsymbol A = \\boldsymbol A^T=(\\boldsymbol{LDU})^T=\\boldsymbol U^T \\boldsymbol D \\boldsymbol L^T$$</p><p>根据$\\boldsymbol{LDU}$分解的唯一性得<br>$$<br>\\boldsymbol U=\\boldsymbol L^T$$<br>故正定矩阵$\\boldsymbol A$有分解式<br>$$\\boldsymbol A = \\boldsymbol L \\boldsymbol D \\boldsymbol L^T$$<br>这里$\\boldsymbol L$的对角元素皆为1.记<br>$$\\boldsymbol D = diag(d_1,d_2,\\cdots,d_n)$$<br>由$\\boldsymbol A$的正定性可得<br>$$d_i&gt;0,i=1,2,\\cdots,n$$<br>若记<br>$$D^{\\frac{1}{2}}=diag(\\sqrt{d_1},\\sqrt{d_2},\\cdots,\\sqrt{d_n})$$<br>则<br>$$\\boldsymbol A = \\boldsymbol L\\boldsymbol D^{\\frac{1}{2}}\\boldsymbol D^{\\frac{1}{2}}\\boldsymbol L^T=(\\boldsymbol L\\boldsymbol D^{\\frac{1}{2}})(\\boldsymbol L\\boldsymbol D^{\\frac{1}{2}})^T=\\widetilde{\\boldsymbol L} \\widetilde{\\boldsymbol L}^T$$<br>这里$\\widetilde{\\boldsymbol L}=\\boldsymbol L \\boldsymbol D^{\\frac{1}{2}}$是下三角矩阵，其对角元素皆为正数，则这种分解也是唯一的。称之为正定矩阵的Cholesky分解。</p><h4 id=\"计算公式\"><a href=\"#计算公式\" class=\"headerlink\" title=\"计算公式\"></a>计算公式</h4><p>由<br>$$\\boldsymbol A = \\begin{pmatrix}a_{11} &amp; a_{12} &amp; \\cdots &amp; a_{1n}\\\\<br>a_{21} &amp; a_{22} &amp; \\cdots &amp; a_{2n}\\\\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots\\\\\\<br>a_{n1} &amp; a_{n2} &amp; \\cdots &amp; a_{nn}\\end{pmatrix}=\\begin{pmatrix}l_{11} &amp; &amp; &amp; \\\\<br>l_{21} &amp; l_{22} &amp; &amp; \\\\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\\\\\<br>l_{n1} &amp; l_{n2} &amp; \\cdots &amp; l_{nn}\\end{pmatrix}\\begin{pmatrix}l_{11} &amp; l_{21} &amp; \\cdots &amp; l_{n1}\\\\<br>&amp; l_{22} &amp; \\cdots &amp; l_{n2}\\\\\\<br>&amp; &amp; \\ddots &amp; \\vdots \\\\\\<br>&amp; &amp; &amp; l_{nn}\\end{pmatrix}=\\boldsymbol L \\boldsymbol L^T$$</p><p>矩阵对应每项相等可以得到矩阵$\\boldsymbol L$的各项计算公式：<br>$$<br>a_{ik}=\\sum\\limits_{s=1}^{k-1}l_{is}l_{ks}+l_{kk}^2$$<br>所以：<br>$$l_{kk}=\\sqrt{a_{kk}-\\sum\\limits_{s=1}^{k-1}l_{ks}^2}\\\\<br>l_{ik}=\\frac{a_{ik}-\\sum\\limits_{s=1}^{k-1}l_{is}l_{ks}}{l_{kk}},\\quad i=k+1,\\cdots,n$$</p><p>python代码如下：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">chollt</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    EPSILON = <span class=\"number\">1e-8</span></span><br><span class=\"line\">    DIM = len(A)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(DIM):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k, DIM):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">                A[i, k] = A[i, k] - A[i, j] * A[k, j]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> np.fabs(A[k, k]) &lt; EPSILON:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">        A[k, k] = np.math.sqrt(A[k, k])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k+<span class=\"number\">1</span>, DIM):</span><br><span class=\"line\">            A[i, k] = A[i, k] / A[k, k]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->"},{"title":"范数","abbrlink":24736,"date":"2018-09-24T23:51:53.000Z","_content":"\n### 向量范数\n#### 定义\n **定义**：定义在$ {\\mathbb{C}}^n $上的一个非负实值函数，记为$\\parallel\\cdot\\parallel$，若该函数满足以下三个条件：即对任意向量$\\boldsymbol x$和$\\boldsymbol y$以及任意常数$\\alpha \\in \\mathbb{C}$\n\n1. $\\parallel \\boldsymbol x \\parallel\\geq 0$,并且$\\parallel \\boldsymbol x \\parallel= 0$的充要条件为$\\boldsymbol x =\\boldsymbol 0$;\n2. $\\parallel \\alpha \\boldsymbol x \\parallel=|\\alpha|\\, \\parallel\\boldsymbol x\\parallel$,\n3. $\\parallel \\boldsymbol x + \\boldsymbol y\\parallel \\leq \\parallel\\boldsymbol x\\parallel+\\parallel\\boldsymbol y\\parallel$,\n\n则称$\\parallel\\cdot\\parallel$为上${\\mathbb{C}}^n$的一个**向量范数**\n\n一类有用的向量范数为$p$范数，定义为：\n$$\n\\parallel \\boldsymbol x \\parallel_{p}=(\\sum \\limits_{i=1}^{n} |x_i|^{p})^{\\frac{1}{p}},\\quad p\\geq1\n$$\n其中最重要的是$1$范数，$2$范数，$\\infty$范数\n$$\n\\begin{align}\n& \\parallel \\boldsymbol x \\parallel_{1}=\\sum \\limits_{i=1}^{n} |x_i|;\\\\\\\\\n& \\parallel \\boldsymbol x \\parallel_{2}=(\\sum \\limits_{i=0}^{n} |x_i|^{2})^{\\frac{1}{2}};\\\\\\\\\n& \\parallel \\boldsymbol x \\parallel_{\\infty}=\\max \\limits_{1\\leq i\\leq n} |x_i|.\n\\end{align}\n$$\n其中$\\infty$范数形式的得出只要利用$p$范数，对$p$取$\\infty$即可，证明略。\n\n另一常用范数是加权的$p$范数可以表示为：\n$$\n\\parallel\\boldsymbol x\\parallel_{\\boldsymbol W} =\\parallel\\boldsymbol{Wx}\\parallel,\n$$\n其中$\\boldsymbol W$为对角矩阵，其对角元即为它每个分量的加权系数，更一般地可以取$\\boldsymbol W$为任意非奇异矩阵。\n#### 性质\n关于$p$范数的一个经典性质是[Hölder不等式](https://en.wikipedia.org/wiki/H%C3%B6lder%27s_inequality)：\n$$\\parallel{\\boldsymbol x}^{T} \\boldsymbol y\\parallel_1 \\leq \\parallel\\boldsymbol x\\parallel_p \\parallel\\boldsymbol y\\parallel_q,\\quad \\frac{1}{p}+\\frac{1}{q}=1.$$\n对于$2$范数就是著名的Cauchy–Schwarz不等式:\n$$\\parallel{\\boldsymbol x}^{T} \\boldsymbol y\\parallel_1 \\leq \\parallel\\boldsymbol x\\parallel_2 \\parallel\\boldsymbol y\\parallel_2.$$\n对于$p$范数，其对应的三角不等式即为[闵可夫斯基不等式](https://en.wikipedia.org/wiki/Minkowski_inequality):\n$$\\parallel \\boldsymbol x + \\boldsymbol y\\parallel_p \\leq \\parallel\\boldsymbol x\\parallel_p+\\parallel\\boldsymbol y\\parallel_p.$$\n<details>\n  <summary>下面证明之（利用到了Hölder不等式）：</summary>\n  $$\n  \\begin{align}\n  (\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{p}\\cdot p}\n  & = \\sum \\limits_{i=1}^{n}|x_i+y_i|^{p-1}\\cdot |x_i+y_i| \\\\\\\\\n  & \\leq \\sum \\limits_{i=1}^{n}|x_i+y_i|^{p-1}\\cdot |x_i|+\\sum \\limits_{i=1}^{n}|x_i+y_i|^{p-1}\\cdot |y_i|\\\\\\\\\n  & \\leq (\\sum \\limits_{i=1}^{n}|x_i+y_i|^{q(p-1)})^{\\frac{1}{q}}(\\sum \\limits_{i=1}^{n}|x_i|^p)^{\\frac{1}{p}}+ (\\sum \\limits_{i=1}^{n}|x_i+y_i|^{q(p-1)})^{\\frac{1}{q}}(\\sum \\limits_{i=1}^{n}|y_i|^p)^{\\frac{1}{p}},\\,\\text{Hölder's inequality}\\\\\\\\\n  & =  \\Big[(\\sum \\limits_{i=1}^{n}|x_i|^p)^{\\frac{1}{p}}+(\\sum \\limits_{i=1}^{n}|y_i|^p)^{\\frac{1}{p}}\\Big] (\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{p}}\n  \\end{align}\n  $$\n\n  两边同时除以$(\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{q}}$即可得到闵可夫斯基不等式，如下所示：\n  $$\n  (\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{p}}\n   \\leq\n  (\\sum \\limits_{i=1}^{n}|x_i|^p)^{\\frac{1}{p}}+(\\sum \\limits_{i=1}^{n}|y_i|^p)^{\\frac{1}{p}}\n  $$\n</details>\n\n\n##### 范数的等价性\n**范数的等价性定理**：设$\\parallel\\cdot\\parallel_{\\alpha}$和$\\parallel\\cdot\\parallel_{\\beta}$为${\\mathbb{C}}^n$上的任意两种向量范数，则存在两个与向量$\\parallel\\boldsymbol x\\parallel$无关的正常数$c_1$和$c_2$，使得下面的不等式成立：\n$$\nc_1 \\parallel\\boldsymbol x\\parallel_{\\beta}\\leq \\parallel\\boldsymbol x\\parallel_{\\alpha}\\leq c_2 \\parallel\\boldsymbol x\\parallel_{\\beta},\\quad \\boldsymbol x \\in {\\mathbb{C}}^{\\,n}\n$$\n并称$\\parallel \\cdot \\parallel_{\\alpha}\u001d$和$\\parallel \\cdot \\parallel_{\\beta}$为${\\mathbb{C}}^{\\, n}$上的**等价范数**。\n以下为三个常见不等式：\n\n1. $\\parallel\\boldsymbol x\\parallel_{\\infty}\\leq\\parallel\\boldsymbol x\\parallel_1\\leq n\\parallel\\boldsymbol x\\parallel_{\\infty}$;\n2. $\\frac{1}{\\sqrt n}\\parallel\\boldsymbol x\\parallel_1\\leq\\parallel\\boldsymbol x\\parallel_2\\leq \\parallel\\boldsymbol x\\parallel_1$;\n3. $\\frac{1}{\\sqrt n}\\parallel\\boldsymbol x\\parallel_2\\leq\\parallel\\boldsymbol x\\parallel_{\\infty}\\leq \\parallel\\boldsymbol x\\parallel_2$.\n\n### 矩阵范数\n#### 定义\n\n一个$m\\times n$矩阵可以看成$mn$维向量空间中的一个向量，故矩阵范数的定义等价于向量范数的定义。\n\n**定义**：定义在${\\mathbb{C}}^{m\\times n}$上的一个非负实值函数，记为$\\parallel\\cdot\\parallel$。若$\\forall \\boldsymbol A,\\boldsymbol B\\in {\\mathbb{C}}^{m\\times n}$均满足以下条件：\n\n1. 非负性：$\\parallel \\boldsymbol A \\parallel\\geq 0$,并且$\\parallel \\boldsymbol A \\parallel= 0$的充要条件为$\\boldsymbol A =\\boldsymbol 0$;\n2. 齐次性：$\\parallel \\alpha \\boldsymbol A \\parallel=|\\alpha|\\, \\parallel\\boldsymbol A\\parallel,c\\in \\mathbb{C}$\n3. 三角不等式：$\\parallel \\boldsymbol A + \\boldsymbol B\\parallel \\leq \\parallel\\boldsymbol A\\parallel+\\parallel\\boldsymbol B\\parallel$,\n\n则称$\\parallel\\cdot\\parallel$为${\\mathbb{C}}^{m\\times n}$上的矩阵范数。\n\n**相容性**：如果对所有$\\boldsymbol A\\in \\mathbb{R}^{m\\times n}$和$\\boldsymbol B\\in \\mathbb{R}^{n\\times q}$有\b\b$f_1 (\\boldsymbol{AB})\\leq f_2 (\\boldsymbol A)f_3 (\\boldsymbol B)$，则称$\\mathbb{R}^{m\\times q}$，$\\mathbb{R}^{m\\times n}$和$\\mathbb{R}^{n\\times q}$上的范数$f_1$，$f_2$和$f_3$是相互相容的。\n\n>有的书上矩阵范数特指满足相容性条件的范数。\n>下面考虑的矩阵范数均是满足相容性的矩阵范数。\n\n其中最常用的矩阵范数有$F$范数（Frobenius范数）：\n$$\n\\parallel\\boldsymbol A\\parallel_{F}=\\sqrt{\\sum\\limits_{i=1}^m \\sum\\limits_{j=1}^n |a_{ij}|^2}\n$$\n和$p$范数:\n$$\n\\parallel\\boldsymbol A\\parallel_{p}=\\sup\\limits_{\\boldsymbol{x} \\neq \\boldsymbol{0}}\\frac{\\parallel\\boldsymbol{Ax}\\parallel_p}{\\parallel\\boldsymbol x\\parallel_p}\n$$\n\b很明显，$\\parallel\\boldsymbol A\\parallel_p$是将$\\boldsymbol A$作用到$p$范数单位向量所得到的最大向量的$p$范数：\n\n\b\n#### 由向量范数导出矩阵范数\n 给定$\\mathbb{C}^n$上的向量范数$\\parallel\\cdot\\parallel$，$\\boldsymbol A$为\b$m\\times n$矩阵，定义：\n $$\n \\parallel\\boldsymbol{A}\\parallel=\\sup\\limits_{\\boldsymbol{x} \\neq \\boldsymbol{0}}\\bigg(\\frac{\\parallel\\boldsymbol {Ax}\\parallel}{\\parallel\\boldsymbol x\\parallel}\\bigg)=\\sup_{\\parallel\\boldsymbol{x}\\parallel=1}{\\parallel\\boldsymbol {Ax}\\parallel}\n $$\n 并称$\\parallel\\cdot\\parallel$为向量范数诱导的矩阵范数，简称算子范数。\n#### p-范数诱导的矩阵范数\n$\\mathbb{C}^m$和$\\mathbb{C}^n$空间上装备的向量范数都是$p$范数时，其诱导的矩阵范数也称为**诱导$p$范数**\n\n$$\n\\parallel \\boldsymbol{A} \\parallel_{p}=\\sup\\limits_{x \\neq 0}\\parallel\\boldsymbol{A}\\Big(\\frac{\\boldsymbol x}{ \\parallel\\boldsymbol x \\parallel_p}\\Big)\\parallel_p=\\max \\limits_{\\parallel\\boldsymbol x\\parallel_p=1}\\parallel\\boldsymbol{Ax}\\parallel_p=\\max\\limits_{\\boldsymbol{x} \\neq \\boldsymbol{0}}\\frac{\\Big(\\sum\\limits_{i=1}^{n}|\\sum\\limits_{j=1}^{m}A_{ij}x_j|^p\\Big)^{\\frac{1}{p}}}{(\\sum\\limits_{i=1}^{m}|x_i|^p)^{\\frac{1}{p}}}.\n$$\n\n对于诱导$p$范数，有三种常用范数：\n\n1. $\\parallel \\boldsymbol{A} \\parallel_{1}=\\max\\limits_{1\\leq j\\leq n}\\sum\\limits_{i=1}^{m}|a_{ij}|;$\n2. $\\parallel \\boldsymbol{A} \\parallel_{2}=\\sqrt{\\lambda_{\\max}(\\boldsymbol{A^{H}A})}$\n3. $\\parallel \\boldsymbol{A} \\parallel_{\\infty}=\\max\\limits_{1\\leq i\\leq m}\\sum\\limits_{j=1}^{n}|a_{ij}|;$\n\n<details>\n  <summary>这里给出3的证明</summary>\n  $$\n  \\parallel \\boldsymbol{Ax} \\parallel_{\\infty}=\\max \\limits_{1\\leq i\\leq n}\\big|\\sum\\limits_{j=1}^{n}a_{ij}x_j\\big|\\leq \\max \\limits_{1\\leq i\\leq n}\\sum\\limits_{j=1}^{n}|a_{ij}x_j|\\leq\\max \\limits_{1\\leq i\\leq n}\\sum\\limits_{j=1}^{n}|a_{ij}|\\parallel \\boldsymbol x\\parallel_{\\infty} \\leq \\parallel A \\parallel_{\\infty}\\parallel \\boldsymbol x \\parallel_{\\infty},\n  $$\n  因此:\n  $$\n  \\parallel \\boldsymbol A \\parallel_{\\infty}=\\max\\limits_{\\boldsymbol{x}\\neq\\boldsymbol{0}}\\frac{\\parallel \\boldsymbol{Ax}\\parallel_{\\infty}}{\\parallel \\boldsymbol{x}\\parallel_{\\infty}}\\leq \\max\\limits_{1\\leq i\\leq m}\\sum\\limits_{j=1}^{n}|a_{ij}|\n  $$\n  假定$\\boldsymbol A$的第$k$行非零，且定义向量$z\\in\\mathbb{C}^n$为:\n  <img src=\"/images/fanshu.png\" width=\"240\" height=\"240\">\n  于是$\\parallel \\boldsymbol z \\parallel_{\\infty}=1$，且对所有$j=1,2,\\dots ,n$，有$a_{kj}z_{j}=|a_{kj}|$，并且\n  $$\n  \\max\\limits_{\\parallel \\boldsymbol x\\parallel_{\\infty}=1}\\parallel \\boldsymbol{Ax}\\parallel_{\\infty}\\geq\\parallel \\boldsymbol{Az}\\parallel_{\\infty}=\\max\\limits_{1\\leq i\\leq n}\\big|\\sum\\limits_{j=1}^{n}a_{ij}z_{j}\\big|\\geq\\big|\\sum\\limits_{j=1}^{n}a_{kj}z_{j}\\big|=\\sum\\limits_{j=1}^{n}|a_{kj}|.\n  $$\n  因此\n  $$\n  \\max\\limits_{\\parallel \\boldsymbol x\\parallel_{\\infty}=1}\\parallel \\boldsymbol{Ax}\\parallel_{\\infty}\\geq \\max\\limits_{1\\leq i\\leq m}\\sum\\limits_{j=1}^{n}|a_{ij}|\n  $$\n</details>\n\n\n对于以上三个矩阵范数，我们有：\n\n$$\n\\parallel \\boldsymbol{A} \\parallel _{2}^{2} \\leq\\parallel \\boldsymbol{A} \\parallel _{1}\\, \\parallel \\boldsymbol{A} \\parallel _{\\infty}\n$$\n\n**推论** 对任何算子范数，单位矩阵$\\boldsymbol I$的范数为1。\n\n> 练习：设$\\boldsymbol A$为n阶非奇异矩阵，$\\boldsymbol U$为n阶酉矩阵,，证明：\n>\n> $\\parallel \\boldsymbol U\\parallel_2=1$;\n>\n> $\\parallel \\boldsymbol{AU}\\parallel_2=\\parallel \\boldsymbol{UA}\\parallel_2=\\parallel \\boldsymbol{A}\\parallel_2$;\n>\n> $\\parallel \\boldsymbol{A}\\parallel_F=\\parallel \\boldsymbol{UA}\\parallel_F=\\parallel \\boldsymbol{AV}\\parallel_F=\\parallel \\boldsymbol{UAV}\\parallel_F$\n\n**定义：**\n矩阵$\\boldsymbol A$的**谱**为：$\\sigma(\\boldsymbol{A})=$ &#123; $\\lambda \\big|\\lambda $为$\\boldsymbol{A}$的特征值 &#125;。\n矩阵$\\boldsymbol A$的**谱半径**为：$\\rho(\\boldsymbol{A})=\\max$ &#123; $\\|\\lambda| \\big|\\lambda $为$\\boldsymbol{A}$的特征值 &#125;。\n\n**定理** 设$\\parallel\\cdot\\parallel$为$\\mathbb{C}^{n\\times n}$矩阵空间的一种矩阵范数，则对任意的n阶方阵$\\boldsymbol A$均有：\n$$\n\\rho(\\boldsymbol A)\\leq \\parallel \\boldsymbol A \\parallel.\n$$\n特别的，当$\\boldsymbol A$为对称矩阵时:\n$$\n\\rho(\\boldsymbol A)=\\parallel \\boldsymbol A \\parallel_{2}.\n$$\n**定理** 对于任意$\\varepsilon > 0$,存在$\\mathbb{C}^{n\\times n}$矩阵空间的一种算子范数$\\parallel\\cdot\\parallel$有：\n$$\n \\parallel \\boldsymbol A \\parallel\\leq\\rho(\\boldsymbol A)+\\varepsilon.\n$$\n\n**定理** 设$\\boldsymbol A \\in \\mathbb{C}^{n\\times n}$，如果有$\\mathbb{C}^{n\\times n}$上的一种矩阵范数$\\parallel\\cdot\\parallel$使得$\\parallel \\boldsymbol A\\parallel < 1$，则：\n\n1. 矩阵$\\boldsymbol I \\pm \\boldsymbol A$可逆；\n2. $\\parallel(\\boldsymbol I \\pm \\boldsymbol A)^{-1}\\parallel \\leq \\frac{\\parallel \\boldsymbol I \\parallel}{1-\\parallel \\boldsymbol A \\parallel}$\n3. $\\parallel \\boldsymbol{A}(\\boldsymbol I \\pm \\boldsymbol A)^{-1}\\parallel \\leq \\frac{\\parallel \\boldsymbol A \\parallel}{1-\\parallel \\boldsymbol A \\parallel}$\n\n---\n","source":"_posts/范数.md","raw":"---\ntitle: 范数\ncategories: 数学\ntags: [范数,矩阵与数值分析]\nabbrlink: 24736\ndate: 2018-09-25 07:51:53\n---\n\n### 向量范数\n#### 定义\n **定义**：定义在$ {\\mathbb{C}}^n $上的一个非负实值函数，记为$\\parallel\\cdot\\parallel$，若该函数满足以下三个条件：即对任意向量$\\boldsymbol x$和$\\boldsymbol y$以及任意常数$\\alpha \\in \\mathbb{C}$\n\n1. $\\parallel \\boldsymbol x \\parallel\\geq 0$,并且$\\parallel \\boldsymbol x \\parallel= 0$的充要条件为$\\boldsymbol x =\\boldsymbol 0$;\n2. $\\parallel \\alpha \\boldsymbol x \\parallel=|\\alpha|\\, \\parallel\\boldsymbol x\\parallel$,\n3. $\\parallel \\boldsymbol x + \\boldsymbol y\\parallel \\leq \\parallel\\boldsymbol x\\parallel+\\parallel\\boldsymbol y\\parallel$,\n\n则称$\\parallel\\cdot\\parallel$为上${\\mathbb{C}}^n$的一个**向量范数**\n\n一类有用的向量范数为$p$范数，定义为：\n$$\n\\parallel \\boldsymbol x \\parallel_{p}=(\\sum \\limits_{i=1}^{n} |x_i|^{p})^{\\frac{1}{p}},\\quad p\\geq1\n$$\n其中最重要的是$1$范数，$2$范数，$\\infty$范数\n$$\n\\begin{align}\n& \\parallel \\boldsymbol x \\parallel_{1}=\\sum \\limits_{i=1}^{n} |x_i|;\\\\\\\\\n& \\parallel \\boldsymbol x \\parallel_{2}=(\\sum \\limits_{i=0}^{n} |x_i|^{2})^{\\frac{1}{2}};\\\\\\\\\n& \\parallel \\boldsymbol x \\parallel_{\\infty}=\\max \\limits_{1\\leq i\\leq n} |x_i|.\n\\end{align}\n$$\n其中$\\infty$范数形式的得出只要利用$p$范数，对$p$取$\\infty$即可，证明略。\n\n另一常用范数是加权的$p$范数可以表示为：\n$$\n\\parallel\\boldsymbol x\\parallel_{\\boldsymbol W} =\\parallel\\boldsymbol{Wx}\\parallel,\n$$\n其中$\\boldsymbol W$为对角矩阵，其对角元即为它每个分量的加权系数，更一般地可以取$\\boldsymbol W$为任意非奇异矩阵。\n#### 性质\n关于$p$范数的一个经典性质是[Hölder不等式](https://en.wikipedia.org/wiki/H%C3%B6lder%27s_inequality)：\n$$\\parallel{\\boldsymbol x}^{T} \\boldsymbol y\\parallel_1 \\leq \\parallel\\boldsymbol x\\parallel_p \\parallel\\boldsymbol y\\parallel_q,\\quad \\frac{1}{p}+\\frac{1}{q}=1.$$\n对于$2$范数就是著名的Cauchy–Schwarz不等式:\n$$\\parallel{\\boldsymbol x}^{T} \\boldsymbol y\\parallel_1 \\leq \\parallel\\boldsymbol x\\parallel_2 \\parallel\\boldsymbol y\\parallel_2.$$\n对于$p$范数，其对应的三角不等式即为[闵可夫斯基不等式](https://en.wikipedia.org/wiki/Minkowski_inequality):\n$$\\parallel \\boldsymbol x + \\boldsymbol y\\parallel_p \\leq \\parallel\\boldsymbol x\\parallel_p+\\parallel\\boldsymbol y\\parallel_p.$$\n<details>\n  <summary>下面证明之（利用到了Hölder不等式）：</summary>\n  $$\n  \\begin{align}\n  (\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{p}\\cdot p}\n  & = \\sum \\limits_{i=1}^{n}|x_i+y_i|^{p-1}\\cdot |x_i+y_i| \\\\\\\\\n  & \\leq \\sum \\limits_{i=1}^{n}|x_i+y_i|^{p-1}\\cdot |x_i|+\\sum \\limits_{i=1}^{n}|x_i+y_i|^{p-1}\\cdot |y_i|\\\\\\\\\n  & \\leq (\\sum \\limits_{i=1}^{n}|x_i+y_i|^{q(p-1)})^{\\frac{1}{q}}(\\sum \\limits_{i=1}^{n}|x_i|^p)^{\\frac{1}{p}}+ (\\sum \\limits_{i=1}^{n}|x_i+y_i|^{q(p-1)})^{\\frac{1}{q}}(\\sum \\limits_{i=1}^{n}|y_i|^p)^{\\frac{1}{p}},\\,\\text{Hölder's inequality}\\\\\\\\\n  & =  \\Big[(\\sum \\limits_{i=1}^{n}|x_i|^p)^{\\frac{1}{p}}+(\\sum \\limits_{i=1}^{n}|y_i|^p)^{\\frac{1}{p}}\\Big] (\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{p}}\n  \\end{align}\n  $$\n\n  两边同时除以$(\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{q}}$即可得到闵可夫斯基不等式，如下所示：\n  $$\n  (\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{p}}\n   \\leq\n  (\\sum \\limits_{i=1}^{n}|x_i|^p)^{\\frac{1}{p}}+(\\sum \\limits_{i=1}^{n}|y_i|^p)^{\\frac{1}{p}}\n  $$\n</details>\n\n\n##### 范数的等价性\n**范数的等价性定理**：设$\\parallel\\cdot\\parallel_{\\alpha}$和$\\parallel\\cdot\\parallel_{\\beta}$为${\\mathbb{C}}^n$上的任意两种向量范数，则存在两个与向量$\\parallel\\boldsymbol x\\parallel$无关的正常数$c_1$和$c_2$，使得下面的不等式成立：\n$$\nc_1 \\parallel\\boldsymbol x\\parallel_{\\beta}\\leq \\parallel\\boldsymbol x\\parallel_{\\alpha}\\leq c_2 \\parallel\\boldsymbol x\\parallel_{\\beta},\\quad \\boldsymbol x \\in {\\mathbb{C}}^{\\,n}\n$$\n并称$\\parallel \\cdot \\parallel_{\\alpha}\u001d$和$\\parallel \\cdot \\parallel_{\\beta}$为${\\mathbb{C}}^{\\, n}$上的**等价范数**。\n以下为三个常见不等式：\n\n1. $\\parallel\\boldsymbol x\\parallel_{\\infty}\\leq\\parallel\\boldsymbol x\\parallel_1\\leq n\\parallel\\boldsymbol x\\parallel_{\\infty}$;\n2. $\\frac{1}{\\sqrt n}\\parallel\\boldsymbol x\\parallel_1\\leq\\parallel\\boldsymbol x\\parallel_2\\leq \\parallel\\boldsymbol x\\parallel_1$;\n3. $\\frac{1}{\\sqrt n}\\parallel\\boldsymbol x\\parallel_2\\leq\\parallel\\boldsymbol x\\parallel_{\\infty}\\leq \\parallel\\boldsymbol x\\parallel_2$.\n\n### 矩阵范数\n#### 定义\n\n一个$m\\times n$矩阵可以看成$mn$维向量空间中的一个向量，故矩阵范数的定义等价于向量范数的定义。\n\n**定义**：定义在${\\mathbb{C}}^{m\\times n}$上的一个非负实值函数，记为$\\parallel\\cdot\\parallel$。若$\\forall \\boldsymbol A,\\boldsymbol B\\in {\\mathbb{C}}^{m\\times n}$均满足以下条件：\n\n1. 非负性：$\\parallel \\boldsymbol A \\parallel\\geq 0$,并且$\\parallel \\boldsymbol A \\parallel= 0$的充要条件为$\\boldsymbol A =\\boldsymbol 0$;\n2. 齐次性：$\\parallel \\alpha \\boldsymbol A \\parallel=|\\alpha|\\, \\parallel\\boldsymbol A\\parallel,c\\in \\mathbb{C}$\n3. 三角不等式：$\\parallel \\boldsymbol A + \\boldsymbol B\\parallel \\leq \\parallel\\boldsymbol A\\parallel+\\parallel\\boldsymbol B\\parallel$,\n\n则称$\\parallel\\cdot\\parallel$为${\\mathbb{C}}^{m\\times n}$上的矩阵范数。\n\n**相容性**：如果对所有$\\boldsymbol A\\in \\mathbb{R}^{m\\times n}$和$\\boldsymbol B\\in \\mathbb{R}^{n\\times q}$有\b\b$f_1 (\\boldsymbol{AB})\\leq f_2 (\\boldsymbol A)f_3 (\\boldsymbol B)$，则称$\\mathbb{R}^{m\\times q}$，$\\mathbb{R}^{m\\times n}$和$\\mathbb{R}^{n\\times q}$上的范数$f_1$，$f_2$和$f_3$是相互相容的。\n\n>有的书上矩阵范数特指满足相容性条件的范数。\n>下面考虑的矩阵范数均是满足相容性的矩阵范数。\n\n其中最常用的矩阵范数有$F$范数（Frobenius范数）：\n$$\n\\parallel\\boldsymbol A\\parallel_{F}=\\sqrt{\\sum\\limits_{i=1}^m \\sum\\limits_{j=1}^n |a_{ij}|^2}\n$$\n和$p$范数:\n$$\n\\parallel\\boldsymbol A\\parallel_{p}=\\sup\\limits_{\\boldsymbol{x} \\neq \\boldsymbol{0}}\\frac{\\parallel\\boldsymbol{Ax}\\parallel_p}{\\parallel\\boldsymbol x\\parallel_p}\n$$\n\b很明显，$\\parallel\\boldsymbol A\\parallel_p$是将$\\boldsymbol A$作用到$p$范数单位向量所得到的最大向量的$p$范数：\n\n\b\n#### 由向量范数导出矩阵范数\n 给定$\\mathbb{C}^n$上的向量范数$\\parallel\\cdot\\parallel$，$\\boldsymbol A$为\b$m\\times n$矩阵，定义：\n $$\n \\parallel\\boldsymbol{A}\\parallel=\\sup\\limits_{\\boldsymbol{x} \\neq \\boldsymbol{0}}\\bigg(\\frac{\\parallel\\boldsymbol {Ax}\\parallel}{\\parallel\\boldsymbol x\\parallel}\\bigg)=\\sup_{\\parallel\\boldsymbol{x}\\parallel=1}{\\parallel\\boldsymbol {Ax}\\parallel}\n $$\n 并称$\\parallel\\cdot\\parallel$为向量范数诱导的矩阵范数，简称算子范数。\n#### p-范数诱导的矩阵范数\n$\\mathbb{C}^m$和$\\mathbb{C}^n$空间上装备的向量范数都是$p$范数时，其诱导的矩阵范数也称为**诱导$p$范数**\n\n$$\n\\parallel \\boldsymbol{A} \\parallel_{p}=\\sup\\limits_{x \\neq 0}\\parallel\\boldsymbol{A}\\Big(\\frac{\\boldsymbol x}{ \\parallel\\boldsymbol x \\parallel_p}\\Big)\\parallel_p=\\max \\limits_{\\parallel\\boldsymbol x\\parallel_p=1}\\parallel\\boldsymbol{Ax}\\parallel_p=\\max\\limits_{\\boldsymbol{x} \\neq \\boldsymbol{0}}\\frac{\\Big(\\sum\\limits_{i=1}^{n}|\\sum\\limits_{j=1}^{m}A_{ij}x_j|^p\\Big)^{\\frac{1}{p}}}{(\\sum\\limits_{i=1}^{m}|x_i|^p)^{\\frac{1}{p}}}.\n$$\n\n对于诱导$p$范数，有三种常用范数：\n\n1. $\\parallel \\boldsymbol{A} \\parallel_{1}=\\max\\limits_{1\\leq j\\leq n}\\sum\\limits_{i=1}^{m}|a_{ij}|;$\n2. $\\parallel \\boldsymbol{A} \\parallel_{2}=\\sqrt{\\lambda_{\\max}(\\boldsymbol{A^{H}A})}$\n3. $\\parallel \\boldsymbol{A} \\parallel_{\\infty}=\\max\\limits_{1\\leq i\\leq m}\\sum\\limits_{j=1}^{n}|a_{ij}|;$\n\n<details>\n  <summary>这里给出3的证明</summary>\n  $$\n  \\parallel \\boldsymbol{Ax} \\parallel_{\\infty}=\\max \\limits_{1\\leq i\\leq n}\\big|\\sum\\limits_{j=1}^{n}a_{ij}x_j\\big|\\leq \\max \\limits_{1\\leq i\\leq n}\\sum\\limits_{j=1}^{n}|a_{ij}x_j|\\leq\\max \\limits_{1\\leq i\\leq n}\\sum\\limits_{j=1}^{n}|a_{ij}|\\parallel \\boldsymbol x\\parallel_{\\infty} \\leq \\parallel A \\parallel_{\\infty}\\parallel \\boldsymbol x \\parallel_{\\infty},\n  $$\n  因此:\n  $$\n  \\parallel \\boldsymbol A \\parallel_{\\infty}=\\max\\limits_{\\boldsymbol{x}\\neq\\boldsymbol{0}}\\frac{\\parallel \\boldsymbol{Ax}\\parallel_{\\infty}}{\\parallel \\boldsymbol{x}\\parallel_{\\infty}}\\leq \\max\\limits_{1\\leq i\\leq m}\\sum\\limits_{j=1}^{n}|a_{ij}|\n  $$\n  假定$\\boldsymbol A$的第$k$行非零，且定义向量$z\\in\\mathbb{C}^n$为:\n  <img src=\"/images/fanshu.png\" width=\"240\" height=\"240\">\n  于是$\\parallel \\boldsymbol z \\parallel_{\\infty}=1$，且对所有$j=1,2,\\dots ,n$，有$a_{kj}z_{j}=|a_{kj}|$，并且\n  $$\n  \\max\\limits_{\\parallel \\boldsymbol x\\parallel_{\\infty}=1}\\parallel \\boldsymbol{Ax}\\parallel_{\\infty}\\geq\\parallel \\boldsymbol{Az}\\parallel_{\\infty}=\\max\\limits_{1\\leq i\\leq n}\\big|\\sum\\limits_{j=1}^{n}a_{ij}z_{j}\\big|\\geq\\big|\\sum\\limits_{j=1}^{n}a_{kj}z_{j}\\big|=\\sum\\limits_{j=1}^{n}|a_{kj}|.\n  $$\n  因此\n  $$\n  \\max\\limits_{\\parallel \\boldsymbol x\\parallel_{\\infty}=1}\\parallel \\boldsymbol{Ax}\\parallel_{\\infty}\\geq \\max\\limits_{1\\leq i\\leq m}\\sum\\limits_{j=1}^{n}|a_{ij}|\n  $$\n</details>\n\n\n对于以上三个矩阵范数，我们有：\n\n$$\n\\parallel \\boldsymbol{A} \\parallel _{2}^{2} \\leq\\parallel \\boldsymbol{A} \\parallel _{1}\\, \\parallel \\boldsymbol{A} \\parallel _{\\infty}\n$$\n\n**推论** 对任何算子范数，单位矩阵$\\boldsymbol I$的范数为1。\n\n> 练习：设$\\boldsymbol A$为n阶非奇异矩阵，$\\boldsymbol U$为n阶酉矩阵,，证明：\n>\n> $\\parallel \\boldsymbol U\\parallel_2=1$;\n>\n> $\\parallel \\boldsymbol{AU}\\parallel_2=\\parallel \\boldsymbol{UA}\\parallel_2=\\parallel \\boldsymbol{A}\\parallel_2$;\n>\n> $\\parallel \\boldsymbol{A}\\parallel_F=\\parallel \\boldsymbol{UA}\\parallel_F=\\parallel \\boldsymbol{AV}\\parallel_F=\\parallel \\boldsymbol{UAV}\\parallel_F$\n\n**定义：**\n矩阵$\\boldsymbol A$的**谱**为：$\\sigma(\\boldsymbol{A})=$ &#123; $\\lambda \\big|\\lambda $为$\\boldsymbol{A}$的特征值 &#125;。\n矩阵$\\boldsymbol A$的**谱半径**为：$\\rho(\\boldsymbol{A})=\\max$ &#123; $\\|\\lambda| \\big|\\lambda $为$\\boldsymbol{A}$的特征值 &#125;。\n\n**定理** 设$\\parallel\\cdot\\parallel$为$\\mathbb{C}^{n\\times n}$矩阵空间的一种矩阵范数，则对任意的n阶方阵$\\boldsymbol A$均有：\n$$\n\\rho(\\boldsymbol A)\\leq \\parallel \\boldsymbol A \\parallel.\n$$\n特别的，当$\\boldsymbol A$为对称矩阵时:\n$$\n\\rho(\\boldsymbol A)=\\parallel \\boldsymbol A \\parallel_{2}.\n$$\n**定理** 对于任意$\\varepsilon > 0$,存在$\\mathbb{C}^{n\\times n}$矩阵空间的一种算子范数$\\parallel\\cdot\\parallel$有：\n$$\n \\parallel \\boldsymbol A \\parallel\\leq\\rho(\\boldsymbol A)+\\varepsilon.\n$$\n\n**定理** 设$\\boldsymbol A \\in \\mathbb{C}^{n\\times n}$，如果有$\\mathbb{C}^{n\\times n}$上的一种矩阵范数$\\parallel\\cdot\\parallel$使得$\\parallel \\boldsymbol A\\parallel < 1$，则：\n\n1. 矩阵$\\boldsymbol I \\pm \\boldsymbol A$可逆；\n2. $\\parallel(\\boldsymbol I \\pm \\boldsymbol A)^{-1}\\parallel \\leq \\frac{\\parallel \\boldsymbol I \\parallel}{1-\\parallel \\boldsymbol A \\parallel}$\n3. $\\parallel \\boldsymbol{A}(\\boldsymbol I \\pm \\boldsymbol A)^{-1}\\parallel \\leq \\frac{\\parallel \\boldsymbol A \\parallel}{1-\\parallel \\boldsymbol A \\parallel}$\n\n---\n","slug":"范数","published":1,"updated":"2018-09-30T10:20:47.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq9a4s0t000v3t9k7iim107l","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><h3 id=\"向量范数\"><a href=\"#向量范数\" class=\"headerlink\" title=\"向量范数\"></a>向量范数</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><strong>定义</strong>：定义在$ {\\mathbb{C}}^n $上的一个非负实值函数，记为$\\parallel\\cdot\\parallel$，若该函数满足以下三个条件：即对任意向量$\\boldsymbol x$和$\\boldsymbol y$以及任意常数$\\alpha \\in \\mathbb{C}$</p><ol><li>$\\parallel \\boldsymbol x \\parallel\\geq 0$,并且$\\parallel \\boldsymbol x \\parallel= 0$的充要条件为$\\boldsymbol x =\\boldsymbol 0$;</li><li>$\\parallel \\alpha \\boldsymbol x \\parallel=|\\alpha|\\, \\parallel\\boldsymbol x\\parallel$,</li><li>$\\parallel \\boldsymbol x + \\boldsymbol y\\parallel \\leq \\parallel\\boldsymbol x\\parallel+\\parallel\\boldsymbol y\\parallel$,</li></ol><p>则称$\\parallel\\cdot\\parallel$为上${\\mathbb{C}}^n$的一个<strong>向量范数</strong></p><p>一类有用的向量范数为$p$范数，定义为：<br>$$<br>\\parallel \\boldsymbol x \\parallel_{p}=(\\sum \\limits_{i=1}^{n} |x_i|^{p})^{\\frac{1}{p}},\\quad p\\geq1<br>$$<br>其中最重要的是$1$范数，$2$范数，$\\infty$范数<br>$$<br>\\begin{align}<br>&amp; \\parallel \\boldsymbol x \\parallel_{1}=\\sum \\limits_{i=1}^{n} |x_i|;\\\\<br>&amp; \\parallel \\boldsymbol x \\parallel_{2}=(\\sum \\limits_{i=0}^{n} |x_i|^{2})^{\\frac{1}{2}};\\\\<br>&amp; \\parallel \\boldsymbol x \\parallel_{\\infty}=\\max \\limits_{1\\leq i\\leq n} |x_i|.<br>\\end{align}<br>$$<br>其中$\\infty$范数形式的得出只要利用$p$范数，对$p$取$\\infty$即可，证明略。</p><p>另一常用范数是加权的$p$范数可以表示为：<br>$$<br>\\parallel\\boldsymbol x\\parallel_{\\boldsymbol W} =\\parallel\\boldsymbol{Wx}\\parallel,<br>$$<br>其中$\\boldsymbol W$为对角矩阵，其对角元即为它每个分量的加权系数，更一般地可以取$\\boldsymbol W$为任意非奇异矩阵。</p><h4 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h4><p>关于$p$范数的一个经典性质是<a href=\"https://en.wikipedia.org/wiki/H%C3%B6lder%27s_inequality\" target=\"_blank\" rel=\"noopener\">Hölder不等式</a>：<br>$$\\parallel{\\boldsymbol x}^{T} \\boldsymbol y\\parallel_1 \\leq \\parallel\\boldsymbol x\\parallel_p \\parallel\\boldsymbol y\\parallel_q,\\quad \\frac{1}{p}+\\frac{1}{q}=1.$$<br>对于$2$范数就是著名的Cauchy–Schwarz不等式:<br>$$\\parallel{\\boldsymbol x}^{T} \\boldsymbol y\\parallel_1 \\leq \\parallel\\boldsymbol x\\parallel_2 \\parallel\\boldsymbol y\\parallel_2.$$<br>对于$p$范数，其对应的三角不等式即为<a href=\"https://en.wikipedia.org/wiki/Minkowski_inequality\" target=\"_blank\" rel=\"noopener\">闵可夫斯基不等式</a>:<br>$$\\parallel \\boldsymbol x + \\boldsymbol y\\parallel_p \\leq \\parallel\\boldsymbol x\\parallel_p+\\parallel\\boldsymbol y\\parallel_p.$$</p><details><br><summary>下面证明之（利用到了Hölder不等式）：</summary><br>$$<br>\\begin{align}<br>(\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{p}\\cdot p}<br>&amp; = \\sum \\limits_{i=1}^{n}|x_i+y_i|^{p-1}\\cdot |x_i+y_i| \\\\<br>&amp; \\leq \\sum \\limits_{i=1}^{n}|x_i+y_i|^{p-1}\\cdot |x_i|+\\sum \\limits_{i=1}^{n}|x_i+y_i|^{p-1}\\cdot |y_i|\\\\<br>&amp; \\leq (\\sum \\limits_{i=1}^{n}|x_i+y_i|^{q(p-1)})^{\\frac{1}{q}}(\\sum \\limits_{i=1}^{n}|x_i|^p)^{\\frac{1}{p}}+ (\\sum \\limits_{i=1}^{n}|x_i+y_i|^{q(p-1)})^{\\frac{1}{q}}(\\sum \\limits_{i=1}^{n}|y_i|^p)^{\\frac{1}{p}},\\,\\text{Hölder’s inequality}\\\\<br>&amp; = \\Big[(\\sum \\limits_{i=1}^{n}|x_i|^p)^{\\frac{1}{p}}+(\\sum \\limits_{i=1}^{n}|y_i|^p)^{\\frac{1}{p}}\\Big] (\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{p}}<br>\\end{align}<br>$$<br><br>两边同时除以$(\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{q}}$即可得到闵可夫斯基不等式，如下所示：<br>$$<br>(\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{p}}<br>\\leq<br>(\\sum \\limits_{i=1}^{n}|x_i|^p)^{\\frac{1}{p}}+(\\sum \\limits_{i=1}^{n}|y_i|^p)^{\\frac{1}{p}}<br>$$<br></details><h5 id=\"范数的等价性\"><a href=\"#范数的等价性\" class=\"headerlink\" title=\"范数的等价性\"></a>范数的等价性</h5><p><strong>范数的等价性定理</strong>：设$\\parallel\\cdot\\parallel_{\\alpha}$和$\\parallel\\cdot\\parallel_{\\beta}$为${\\mathbb{C}}^n$上的任意两种向量范数，则存在两个与向量$\\parallel\\boldsymbol x\\parallel$无关的正常数$c_1$和$c_2$，使得下面的不等式成立：<br>$$<br>c_1 \\parallel\\boldsymbol x\\parallel_{\\beta}\\leq \\parallel\\boldsymbol x\\parallel_{\\alpha}\\leq c_2 \\parallel\\boldsymbol x\\parallel_{\\beta},\\quad \\boldsymbol x \\in {\\mathbb{C}}^{\\,n}<br>$$<br>并称$\\parallel \\cdot \\parallel_{\\alpha}\u001d$和$\\parallel \\cdot \\parallel_{\\beta}$为${\\mathbb{C}}^{\\, n}$上的<strong>等价范数</strong>。<br>以下为三个常见不等式：</p><ol><li>$\\parallel\\boldsymbol x\\parallel_{\\infty}\\leq\\parallel\\boldsymbol x\\parallel_1\\leq n\\parallel\\boldsymbol x\\parallel_{\\infty}$;</li><li>$\\frac{1}{\\sqrt n}\\parallel\\boldsymbol x\\parallel_1\\leq\\parallel\\boldsymbol x\\parallel_2\\leq \\parallel\\boldsymbol x\\parallel_1$;</li><li>$\\frac{1}{\\sqrt n}\\parallel\\boldsymbol x\\parallel_2\\leq\\parallel\\boldsymbol x\\parallel_{\\infty}\\leq \\parallel\\boldsymbol x\\parallel_2$.</li></ol><h3 id=\"矩阵范数\"><a href=\"#矩阵范数\" class=\"headerlink\" title=\"矩阵范数\"></a>矩阵范数</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>一个$m\\times n$矩阵可以看成$mn$维向量空间中的一个向量，故矩阵范数的定义等价于向量范数的定义。</p><p><strong>定义</strong>：定义在${\\mathbb{C}}^{m\\times n}$上的一个非负实值函数，记为$\\parallel\\cdot\\parallel$。若$\\forall \\boldsymbol A,\\boldsymbol B\\in {\\mathbb{C}}^{m\\times n}$均满足以下条件：</p><ol><li>非负性：$\\parallel \\boldsymbol A \\parallel\\geq 0$,并且$\\parallel \\boldsymbol A \\parallel= 0$的充要条件为$\\boldsymbol A =\\boldsymbol 0$;</li><li>齐次性：$\\parallel \\alpha \\boldsymbol A \\parallel=|\\alpha|\\, \\parallel\\boldsymbol A\\parallel,c\\in \\mathbb{C}$</li><li>三角不等式：$\\parallel \\boldsymbol A + \\boldsymbol B\\parallel \\leq \\parallel\\boldsymbol A\\parallel+\\parallel\\boldsymbol B\\parallel$,</li></ol><p>则称$\\parallel\\cdot\\parallel$为${\\mathbb{C}}^{m\\times n}$上的矩阵范数。</p><p><strong>相容性</strong>：如果对所有$\\boldsymbol A\\in \\mathbb{R}^{m\\times n}$和$\\boldsymbol B\\in \\mathbb{R}^{n\\times q}$有\b\b$f_1 (\\boldsymbol{AB})\\leq f_2 (\\boldsymbol A)f_3 (\\boldsymbol B)$，则称$\\mathbb{R}^{m\\times q}$，$\\mathbb{R}^{m\\times n}$和$\\mathbb{R}^{n\\times q}$上的范数$f_1$，$f_2$和$f_3$是相互相容的。</p><blockquote><p>有的书上矩阵范数特指满足相容性条件的范数。<br>下面考虑的矩阵范数均是满足相容性的矩阵范数。</p></blockquote><p>其中最常用的矩阵范数有$F$范数（Frobenius范数）：<br>$$<br>\\parallel\\boldsymbol A\\parallel_{F}=\\sqrt{\\sum\\limits_{i=1}^m \\sum\\limits_{j=1}^n |a_{ij}|^2}<br>$$<br>和$p$范数:<br>$$<br>\\parallel\\boldsymbol A\\parallel_{p}=\\sup\\limits_{\\boldsymbol{x} \\neq \\boldsymbol{0}}\\frac{\\parallel\\boldsymbol{Ax}\\parallel_p}{\\parallel\\boldsymbol x\\parallel_p}<br>$$<br>\b很明显，$\\parallel\\boldsymbol A\\parallel_p$是将$\\boldsymbol A$作用到$p$范数单位向量所得到的最大向量的$p$范数：</p><p>\b</p><h4 id=\"由向量范数导出矩阵范数\"><a href=\"#由向量范数导出矩阵范数\" class=\"headerlink\" title=\"由向量范数导出矩阵范数\"></a>由向量范数导出矩阵范数</h4><p>给定$\\mathbb{C}^n$上的向量范数$\\parallel\\cdot\\parallel$，$\\boldsymbol A$为\b$m\\times n$矩阵，定义：<br>$$<br>\\parallel\\boldsymbol{A}\\parallel=\\sup\\limits_{\\boldsymbol{x} \\neq \\boldsymbol{0}}\\bigg(\\frac{\\parallel\\boldsymbol {Ax}\\parallel}{\\parallel\\boldsymbol x\\parallel}\\bigg)=\\sup_{\\parallel\\boldsymbol{x}\\parallel=1}{\\parallel\\boldsymbol {Ax}\\parallel}<br>$$<br>并称$\\parallel\\cdot\\parallel$为向量范数诱导的矩阵范数，简称算子范数。</p><h4 id=\"p-范数诱导的矩阵范数\"><a href=\"#p-范数诱导的矩阵范数\" class=\"headerlink\" title=\"p-范数诱导的矩阵范数\"></a>p-范数诱导的矩阵范数</h4><p>$\\mathbb{C}^m$和$\\mathbb{C}^n$空间上装备的向量范数都是$p$范数时，其诱导的矩阵范数也称为<strong>诱导$p$范数</strong></p><p>$$<br>\\parallel \\boldsymbol{A} \\parallel_{p}=\\sup\\limits_{x \\neq 0}\\parallel\\boldsymbol{A}\\Big(\\frac{\\boldsymbol x}{ \\parallel\\boldsymbol x \\parallel_p}\\Big)\\parallel_p=\\max \\limits_{\\parallel\\boldsymbol x\\parallel_p=1}\\parallel\\boldsymbol{Ax}\\parallel_p=\\max\\limits_{\\boldsymbol{x} \\neq \\boldsymbol{0}}\\frac{\\Big(\\sum\\limits_{i=1}^{n}|\\sum\\limits_{j=1}^{m}A_{ij}x_j|^p\\Big)^{\\frac{1}{p}}}{(\\sum\\limits_{i=1}^{m}|x_i|^p)^{\\frac{1}{p}}}.<br>$$</p><p>对于诱导$p$范数，有三种常用范数：</p><ol><li>$\\parallel \\boldsymbol{A} \\parallel_{1}=\\max\\limits_{1\\leq j\\leq n}\\sum\\limits_{i=1}^{m}|a_{ij}|;$</li><li>$\\parallel \\boldsymbol{A} \\parallel_{2}=\\sqrt{\\lambda_{\\max}(\\boldsymbol{A^{H}A})}$</li><li>$\\parallel \\boldsymbol{A} \\parallel_{\\infty}=\\max\\limits_{1\\leq i\\leq m}\\sum\\limits_{j=1}^{n}|a_{ij}|;$</li></ol><details><br><summary>这里给出3的证明</summary><br>$$<br>\\parallel \\boldsymbol{Ax} \\parallel_{\\infty}=\\max \\limits_{1\\leq i\\leq n}\\big|\\sum\\limits_{j=1}^{n}a_{ij}x_j\\big|\\leq \\max \\limits_{1\\leq i\\leq n}\\sum\\limits_{j=1}^{n}|a_{ij}x_j|\\leq\\max \\limits_{1\\leq i\\leq n}\\sum\\limits_{j=1}^{n}|a_{ij}|\\parallel \\boldsymbol x\\parallel_{\\infty} \\leq \\parallel A \\parallel_{\\infty}\\parallel \\boldsymbol x \\parallel_{\\infty},<br>$$<br>因此:<br>$$<br>\\parallel \\boldsymbol A \\parallel_{\\infty}=\\max\\limits_{\\boldsymbol{x}\\neq\\boldsymbol{0}}\\frac{\\parallel \\boldsymbol{Ax}\\parallel_{\\infty}}{\\parallel \\boldsymbol{x}\\parallel_{\\infty}}\\leq \\max\\limits_{1\\leq i\\leq m}\\sum\\limits_{j=1}^{n}|a_{ij}|<br>$$<br>假定$\\boldsymbol A$的第$k$行非零，且定义向量$z\\in\\mathbb{C}^n$为:<br><img src=\"/images/fanshu.png\" width=\"240\" height=\"240\"><br>于是$\\parallel \\boldsymbol z \\parallel_{\\infty}=1$，且对所有$j=1,2,\\dots ,n$，有$a_{kj}z_{j}=|a_{kj}|$，并且<br>$$<br>\\max\\limits_{\\parallel \\boldsymbol x\\parallel_{\\infty}=1}\\parallel \\boldsymbol{Ax}\\parallel_{\\infty}\\geq\\parallel \\boldsymbol{Az}\\parallel_{\\infty}=\\max\\limits_{1\\leq i\\leq n}\\big|\\sum\\limits_{j=1}^{n}a_{ij}z_{j}\\big|\\geq\\big|\\sum\\limits_{j=1}^{n}a_{kj}z_{j}\\big|=\\sum\\limits_{j=1}^{n}|a_{kj}|.<br>$$<br>因此<br>$$<br>\\max\\limits_{\\parallel \\boldsymbol x\\parallel_{\\infty}=1}\\parallel \\boldsymbol{Ax}\\parallel_{\\infty}\\geq \\max\\limits_{1\\leq i\\leq m}\\sum\\limits_{j=1}^{n}|a_{ij}|<br>$$<br></details><p>对于以上三个矩阵范数，我们有：</p><p>$$<br>\\parallel \\boldsymbol{A} \\parallel _{2}^{2} \\leq\\parallel \\boldsymbol{A} \\parallel _{1}\\, \\parallel \\boldsymbol{A} \\parallel _{\\infty}<br>$$</p><p><strong>推论</strong> 对任何算子范数，单位矩阵$\\boldsymbol I$的范数为1。</p><blockquote><p>练习：设$\\boldsymbol A$为n阶非奇异矩阵，$\\boldsymbol U$为n阶酉矩阵,，证明：</p><p>$\\parallel \\boldsymbol U\\parallel_2=1$;</p><p>$\\parallel \\boldsymbol{AU}\\parallel_2=\\parallel \\boldsymbol{UA}\\parallel_2=\\parallel \\boldsymbol{A}\\parallel_2$;</p><p>$\\parallel \\boldsymbol{A}\\parallel_F=\\parallel \\boldsymbol{UA}\\parallel_F=\\parallel \\boldsymbol{AV}\\parallel_F=\\parallel \\boldsymbol{UAV}\\parallel_F$</p></blockquote><p><strong>定义：</strong><br>矩阵$\\boldsymbol A$的<strong>谱</strong>为：$\\sigma(\\boldsymbol{A})=$ &#123; $\\lambda \\big|\\lambda $为$\\boldsymbol{A}$的特征值 &#125;。<br>矩阵$\\boldsymbol A$的<strong>谱半径</strong>为：$\\rho(\\boldsymbol{A})=\\max$ &#123; $|\\lambda| \\big|\\lambda $为$\\boldsymbol{A}$的特征值 &#125;。</p><p><strong>定理</strong> 设$\\parallel\\cdot\\parallel$为$\\mathbb{C}^{n\\times n}$矩阵空间的一种矩阵范数，则对任意的n阶方阵$\\boldsymbol A$均有：<br>$$<br>\\rho(\\boldsymbol A)\\leq \\parallel \\boldsymbol A \\parallel.<br>$$<br>特别的，当$\\boldsymbol A$为对称矩阵时:<br>$$<br>\\rho(\\boldsymbol A)=\\parallel \\boldsymbol A \\parallel_{2}.<br>$$<br><strong>定理</strong> 对于任意$\\varepsilon &gt; 0$,存在$\\mathbb{C}^{n\\times n}$矩阵空间的一种算子范数$\\parallel\\cdot\\parallel$有：<br>$$<br>\\parallel \\boldsymbol A \\parallel\\leq\\rho(\\boldsymbol A)+\\varepsilon.<br>$$</p><p><strong>定理</strong> 设$\\boldsymbol A \\in \\mathbb{C}^{n\\times n}$，如果有$\\mathbb{C}^{n\\times n}$上的一种矩阵范数$\\parallel\\cdot\\parallel$使得$\\parallel \\boldsymbol A\\parallel &lt; 1$，则：</p><ol><li>矩阵$\\boldsymbol I \\pm \\boldsymbol A$可逆；</li><li>$\\parallel(\\boldsymbol I \\pm \\boldsymbol A)^{-1}\\parallel \\leq \\frac{\\parallel \\boldsymbol I \\parallel}{1-\\parallel \\boldsymbol A \\parallel}$</li><li>$\\parallel \\boldsymbol{A}(\\boldsymbol I \\pm \\boldsymbol A)^{-1}\\parallel \\leq \\frac{\\parallel \\boldsymbol A \\parallel}{1-\\parallel \\boldsymbol A \\parallel}$</li></ol><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><h3 id=\"向量范数\"><a href=\"#向量范数\" class=\"headerlink\" title=\"向量范数\"></a>向量范数</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p><strong>定义</strong>：定义在$ {\\mathbb{C}}^n $上的一个非负实值函数，记为$\\parallel\\cdot\\parallel$，若该函数满足以下三个条件：即对任意向量$\\boldsymbol x$和$\\boldsymbol y$以及任意常数$\\alpha \\in \\mathbb{C}$</p><ol><li>$\\parallel \\boldsymbol x \\parallel\\geq 0$,并且$\\parallel \\boldsymbol x \\parallel= 0$的充要条件为$\\boldsymbol x =\\boldsymbol 0$;</li><li>$\\parallel \\alpha \\boldsymbol x \\parallel=|\\alpha|\\, \\parallel\\boldsymbol x\\parallel$,</li><li>$\\parallel \\boldsymbol x + \\boldsymbol y\\parallel \\leq \\parallel\\boldsymbol x\\parallel+\\parallel\\boldsymbol y\\parallel$,</li></ol><p>则称$\\parallel\\cdot\\parallel$为上${\\mathbb{C}}^n$的一个<strong>向量范数</strong></p><p>一类有用的向量范数为$p$范数，定义为：<br>$$<br>\\parallel \\boldsymbol x \\parallel_{p}=(\\sum \\limits_{i=1}^{n} |x_i|^{p})^{\\frac{1}{p}},\\quad p\\geq1<br>$$<br>其中最重要的是$1$范数，$2$范数，$\\infty$范数<br>$$<br>\\begin{align}<br>&amp; \\parallel \\boldsymbol x \\parallel_{1}=\\sum \\limits_{i=1}^{n} |x_i|;\\\\<br>&amp; \\parallel \\boldsymbol x \\parallel_{2}=(\\sum \\limits_{i=0}^{n} |x_i|^{2})^{\\frac{1}{2}};\\\\<br>&amp; \\parallel \\boldsymbol x \\parallel_{\\infty}=\\max \\limits_{1\\leq i\\leq n} |x_i|.<br>\\end{align}<br>$$<br>其中$\\infty$范数形式的得出只要利用$p$范数，对$p$取$\\infty$即可，证明略。</p><p>另一常用范数是加权的$p$范数可以表示为：<br>$$<br>\\parallel\\boldsymbol x\\parallel_{\\boldsymbol W} =\\parallel\\boldsymbol{Wx}\\parallel,<br>$$<br>其中$\\boldsymbol W$为对角矩阵，其对角元即为它每个分量的加权系数，更一般地可以取$\\boldsymbol W$为任意非奇异矩阵。</p><h4 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h4><p>关于$p$范数的一个经典性质是<a href=\"https://en.wikipedia.org/wiki/H%C3%B6lder%27s_inequality\" target=\"_blank\" rel=\"noopener\">Hölder不等式</a>：<br>$$\\parallel{\\boldsymbol x}^{T} \\boldsymbol y\\parallel_1 \\leq \\parallel\\boldsymbol x\\parallel_p \\parallel\\boldsymbol y\\parallel_q,\\quad \\frac{1}{p}+\\frac{1}{q}=1.$$<br>对于$2$范数就是著名的Cauchy–Schwarz不等式:<br>$$\\parallel{\\boldsymbol x}^{T} \\boldsymbol y\\parallel_1 \\leq \\parallel\\boldsymbol x\\parallel_2 \\parallel\\boldsymbol y\\parallel_2.$$<br>对于$p$范数，其对应的三角不等式即为<a href=\"https://en.wikipedia.org/wiki/Minkowski_inequality\" target=\"_blank\" rel=\"noopener\">闵可夫斯基不等式</a>:<br>$$\\parallel \\boldsymbol x + \\boldsymbol y\\parallel_p \\leq \\parallel\\boldsymbol x\\parallel_p+\\parallel\\boldsymbol y\\parallel_p.$$</p><details><br><summary>下面证明之（利用到了Hölder不等式）：</summary><br>$$<br>\\begin{align}<br>(\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{p}\\cdot p}<br>&amp; = \\sum \\limits_{i=1}^{n}|x_i+y_i|^{p-1}\\cdot |x_i+y_i| \\\\<br>&amp; \\leq \\sum \\limits_{i=1}^{n}|x_i+y_i|^{p-1}\\cdot |x_i|+\\sum \\limits_{i=1}^{n}|x_i+y_i|^{p-1}\\cdot |y_i|\\\\<br>&amp; \\leq (\\sum \\limits_{i=1}^{n}|x_i+y_i|^{q(p-1)})^{\\frac{1}{q}}(\\sum \\limits_{i=1}^{n}|x_i|^p)^{\\frac{1}{p}}+ (\\sum \\limits_{i=1}^{n}|x_i+y_i|^{q(p-1)})^{\\frac{1}{q}}(\\sum \\limits_{i=1}^{n}|y_i|^p)^{\\frac{1}{p}},\\,\\text{Hölder’s inequality}\\\\<br>&amp; = \\Big[(\\sum \\limits_{i=1}^{n}|x_i|^p)^{\\frac{1}{p}}+(\\sum \\limits_{i=1}^{n}|y_i|^p)^{\\frac{1}{p}}\\Big] (\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{p}}<br>\\end{align}<br>$$<br><br>两边同时除以$(\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{q}}$即可得到闵可夫斯基不等式，如下所示：<br>$$<br>(\\sum \\limits_{i=1}^{n}|x_i+y_i|^p)^{\\frac{1}{p}}<br>\\leq<br>(\\sum \\limits_{i=1}^{n}|x_i|^p)^{\\frac{1}{p}}+(\\sum \\limits_{i=1}^{n}|y_i|^p)^{\\frac{1}{p}}<br>$$<br></details><h5 id=\"范数的等价性\"><a href=\"#范数的等价性\" class=\"headerlink\" title=\"范数的等价性\"></a>范数的等价性</h5><p><strong>范数的等价性定理</strong>：设$\\parallel\\cdot\\parallel_{\\alpha}$和$\\parallel\\cdot\\parallel_{\\beta}$为${\\mathbb{C}}^n$上的任意两种向量范数，则存在两个与向量$\\parallel\\boldsymbol x\\parallel$无关的正常数$c_1$和$c_2$，使得下面的不等式成立：<br>$$<br>c_1 \\parallel\\boldsymbol x\\parallel_{\\beta}\\leq \\parallel\\boldsymbol x\\parallel_{\\alpha}\\leq c_2 \\parallel\\boldsymbol x\\parallel_{\\beta},\\quad \\boldsymbol x \\in {\\mathbb{C}}^{\\,n}<br>$$<br>并称$\\parallel \\cdot \\parallel_{\\alpha}\u001d$和$\\parallel \\cdot \\parallel_{\\beta}$为${\\mathbb{C}}^{\\, n}$上的<strong>等价范数</strong>。<br>以下为三个常见不等式：</p><ol><li>$\\parallel\\boldsymbol x\\parallel_{\\infty}\\leq\\parallel\\boldsymbol x\\parallel_1\\leq n\\parallel\\boldsymbol x\\parallel_{\\infty}$;</li><li>$\\frac{1}{\\sqrt n}\\parallel\\boldsymbol x\\parallel_1\\leq\\parallel\\boldsymbol x\\parallel_2\\leq \\parallel\\boldsymbol x\\parallel_1$;</li><li>$\\frac{1}{\\sqrt n}\\parallel\\boldsymbol x\\parallel_2\\leq\\parallel\\boldsymbol x\\parallel_{\\infty}\\leq \\parallel\\boldsymbol x\\parallel_2$.</li></ol><h3 id=\"矩阵范数\"><a href=\"#矩阵范数\" class=\"headerlink\" title=\"矩阵范数\"></a>矩阵范数</h3><h4 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>一个$m\\times n$矩阵可以看成$mn$维向量空间中的一个向量，故矩阵范数的定义等价于向量范数的定义。</p><p><strong>定义</strong>：定义在${\\mathbb{C}}^{m\\times n}$上的一个非负实值函数，记为$\\parallel\\cdot\\parallel$。若$\\forall \\boldsymbol A,\\boldsymbol B\\in {\\mathbb{C}}^{m\\times n}$均满足以下条件：</p><ol><li>非负性：$\\parallel \\boldsymbol A \\parallel\\geq 0$,并且$\\parallel \\boldsymbol A \\parallel= 0$的充要条件为$\\boldsymbol A =\\boldsymbol 0$;</li><li>齐次性：$\\parallel \\alpha \\boldsymbol A \\parallel=|\\alpha|\\, \\parallel\\boldsymbol A\\parallel,c\\in \\mathbb{C}$</li><li>三角不等式：$\\parallel \\boldsymbol A + \\boldsymbol B\\parallel \\leq \\parallel\\boldsymbol A\\parallel+\\parallel\\boldsymbol B\\parallel$,</li></ol><p>则称$\\parallel\\cdot\\parallel$为${\\mathbb{C}}^{m\\times n}$上的矩阵范数。</p><p><strong>相容性</strong>：如果对所有$\\boldsymbol A\\in \\mathbb{R}^{m\\times n}$和$\\boldsymbol B\\in \\mathbb{R}^{n\\times q}$有\b\b$f_1 (\\boldsymbol{AB})\\leq f_2 (\\boldsymbol A)f_3 (\\boldsymbol B)$，则称$\\mathbb{R}^{m\\times q}$，$\\mathbb{R}^{m\\times n}$和$\\mathbb{R}^{n\\times q}$上的范数$f_1$，$f_2$和$f_3$是相互相容的。</p><blockquote><p>有的书上矩阵范数特指满足相容性条件的范数。<br>下面考虑的矩阵范数均是满足相容性的矩阵范数。</p></blockquote><p>其中最常用的矩阵范数有$F$范数（Frobenius范数）：<br>$$<br>\\parallel\\boldsymbol A\\parallel_{F}=\\sqrt{\\sum\\limits_{i=1}^m \\sum\\limits_{j=1}^n |a_{ij}|^2}<br>$$<br>和$p$范数:<br>$$<br>\\parallel\\boldsymbol A\\parallel_{p}=\\sup\\limits_{\\boldsymbol{x} \\neq \\boldsymbol{0}}\\frac{\\parallel\\boldsymbol{Ax}\\parallel_p}{\\parallel\\boldsymbol x\\parallel_p}<br>$$<br>\b很明显，$\\parallel\\boldsymbol A\\parallel_p$是将$\\boldsymbol A$作用到$p$范数单位向量所得到的最大向量的$p$范数：</p><p>\b</p><h4 id=\"由向量范数导出矩阵范数\"><a href=\"#由向量范数导出矩阵范数\" class=\"headerlink\" title=\"由向量范数导出矩阵范数\"></a>由向量范数导出矩阵范数</h4><p>给定$\\mathbb{C}^n$上的向量范数$\\parallel\\cdot\\parallel$，$\\boldsymbol A$为\b$m\\times n$矩阵，定义：<br>$$<br>\\parallel\\boldsymbol{A}\\parallel=\\sup\\limits_{\\boldsymbol{x} \\neq \\boldsymbol{0}}\\bigg(\\frac{\\parallel\\boldsymbol {Ax}\\parallel}{\\parallel\\boldsymbol x\\parallel}\\bigg)=\\sup_{\\parallel\\boldsymbol{x}\\parallel=1}{\\parallel\\boldsymbol {Ax}\\parallel}<br>$$<br>并称$\\parallel\\cdot\\parallel$为向量范数诱导的矩阵范数，简称算子范数。</p><h4 id=\"p-范数诱导的矩阵范数\"><a href=\"#p-范数诱导的矩阵范数\" class=\"headerlink\" title=\"p-范数诱导的矩阵范数\"></a>p-范数诱导的矩阵范数</h4><p>$\\mathbb{C}^m$和$\\mathbb{C}^n$空间上装备的向量范数都是$p$范数时，其诱导的矩阵范数也称为<strong>诱导$p$范数</strong></p><p>$$<br>\\parallel \\boldsymbol{A} \\parallel_{p}=\\sup\\limits_{x \\neq 0}\\parallel\\boldsymbol{A}\\Big(\\frac{\\boldsymbol x}{ \\parallel\\boldsymbol x \\parallel_p}\\Big)\\parallel_p=\\max \\limits_{\\parallel\\boldsymbol x\\parallel_p=1}\\parallel\\boldsymbol{Ax}\\parallel_p=\\max\\limits_{\\boldsymbol{x} \\neq \\boldsymbol{0}}\\frac{\\Big(\\sum\\limits_{i=1}^{n}|\\sum\\limits_{j=1}^{m}A_{ij}x_j|^p\\Big)^{\\frac{1}{p}}}{(\\sum\\limits_{i=1}^{m}|x_i|^p)^{\\frac{1}{p}}}.<br>$$</p><p>对于诱导$p$范数，有三种常用范数：</p><ol><li>$\\parallel \\boldsymbol{A} \\parallel_{1}=\\max\\limits_{1\\leq j\\leq n}\\sum\\limits_{i=1}^{m}|a_{ij}|;$</li><li>$\\parallel \\boldsymbol{A} \\parallel_{2}=\\sqrt{\\lambda_{\\max}(\\boldsymbol{A^{H}A})}$</li><li>$\\parallel \\boldsymbol{A} \\parallel_{\\infty}=\\max\\limits_{1\\leq i\\leq m}\\sum\\limits_{j=1}^{n}|a_{ij}|;$</li></ol><details><br><summary>这里给出3的证明</summary><br>$$<br>\\parallel \\boldsymbol{Ax} \\parallel_{\\infty}=\\max \\limits_{1\\leq i\\leq n}\\big|\\sum\\limits_{j=1}^{n}a_{ij}x_j\\big|\\leq \\max \\limits_{1\\leq i\\leq n}\\sum\\limits_{j=1}^{n}|a_{ij}x_j|\\leq\\max \\limits_{1\\leq i\\leq n}\\sum\\limits_{j=1}^{n}|a_{ij}|\\parallel \\boldsymbol x\\parallel_{\\infty} \\leq \\parallel A \\parallel_{\\infty}\\parallel \\boldsymbol x \\parallel_{\\infty},<br>$$<br>因此:<br>$$<br>\\parallel \\boldsymbol A \\parallel_{\\infty}=\\max\\limits_{\\boldsymbol{x}\\neq\\boldsymbol{0}}\\frac{\\parallel \\boldsymbol{Ax}\\parallel_{\\infty}}{\\parallel \\boldsymbol{x}\\parallel_{\\infty}}\\leq \\max\\limits_{1\\leq i\\leq m}\\sum\\limits_{j=1}^{n}|a_{ij}|<br>$$<br>假定$\\boldsymbol A$的第$k$行非零，且定义向量$z\\in\\mathbb{C}^n$为:<br><img src=\"/images/fanshu.png\" width=\"240\" height=\"240\"><br>于是$\\parallel \\boldsymbol z \\parallel_{\\infty}=1$，且对所有$j=1,2,\\dots ,n$，有$a_{kj}z_{j}=|a_{kj}|$，并且<br>$$<br>\\max\\limits_{\\parallel \\boldsymbol x\\parallel_{\\infty}=1}\\parallel \\boldsymbol{Ax}\\parallel_{\\infty}\\geq\\parallel \\boldsymbol{Az}\\parallel_{\\infty}=\\max\\limits_{1\\leq i\\leq n}\\big|\\sum\\limits_{j=1}^{n}a_{ij}z_{j}\\big|\\geq\\big|\\sum\\limits_{j=1}^{n}a_{kj}z_{j}\\big|=\\sum\\limits_{j=1}^{n}|a_{kj}|.<br>$$<br>因此<br>$$<br>\\max\\limits_{\\parallel \\boldsymbol x\\parallel_{\\infty}=1}\\parallel \\boldsymbol{Ax}\\parallel_{\\infty}\\geq \\max\\limits_{1\\leq i\\leq m}\\sum\\limits_{j=1}^{n}|a_{ij}|<br>$$<br></details><p>对于以上三个矩阵范数，我们有：</p><p>$$<br>\\parallel \\boldsymbol{A} \\parallel _{2}^{2} \\leq\\parallel \\boldsymbol{A} \\parallel _{1}\\, \\parallel \\boldsymbol{A} \\parallel _{\\infty}<br>$$</p><p><strong>推论</strong> 对任何算子范数，单位矩阵$\\boldsymbol I$的范数为1。</p><blockquote><p>练习：设$\\boldsymbol A$为n阶非奇异矩阵，$\\boldsymbol U$为n阶酉矩阵,，证明：</p><p>$\\parallel \\boldsymbol U\\parallel_2=1$;</p><p>$\\parallel \\boldsymbol{AU}\\parallel_2=\\parallel \\boldsymbol{UA}\\parallel_2=\\parallel \\boldsymbol{A}\\parallel_2$;</p><p>$\\parallel \\boldsymbol{A}\\parallel_F=\\parallel \\boldsymbol{UA}\\parallel_F=\\parallel \\boldsymbol{AV}\\parallel_F=\\parallel \\boldsymbol{UAV}\\parallel_F$</p></blockquote><p><strong>定义：</strong><br>矩阵$\\boldsymbol A$的<strong>谱</strong>为：$\\sigma(\\boldsymbol{A})=$ &#123; $\\lambda \\big|\\lambda $为$\\boldsymbol{A}$的特征值 &#125;。<br>矩阵$\\boldsymbol A$的<strong>谱半径</strong>为：$\\rho(\\boldsymbol{A})=\\max$ &#123; $|\\lambda| \\big|\\lambda $为$\\boldsymbol{A}$的特征值 &#125;。</p><p><strong>定理</strong> 设$\\parallel\\cdot\\parallel$为$\\mathbb{C}^{n\\times n}$矩阵空间的一种矩阵范数，则对任意的n阶方阵$\\boldsymbol A$均有：<br>$$<br>\\rho(\\boldsymbol A)\\leq \\parallel \\boldsymbol A \\parallel.<br>$$<br>特别的，当$\\boldsymbol A$为对称矩阵时:<br>$$<br>\\rho(\\boldsymbol A)=\\parallel \\boldsymbol A \\parallel_{2}.<br>$$<br><strong>定理</strong> 对于任意$\\varepsilon &gt; 0$,存在$\\mathbb{C}^{n\\times n}$矩阵空间的一种算子范数$\\parallel\\cdot\\parallel$有：<br>$$<br>\\parallel \\boldsymbol A \\parallel\\leq\\rho(\\boldsymbol A)+\\varepsilon.<br>$$</p><p><strong>定理</strong> 设$\\boldsymbol A \\in \\mathbb{C}^{n\\times n}$，如果有$\\mathbb{C}^{n\\times n}$上的一种矩阵范数$\\parallel\\cdot\\parallel$使得$\\parallel \\boldsymbol A\\parallel &lt; 1$，则：</p><ol><li>矩阵$\\boldsymbol I \\pm \\boldsymbol A$可逆；</li><li>$\\parallel(\\boldsymbol I \\pm \\boldsymbol A)^{-1}\\parallel \\leq \\frac{\\parallel \\boldsymbol I \\parallel}{1-\\parallel \\boldsymbol A \\parallel}$</li><li>$\\parallel \\boldsymbol{A}(\\boldsymbol I \\pm \\boldsymbol A)^{-1}\\parallel \\leq \\frac{\\parallel \\boldsymbol A \\parallel}{1-\\parallel \\boldsymbol A \\parallel}$</li></ol><hr><!-- rebuild by neat -->"},{"title":"组合问题递归实现","abbrlink":18087,"date":"2018-09-23T12:28:11.000Z","_content":"\n### 组合问题递归实现\n\n问题：在n个不同物体中选取k个，列举出所有选取情况。  \n>思路很简单就是按照数数的方式把每种情况数出来，也就是第一次选取一个物体，第二次在剩余的中选取一个，直到选取k个。用数学公式就是帕斯卡公式$$C_{n}^{k}=C_{n}^{k-1}+C_{n-1}^{k-1}\\Rightarrow C_{n}^{k}=\\sum \\limits_{s=0}^{k-1}{k-1 \\choose s}C_{n-s}^{1}$$\n\nPython代码实现：\n\n```python\n'''\nproject为n个不同的物体\n'''\ndef combine(project, n, k, K, lst2):\n    for i in range(n, k-1, -1):\n        lst2[k-1] = i-1\n        if k>1:\n            combine(project, i-1, k-1, K, lst2)\n        else:\n            for j in range(K-1,-1,-1):\n                print(project[lst2[j]],end='')\n            print(\"\\n\")\n```\n\n---\n","source":"_posts/组合.md","raw":"---\ntitle: 组合问题递归实现\ncategories: 计算机\ntags: python\nabbrlink: 18087\ndate: 2018-09-23 20:28:11\n---\n\n### 组合问题递归实现\n\n问题：在n个不同物体中选取k个，列举出所有选取情况。  \n>思路很简单就是按照数数的方式把每种情况数出来，也就是第一次选取一个物体，第二次在剩余的中选取一个，直到选取k个。用数学公式就是帕斯卡公式$$C_{n}^{k}=C_{n}^{k-1}+C_{n-1}^{k-1}\\Rightarrow C_{n}^{k}=\\sum \\limits_{s=0}^{k-1}{k-1 \\choose s}C_{n-s}^{1}$$\n\nPython代码实现：\n\n```python\n'''\nproject为n个不同的物体\n'''\ndef combine(project, n, k, K, lst2):\n    for i in range(n, k-1, -1):\n        lst2[k-1] = i-1\n        if k>1:\n            combine(project, i-1, k-1, K, lst2)\n        else:\n            for j in range(K-1,-1,-1):\n                print(project[lst2[j]],end='')\n            print(\"\\n\")\n```\n\n---\n","slug":"组合","published":1,"updated":"2018-09-27T07:17:19.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq9a4s0u000w3t9kgemz90x1","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><h3 id=\"组合问题递归实现\"><a href=\"#组合问题递归实现\" class=\"headerlink\" title=\"组合问题递归实现\"></a>组合问题递归实现</h3><p>问题：在n个不同物体中选取k个，列举出所有选取情况。</p><blockquote><p>思路很简单就是按照数数的方式把每种情况数出来，也就是第一次选取一个物体，第二次在剩余的中选取一个，直到选取k个。用数学公式就是帕斯卡公式$$C_{n}^{k}=C_{n}^{k-1}+C_{n-1}^{k-1}\\Rightarrow C_{n}^{k}=\\sum \\limits_{s=0}^{k-1}{k-1 \\choose s}C_{n-s}^{1}$$</p></blockquote><p>Python代码实现：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">project为n个不同的物体</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">combine</span><span class=\"params\">(project, n, k, K, lst2)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n, k<span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        lst2[k<span class=\"number\">-1</span>] = i<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> k&gt;<span class=\"number\">1</span>:</span><br><span class=\"line\">            combine(project, i<span class=\"number\">-1</span>, k<span class=\"number\">-1</span>, K, lst2)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(K<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">                print(project[lst2[j]],end=<span class=\"string\">''</span>)</span><br><span class=\"line\">            print(<span class=\"string\">\"\\n\"</span>)</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><h3 id=\"组合问题递归实现\"><a href=\"#组合问题递归实现\" class=\"headerlink\" title=\"组合问题递归实现\"></a>组合问题递归实现</h3><p>问题：在n个不同物体中选取k个，列举出所有选取情况。</p><blockquote><p>思路很简单就是按照数数的方式把每种情况数出来，也就是第一次选取一个物体，第二次在剩余的中选取一个，直到选取k个。用数学公式就是帕斯卡公式$$C_{n}^{k}=C_{n}^{k-1}+C_{n-1}^{k-1}\\Rightarrow C_{n}^{k}=\\sum \\limits_{s=0}^{k-1}{k-1 \\choose s}C_{n-s}^{1}$$</p></blockquote><p>Python代码实现：</p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">project为n个不同的物体</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">combine</span><span class=\"params\">(project, n, k, K, lst2)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n, k<span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">        lst2[k<span class=\"number\">-1</span>] = i<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> k&gt;<span class=\"number\">1</span>:</span><br><span class=\"line\">            combine(project, i<span class=\"number\">-1</span>, k<span class=\"number\">-1</span>, K, lst2)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(K<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">                print(project[lst2[j]],end=<span class=\"string\">''</span>)</span><br><span class=\"line\">            print(<span class=\"string\">\"\\n\"</span>)</span><br></pre></td></tr></table></figure><hr><!-- rebuild by neat -->"},{"title":"老鼠和毒药","abbrlink":60189,"date":"2018-09-23T12:28:11.000Z","_content":"\n有 1000 个一模一样的瓶子，其中有 999 瓶是普通的水，有一瓶是毒药。任何喝下毒药的生物都会在一星期之后死亡。现在，你只有 10 只小白鼠和一星期的时间，如何检验出哪个瓶子里有毒药？\n\n### 思考：\n\n我们有100个囚犯，这100个囚犯要枪毙。首先100个囚犯站一排报数，报到奇数就枪毙，报到偶数就留下，留下之后再站一排，然后同样规则继续枪毙，直到剩下一个人就把它放了，问：如果你想要被放掉，你最开始应该站在什么位置？\n\n### 推广：\n\n如果你有两个星期的时间（换句话说你可以做两轮实验），为了从 1000 个瓶子中找出毒药，你最少需要几只老鼠？注意，在第一轮实验中死掉的老鼠，就无法继续参与第二次实验了。\n\n### 答案：\n<details>\n  <summary>点击查看</summary>\n  <p> 将1000个瓶子按0～999标号并表示成10位二进制数的形式，第一个老鼠喝所有瓶子编号第一位为1的瓶子，第二个老鼠喝所有瓶子编号第二位为1的瓶子，以此类推，第十个老鼠就喝所有瓶子编号第十位为1的瓶子。一星期后，第几只老鼠死了就在第几位上写下1，没死就写上0，这样就得到瓶子的编号了，很明显10只老鼠最大验证毒药瓶子数为$2^{10}=1024$。</p>\n  <p>思考：64号位置，枪毙规律就是100个编号(1,2,$\\cdots$,100)无限次每次地板除2，每次保留没有余数的，直到只剩一个数为止，余下的那个数这必然是$2^n$。</p>\n  <p> 推广自行思考。</p>\n</details>\n\n---\n","source":"_posts/老鼠和毒药.md","raw":"---\ntitle: 老鼠和毒药\ncategories: 数学\ntags: 二进制\nabbrlink: 60189\ndate: 2018-09-23 20:28:11\n---\n\n有 1000 个一模一样的瓶子，其中有 999 瓶是普通的水，有一瓶是毒药。任何喝下毒药的生物都会在一星期之后死亡。现在，你只有 10 只小白鼠和一星期的时间，如何检验出哪个瓶子里有毒药？\n\n### 思考：\n\n我们有100个囚犯，这100个囚犯要枪毙。首先100个囚犯站一排报数，报到奇数就枪毙，报到偶数就留下，留下之后再站一排，然后同样规则继续枪毙，直到剩下一个人就把它放了，问：如果你想要被放掉，你最开始应该站在什么位置？\n\n### 推广：\n\n如果你有两个星期的时间（换句话说你可以做两轮实验），为了从 1000 个瓶子中找出毒药，你最少需要几只老鼠？注意，在第一轮实验中死掉的老鼠，就无法继续参与第二次实验了。\n\n### 答案：\n<details>\n  <summary>点击查看</summary>\n  <p> 将1000个瓶子按0～999标号并表示成10位二进制数的形式，第一个老鼠喝所有瓶子编号第一位为1的瓶子，第二个老鼠喝所有瓶子编号第二位为1的瓶子，以此类推，第十个老鼠就喝所有瓶子编号第十位为1的瓶子。一星期后，第几只老鼠死了就在第几位上写下1，没死就写上0，这样就得到瓶子的编号了，很明显10只老鼠最大验证毒药瓶子数为$2^{10}=1024$。</p>\n  <p>思考：64号位置，枪毙规律就是100个编号(1,2,$\\cdots$,100)无限次每次地板除2，每次保留没有余数的，直到只剩一个数为止，余下的那个数这必然是$2^n$。</p>\n  <p> 推广自行思考。</p>\n</details>\n\n---\n","slug":"老鼠和毒药","published":1,"updated":"2018-09-27T07:16:55.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq9a4s0v000z3t9ky3k7qudb","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><p>有 1000 个一模一样的瓶子，其中有 999 瓶是普通的水，有一瓶是毒药。任何喝下毒药的生物都会在一星期之后死亡。现在，你只有 10 只小白鼠和一星期的时间，如何检验出哪个瓶子里有毒药？</p><h3 id=\"思考：\"><a href=\"#思考：\" class=\"headerlink\" title=\"思考：\"></a>思考：</h3><p>我们有100个囚犯，这100个囚犯要枪毙。首先100个囚犯站一排报数，报到奇数就枪毙，报到偶数就留下，留下之后再站一排，然后同样规则继续枪毙，直到剩下一个人就把它放了，问：如果你想要被放掉，你最开始应该站在什么位置？</p><h3 id=\"推广：\"><a href=\"#推广：\" class=\"headerlink\" title=\"推广：\"></a>推广：</h3><p>如果你有两个星期的时间（换句话说你可以做两轮实验），为了从 1000 个瓶子中找出毒药，你最少需要几只老鼠？注意，在第一轮实验中死掉的老鼠，就无法继续参与第二次实验了。</p><h3 id=\"答案：\"><a href=\"#答案：\" class=\"headerlink\" title=\"答案：\"></a>答案：</h3><details><br><summary>点击查看</summary><br><p>将1000个瓶子按0～999标号并表示成10位二进制数的形式，第一个老鼠喝所有瓶子编号第一位为1的瓶子，第二个老鼠喝所有瓶子编号第二位为1的瓶子，以此类推，第十个老鼠就喝所有瓶子编号第十位为1的瓶子。一星期后，第几只老鼠死了就在第几位上写下1，没死就写上0，这样就得到瓶子的编号了，很明显10只老鼠最大验证毒药瓶子数为$2^{10}=1024$。</p><br><p>思考：64号位置，枪毙规律就是100个编号(1,2,$\\cdots$,100)无限次每次地板除2，每次保留没有余数的，直到只剩一个数为止，余下的那个数这必然是$2^n$。</p><br><p>推广自行思考。</p><br></details><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><p>有 1000 个一模一样的瓶子，其中有 999 瓶是普通的水，有一瓶是毒药。任何喝下毒药的生物都会在一星期之后死亡。现在，你只有 10 只小白鼠和一星期的时间，如何检验出哪个瓶子里有毒药？</p><h3 id=\"思考：\"><a href=\"#思考：\" class=\"headerlink\" title=\"思考：\"></a>思考：</h3><p>我们有100个囚犯，这100个囚犯要枪毙。首先100个囚犯站一排报数，报到奇数就枪毙，报到偶数就留下，留下之后再站一排，然后同样规则继续枪毙，直到剩下一个人就把它放了，问：如果你想要被放掉，你最开始应该站在什么位置？</p><h3 id=\"推广：\"><a href=\"#推广：\" class=\"headerlink\" title=\"推广：\"></a>推广：</h3><p>如果你有两个星期的时间（换句话说你可以做两轮实验），为了从 1000 个瓶子中找出毒药，你最少需要几只老鼠？注意，在第一轮实验中死掉的老鼠，就无法继续参与第二次实验了。</p><h3 id=\"答案：\"><a href=\"#答案：\" class=\"headerlink\" title=\"答案：\"></a>答案：</h3><details><br><summary>点击查看</summary><br><p>将1000个瓶子按0～999标号并表示成10位二进制数的形式，第一个老鼠喝所有瓶子编号第一位为1的瓶子，第二个老鼠喝所有瓶子编号第二位为1的瓶子，以此类推，第十个老鼠就喝所有瓶子编号第十位为1的瓶子。一星期后，第几只老鼠死了就在第几位上写下1，没死就写上0，这样就得到瓶子的编号了，很明显10只老鼠最大验证毒药瓶子数为$2^{10}=1024$。</p><br><p>思考：64号位置，枪毙规律就是100个编号(1,2,$\\cdots$,100)无限次每次地板除2，每次保留没有余数的，直到只剩一个数为止，余下的那个数这必然是$2^n$。</p><br><p>推广自行思考。</p><br></details><hr><!-- rebuild by neat -->"},{"title":"求解线性方程组的迭代法","abbrlink":59676,"date":"2018-11-06T01:28:45.000Z","_content":"\n\n### 一般迭代法\n#### 引言\n\n对于一般的线性方程组直接求解有高斯消去法，对称矩阵的Cholesky分解，三对角矩阵的Thomas算法。而计算过程中经常会遇到稀疏矩阵（\b矩阵的零元素远多于非零元素），使用高斯消去会将\b零元素变为非零元素，增加不必要的计算次数。而迭代法是一种求解线性方程组系数矩阵为稀疏矩阵时的高效算法。\n\n通过将线性方程组\n$$\\boldsymbol{Ax}=\\boldsymbol{b}$$\n等价改写成\n$$\\boldsymbol{x}=\\boldsymbol{Bx}+\\boldsymbol{f}$$\n便可得到迭代法：\n$$\\boldsymbol{x}^{(k+1)}=\\boldsymbol{B}\\boldsymbol{x}^{(k)}+\\boldsymbol{f}$$\n**定理**：迭代法\n$$\\boldsymbol{x}^{(k+1)}=\\boldsymbol{B}\\boldsymbol{x}^{(k)}+\\boldsymbol{f}$$\n对任意初始点$\\boldsymbol{x}^{(0)}$和$\\boldsymbol{f}$均收敛的充要条件是$\\rho(\\boldsymbol{B})<1$.\n\n#### 雅可比(Jacobi)迭代\n设一般形式的线性方程组如下：\n$$\na_{11}x_1+a_{12}x_2+\\cdots+a_{1n}x_n=b_1,\\\\\\\\\na_{21}x_1+a_{22}x_2+\\cdots+a_{2n}x_n=b_2,\\\\\\\\\n\\cdots\\\\\\\\\na_{n1}x_1+a_{n2}x_2+\\cdots+a_{nn}x_n=b_n\n$$\n将上述线性方程组作简单调整就可以得到Jacobi迭代公式了，将上述线性方程组写成如下形式\b：\n$$\\begin{align}\nx_1&=\\frac{1}{a_{1,1}}(b_1-a_{1,2}x_2-\\cdots-a_{1,n}x_n)，\\\\\\\\\nx_2&=\\frac{1}{a_{2,2}}(b_2-a_{2,1}x_1-a_{2,3}x_3\\cdots-a_{2,n}x_n),\\\\\\\\\n\\cdots\\\\\\\\\nx_n&=\\frac{1}{a_{n,n}}(b_n-a_{n,1}x_1-a_{n,2}x_2-\\cdots-a_{n,n-1}x_{n-1})\n\\end{align}\n$$\n上述线性方程组左边视为新一时刻的值，那么这个新值就可以利用右边的旧值计算得到，于是得到的迭代格式即：\n$$\nx_{i}^{(k+1)}=x_{i}^{(k)}+\\frac{1}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{n}a_{ij}x_{j}^{(k)}\\Big)\n$$\n上式即为Jacobi迭代法。\n\n设\n$$\\begin{align}\\boldsymbol{D}&=\\boldsymbol{diag}(a_{11},a_{22},\\cdots,a_{nn}),\\\\\\\\\n\\boldsymbol{L}&=\\begin{bmatrix}0 & & & & &0\\\\\\\\\n-a_{21} & 0 & & & &\\\\\\\\\n\\vdots & \\ddots & \\ddots & & &\\\\\\\\\n-a_{j1} & \\cdots & -a_{j,j-1} & 0& &\\\\\\\\\n\\vdots &   & \\vdots & \\ddots & \\ddots &  \\\\\\\\\n-a_{n1} & \\cdots & -a_{n,j-1} & \\cdots & -a_{n,n-1} & 0\n\\end{bmatrix},\\\\\\\\\n\\boldsymbol{U}&=\\begin{bmatrix}0 & -a_{12} & \\cdots & -a_{1j} & \\cdots & -a_{1n}\\\\\\\\\n & 0 & \\ddots &\\vdots & &\\vdots\\\\\\\\\n &  & \\ddots & -a_{j-1,j} & \\cdots & -a_{j-1,n}\\\\\\\\\n &  &  & \\ddots & \\ddots & \\vdots\\\\\\\\\n &  &  &  & 0 & -a_{n-1,n} \\\\\\\\\n 0 &  &  &  &  & 0\n\\end{bmatrix},\n\\end{align}$$\n则:\n$$\n\\boldsymbol{A}=\\boldsymbol{D}-\\boldsymbol{L}-\\boldsymbol{U}\\\\\\\\\n\\boldsymbol{D}\\boldsymbol{x}=(\\boldsymbol{L}+\\boldsymbol{U})\\boldsymbol{x}+\\boldsymbol{b}\\\\\\\\\n\\boldsymbol{x}=\\boldsymbol{D}^{-1}(\\boldsymbol{L}+\\boldsymbol{U})\\boldsymbol{x}+\\boldsymbol{D}^{-1}\\boldsymbol{b}\n$$\n所以矩阵形式的Jacobi迭代即为:\n$$\n\\boldsymbol{x}^{(k+1)}=\\boldsymbol{D}^{-1}(\\boldsymbol{L}+\\boldsymbol{U})\\boldsymbol{x}^{(k)}+\\boldsymbol{D}^{-1}\\boldsymbol{b}\n$$\n\n#### 高斯塞德尔(Gauss–Seidel)迭代\n注意到Jacobi迭代计算每一个方程时都会产生新值，而这个新值就可以放到下一个方程里代替旧值计算，即原式：\n$$\\begin{align}\nx_1\b^{(k+1)}&=\\frac{1}{a_{1,1}}(b_1-a_{1,2}x_2^{(k)}-\\cdots-a_{1,n}x_n^{(k)})，\\\\\\\\\nx_2^{(k+1)}&=\\frac{1}{a_{2,2}}(b_2-a_{2,1}x_1^{(k)}-a_{2,3}x_3^{(k)}\\cdots-a_{2,n}x_n^{(k)}),\\\\\\\\\n\\cdots\\\\\\\\\nx_n^{(k+1)}&=\\frac{1}{a_{n,n}}(b_n-a_{n,1}x_1^{(k)}-a_{n,2}x_2^{(k)}-\\cdots-a_{n,n-1}x_{n-1}^{(k)})\n\\end{align}\n$$\n修改为：\n$$\\begin{align}\nx_1\b^{(k+1)}&=\\frac{1}{a_{1,1}}(b_1-a_{1,2}x_2^{(k)}-\\cdots-a_{1,n}x_n^{(k)})，\\\\\\\\\nx_2^{(k+1)}&=\\frac{1}{a_{2,2}}(b_2-a_{2,1}x_1^{(k+1)}-a_{2,3}x_3^{(k)}\\cdots-a_{2,n}x_n^{(k)}),\\\\\\\\\n\\cdots\\\\\\\\\nx_{n-1}^{(k+1)}&=\\frac{1}{a_{n-1,n-1}}(b_{n-1}-a_{n-1,1}x_1^{(k+1)}-a_{n-1,2}x_2^{(k+1)}-\\cdots-a_{n-1,n-2}x_{n-2}^{(k+1)}-a_{n-1,n}x_{n}^{(k)})\\\\\\\\\nx_n^{(k+1)}&=\\frac{1}{a_{n,n}}(b_n-a_{n,1}x_1^{(k+1)}-a_{n,2}x_2^{(k+1)}-\\cdots-a_{n,n-1}x_{n-1}^{(k+1)})\n\\end{align}\n$$\n即：\n$$\nx_{i}^{(k+1)}=\\frac{1}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{i-1}a_{ij}x_j^{(k+1)}-\\sum\\limits_{j=i+1}^{n}a_{ij}x_j^{(k)}\\Big)$$\n写成矩阵形式:\n$$\n\\begin{align}\n\\begin{pmatrix}a_{11} & & &\\\\\\\\\n & a_{22} & & \\\\\\\\\n  & & \\ddots & \\\\\\\\\n  & & & a_{nn}\\end{pmatrix}\\begin{pmatrix}x_{1}^{(k+1)}\\\\\\\\\n   x_{2}^{(k+1)}\\\\\\\\\n\\vdots\\\\\\\\\nx_{n}^{(k+1)}\\end{pmatrix}&=\n\\begin{pmatrix}\n0 & & &\\\\\\\\\n-a_{21} & 0 & & \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\\\\\\\\n-a_{n1} & -a_{n2} &\\cdots & 0\\end{pmatrix}\n\\begin{pmatrix}\nx_{1}^{(k+1)}\\\\\\\\\nx_{2}^{(k+1)}\\\\\\\\\n\\vdots\\\\\\\\\nx_{n}^{(k+1)}\n\\end{pmatrix}\\\\\\\\\n&+\\begin{pmatrix}\n0 & -a_{12} & & -a_{1n}\\\\\\\\\n  & 0 & \\cdots & -a_{2n}\\\\\\\\\n  & & \\ddots & \\vdots \\\\\\\\\n  & & & 0\\end{pmatrix}\\begin{pmatrix}x_{1}^{(k)}\\\\\\\\\nx_{2}^{(k)}\\\\\\\\\n\\vdots\\\\\\\\\nx_{n}^{(k)}\n\\end{pmatrix}+\n\\begin{pmatrix}\nb_1\\\\\\\\\nb_2\\\\\\\\\n\\vdots\\\\\\\\\nb_n\n\\end{pmatrix}\n\\end{align}$$\n\n即：\n$$\n\\boldsymbol{D}\\boldsymbol{x}^{(k+1)}=\\boldsymbol{L}\\boldsymbol{x}^{(k+1)}+\\boldsymbol{U}\\boldsymbol{x}^{(k)}+\\boldsymbol{b}\\\\\\\\\n\\boldsymbol{D}\\boldsymbol{x}^{(k+1)}-\\boldsymbol{L}\\boldsymbol{x}^{(k+1)}=\\boldsymbol{U}\\boldsymbol{x}^{(k)}+\\boldsymbol{b}\\\\\\\\\n\\boldsymbol{x}^{(k+1)}=(\\boldsymbol{D}-\\boldsymbol{L})^{-1}\\boldsymbol{U}\\boldsymbol{x}^{(k)}+(\\boldsymbol{D}-\\boldsymbol{L})^{-1}\\boldsymbol{b}\n$$\n#### 连续过松弛(SOR)\n高斯塞德尔迭代格式如下：\n\n$$x_{i}^{(k+1)}=\\frac{1}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{i-1}a_{ij}x_j^{(k+1)}-\\sum\\limits_{j=i+1}^{n}a_{ij}x_j^{(k)}\\Big)$$\n\n\b\n\n我们考虑上式右端和$x_i^{(k)}$的线性组合形式来计算$x_i^{(k+1)}$得到如下格式：\n\n$$x_{i}^{(k+1)}=(1-\\omega)x_{i}^{(k)}+\\frac{\\omega}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{i-1}a_{ij}x_j^{(k+1)}-\\sum\\limits_{j=i+1}^{n}a_{ij}x_j^{(k)}\\Big)$$\n\n以上即为超松弛格式(SOR)，其中$\\omega$为松弛系数，调整松弛系数来加快迭代计算速度，\b当$\\omega=1$时，\b即为高斯塞德尔迭代。\n\n\b代码见:\n\n[https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/iterativeMethod.cpp](https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/iterativeMethod.cpp)\n\n\n### 一种特殊的迭代求解\b线性方程组的方法\n\b\n#### 引言\n\n\b\b我们要求解的线性方程组为$Ax=b$，注意到函数$G(x)=\\frac{1}{2}x^T Ax-x^T b$达到极小值时满足$\\frac{d G}{dx}=Ax-b=0$，所以我们将求解线性方程组转换成求解函数$G(x)=\\frac{1}{2}x^T Ax-x^T b$的极小值。为了保证解的唯一性，我们要求系数矩阵$A$是正定且对称的，这样函数$G(x)$为凸函数，其局部最小值即为全局极小值且唯一。\n\n综上，我们可以使用一些求解函数最小值的算法求解\b线性方程组$Ax=b$，下面只介绍一种算法：共轭梯度法。\n\n#### 共轭梯度法\n\n**共轭**   共轭可以理解成一种推广的向量正交，它指对于正定对称矩阵$A$，如果向量$u,v$满足$u^T Av=0$，则称向量$u,v$\b关于矩阵$A$共轭，显然向量$u,v$正交即向量$u,v$关于\b矩阵$I$共轭。\n\n\b\b\b\b\b\b\b\b求解\b\b\b函数\b$G(x)$极小值过程为：\n\n1. \b选定初值$x_{0}$，初始搜索方向$s_{0}$，一般选为$s_{0}=-\\nabla G(x_{0})$\n2. \u001d下一步迭代点由式$x_{k+1}=x_{k}+\\lambda_{k} s_{k}$给出，其中$\\lambda_{k}$由\b\b$\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}=0$计算得到\n3. \b计算下一步搜索方向$s_{k+1}$\n4. \b重复上述过程直到满足收敛条件，如$\\nabla G(x_k)=0$.\n\n上述中$\\lambda_{k}$表示第$k$步沿方向$s_{k}$的搜索步长，\b\b$\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}=0$保证找到的步长使得函数减小最多。\b\n\n**共轭梯度法**  就是\b选定一组共轭的搜索方向，\b\b这种选取方式能保证\b迭代最多$n$步就能收敛最小值。\n\n**首先** 我们确定$\\lambda_{k}$，$\\lambda_{k}$由\b\b$\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}=0$确定。\n\b所以：\n$$\\begin{align}\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}&=\\nabla G(x_{k}+\\lambda_{k} s_{(k)})^T s_{k}\\\\\\\\\n&=[A(x_{k}+\\lambda_{k} s_{k})]^T s_{k} -b^T s_{k}\\\\\\\\\n&=x_{k}^T As_{k}+\\lambda_{k}s_{k}^T A s_{k}-b^T s_{k}\\\\\\\\\n&=0\\\\\\\\\n\\Longrightarrow \\lambda_k&= \\frac{(b^T-x_k^T A)s_k}{s_k^T A s_k}=\\frac{s_k^T( b-Ax_k)}{s_k^T A s_k}\n\\end{align}\n$$\n\n**然后** 我们生成共轭方向作为每次迭代的搜索方向。\b我们可以\b将每次迭代计算得到的负\b梯度方向$=\\nabla G(x)$作为初始\b方向，然后用类似[施密特正交化](https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process)的方式生成共轭方向。\n\n每次迭代计算的负梯度为：$-\\nabla G(x_k)=b-Ax_k=r_k$，对于线性方程组$Ax=b$来说，$b-Ax_k$为每步计算的残差，所以这里设为$r_k$。\n\n类似施密特正交化我们得到共轭方向：\n\n$$\\begin{align}s_0&=r_0=b-Ax_0,\\\\\\\\\ns_k&=r_k-\\sum_{i<k}\\frac{s_i^T A r_k}{s_i^T A s_i}s_i\\end{align}$$\n\n\b\b显然$s_j,\\,(j=0,1,2...k)$相互关于$A$共轭，归纳显然。\n\n\n\n\b**最后** 证明共轭梯度法最多$n$步收敛\b\n\n$n$步收敛\b只需要证明$\\nabla G(x_n)=0$即可。\n\n$$\\begin{align}\\nabla G(x_n)&=Ax_n-b\\\\\\\\\n&=A(x_{n-1}+\\lambda_{n-1}s_{n-1})-b\\\\\\\\\n&=\\nabla G(x_{n-1})+\\lambda_{n-1}As_{n-1}\\\\\\\\\n&=\\nabla G(x_{j})+\\sum\\limits_{i=j}^{n-1}\\lambda_i A s_i\n\\end{align}$$\n\n对上式右乘$s_j,\\, j=0,1,2,...,n-1$\n$$\\begin{align}\\therefore \\nabla G(x_n)^T s_j\n&=\\nabla G(x_{j})^T s_j+\\sum\\limits_{i=j}^{n-1}\\lambda_i s_i^T A s_j\\\\\\\\\n&=\\nabla G(x_{j})^T s_j+\\lambda_j s_j^T A s_j\\\\\\\\\n&=(\\nabla G(x_{j})+\\lambda_j  A s_j)^Ts_j\\\\\\\\\n&=\\nabla G(x_{j+1})^T s_j\n\\end{align}$$\n\n注意到：\n\n$$\\frac{d G(x_j+\\lambda s_j)}{d \\lambda}=\\nabla G(x_{j+1})^T s_j=0$$\n\n有：\n\n$$\\nabla G(x_n)^T s_j=\\nabla G(x_{j+1})^T s_j=0,\\, j=0,1,2,...,n-1$$\n\n\b对于一组$A$共轭向量$s_j,\\, j=0,1,2,...,n-1$,$\\nabla G(x_n)^T s_j=0$,显然$\\nabla G(x_n)=0$,所以共轭梯度法最多$n$步收敛\b。\n\n**程序计算步骤**：\n\n$$\\begin{align} &r_0 = b - Ax_0\\\\\\\\\n&\\text{如果} r_0\\text{足够小, 就返回 } x_0\\text{ \b作为结果}\\\\\\\\\n&s_0=r_0\\\\\\\\\n&k=0\\\\\\\\\n&\\text{循环：}\\\\\\\\\n&\\qquad \\alpha_k=\\frac {r_k^T r_k}{s_k^T As_k}\\\\\\\\\n&\\qquad  x_{k+1}= x_k+\\alpha_k s_k\\\\\\\\\n&\\qquad  r_{k+1}= r_k-\\alpha_k As_k\\\\\\\\\n&\\qquad \\text{如果} r_{k+1}\\text{ 足够小, 就跳出循环}\\\\\\\\\n&\\qquad \\beta_k={\\frac { r_{k+1}^T r_{k+1}}{ r_k^T r_k}}\\\\\\\\\n&\\qquad  s_{k+1} = r_{k+1}+\\beta_k s_k\\\\\\\\\n&\\qquad k=k+1\\\\\\\\\n&\\text{返回 } x_{k+1}\\text{作为结果}\n\\end{align}$$\n\n\n\n\n代码见:\n\n[https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/ConjugateGradient.py](https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/ConjugateGradient.py)\n\n\n---\n","source":"_posts/迭代法.md","raw":"---\ntitle: 求解线性方程组的迭代法\ncategories: 数学\ntags: 矩阵与数值分析\nabbrlink: 59676\ndate: 2018-11-06 09:28:45\n---\n\n\n### 一般迭代法\n#### 引言\n\n对于一般的线性方程组直接求解有高斯消去法，对称矩阵的Cholesky分解，三对角矩阵的Thomas算法。而计算过程中经常会遇到稀疏矩阵（\b矩阵的零元素远多于非零元素），使用高斯消去会将\b零元素变为非零元素，增加不必要的计算次数。而迭代法是一种求解线性方程组系数矩阵为稀疏矩阵时的高效算法。\n\n通过将线性方程组\n$$\\boldsymbol{Ax}=\\boldsymbol{b}$$\n等价改写成\n$$\\boldsymbol{x}=\\boldsymbol{Bx}+\\boldsymbol{f}$$\n便可得到迭代法：\n$$\\boldsymbol{x}^{(k+1)}=\\boldsymbol{B}\\boldsymbol{x}^{(k)}+\\boldsymbol{f}$$\n**定理**：迭代法\n$$\\boldsymbol{x}^{(k+1)}=\\boldsymbol{B}\\boldsymbol{x}^{(k)}+\\boldsymbol{f}$$\n对任意初始点$\\boldsymbol{x}^{(0)}$和$\\boldsymbol{f}$均收敛的充要条件是$\\rho(\\boldsymbol{B})<1$.\n\n#### 雅可比(Jacobi)迭代\n设一般形式的线性方程组如下：\n$$\na_{11}x_1+a_{12}x_2+\\cdots+a_{1n}x_n=b_1,\\\\\\\\\na_{21}x_1+a_{22}x_2+\\cdots+a_{2n}x_n=b_2,\\\\\\\\\n\\cdots\\\\\\\\\na_{n1}x_1+a_{n2}x_2+\\cdots+a_{nn}x_n=b_n\n$$\n将上述线性方程组作简单调整就可以得到Jacobi迭代公式了，将上述线性方程组写成如下形式\b：\n$$\\begin{align}\nx_1&=\\frac{1}{a_{1,1}}(b_1-a_{1,2}x_2-\\cdots-a_{1,n}x_n)，\\\\\\\\\nx_2&=\\frac{1}{a_{2,2}}(b_2-a_{2,1}x_1-a_{2,3}x_3\\cdots-a_{2,n}x_n),\\\\\\\\\n\\cdots\\\\\\\\\nx_n&=\\frac{1}{a_{n,n}}(b_n-a_{n,1}x_1-a_{n,2}x_2-\\cdots-a_{n,n-1}x_{n-1})\n\\end{align}\n$$\n上述线性方程组左边视为新一时刻的值，那么这个新值就可以利用右边的旧值计算得到，于是得到的迭代格式即：\n$$\nx_{i}^{(k+1)}=x_{i}^{(k)}+\\frac{1}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{n}a_{ij}x_{j}^{(k)}\\Big)\n$$\n上式即为Jacobi迭代法。\n\n设\n$$\\begin{align}\\boldsymbol{D}&=\\boldsymbol{diag}(a_{11},a_{22},\\cdots,a_{nn}),\\\\\\\\\n\\boldsymbol{L}&=\\begin{bmatrix}0 & & & & &0\\\\\\\\\n-a_{21} & 0 & & & &\\\\\\\\\n\\vdots & \\ddots & \\ddots & & &\\\\\\\\\n-a_{j1} & \\cdots & -a_{j,j-1} & 0& &\\\\\\\\\n\\vdots &   & \\vdots & \\ddots & \\ddots &  \\\\\\\\\n-a_{n1} & \\cdots & -a_{n,j-1} & \\cdots & -a_{n,n-1} & 0\n\\end{bmatrix},\\\\\\\\\n\\boldsymbol{U}&=\\begin{bmatrix}0 & -a_{12} & \\cdots & -a_{1j} & \\cdots & -a_{1n}\\\\\\\\\n & 0 & \\ddots &\\vdots & &\\vdots\\\\\\\\\n &  & \\ddots & -a_{j-1,j} & \\cdots & -a_{j-1,n}\\\\\\\\\n &  &  & \\ddots & \\ddots & \\vdots\\\\\\\\\n &  &  &  & 0 & -a_{n-1,n} \\\\\\\\\n 0 &  &  &  &  & 0\n\\end{bmatrix},\n\\end{align}$$\n则:\n$$\n\\boldsymbol{A}=\\boldsymbol{D}-\\boldsymbol{L}-\\boldsymbol{U}\\\\\\\\\n\\boldsymbol{D}\\boldsymbol{x}=(\\boldsymbol{L}+\\boldsymbol{U})\\boldsymbol{x}+\\boldsymbol{b}\\\\\\\\\n\\boldsymbol{x}=\\boldsymbol{D}^{-1}(\\boldsymbol{L}+\\boldsymbol{U})\\boldsymbol{x}+\\boldsymbol{D}^{-1}\\boldsymbol{b}\n$$\n所以矩阵形式的Jacobi迭代即为:\n$$\n\\boldsymbol{x}^{(k+1)}=\\boldsymbol{D}^{-1}(\\boldsymbol{L}+\\boldsymbol{U})\\boldsymbol{x}^{(k)}+\\boldsymbol{D}^{-1}\\boldsymbol{b}\n$$\n\n#### 高斯塞德尔(Gauss–Seidel)迭代\n注意到Jacobi迭代计算每一个方程时都会产生新值，而这个新值就可以放到下一个方程里代替旧值计算，即原式：\n$$\\begin{align}\nx_1\b^{(k+1)}&=\\frac{1}{a_{1,1}}(b_1-a_{1,2}x_2^{(k)}-\\cdots-a_{1,n}x_n^{(k)})，\\\\\\\\\nx_2^{(k+1)}&=\\frac{1}{a_{2,2}}(b_2-a_{2,1}x_1^{(k)}-a_{2,3}x_3^{(k)}\\cdots-a_{2,n}x_n^{(k)}),\\\\\\\\\n\\cdots\\\\\\\\\nx_n^{(k+1)}&=\\frac{1}{a_{n,n}}(b_n-a_{n,1}x_1^{(k)}-a_{n,2}x_2^{(k)}-\\cdots-a_{n,n-1}x_{n-1}^{(k)})\n\\end{align}\n$$\n修改为：\n$$\\begin{align}\nx_1\b^{(k+1)}&=\\frac{1}{a_{1,1}}(b_1-a_{1,2}x_2^{(k)}-\\cdots-a_{1,n}x_n^{(k)})，\\\\\\\\\nx_2^{(k+1)}&=\\frac{1}{a_{2,2}}(b_2-a_{2,1}x_1^{(k+1)}-a_{2,3}x_3^{(k)}\\cdots-a_{2,n}x_n^{(k)}),\\\\\\\\\n\\cdots\\\\\\\\\nx_{n-1}^{(k+1)}&=\\frac{1}{a_{n-1,n-1}}(b_{n-1}-a_{n-1,1}x_1^{(k+1)}-a_{n-1,2}x_2^{(k+1)}-\\cdots-a_{n-1,n-2}x_{n-2}^{(k+1)}-a_{n-1,n}x_{n}^{(k)})\\\\\\\\\nx_n^{(k+1)}&=\\frac{1}{a_{n,n}}(b_n-a_{n,1}x_1^{(k+1)}-a_{n,2}x_2^{(k+1)}-\\cdots-a_{n,n-1}x_{n-1}^{(k+1)})\n\\end{align}\n$$\n即：\n$$\nx_{i}^{(k+1)}=\\frac{1}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{i-1}a_{ij}x_j^{(k+1)}-\\sum\\limits_{j=i+1}^{n}a_{ij}x_j^{(k)}\\Big)$$\n写成矩阵形式:\n$$\n\\begin{align}\n\\begin{pmatrix}a_{11} & & &\\\\\\\\\n & a_{22} & & \\\\\\\\\n  & & \\ddots & \\\\\\\\\n  & & & a_{nn}\\end{pmatrix}\\begin{pmatrix}x_{1}^{(k+1)}\\\\\\\\\n   x_{2}^{(k+1)}\\\\\\\\\n\\vdots\\\\\\\\\nx_{n}^{(k+1)}\\end{pmatrix}&=\n\\begin{pmatrix}\n0 & & &\\\\\\\\\n-a_{21} & 0 & & \\\\\\\\\n\\vdots & \\vdots & \\ddots & \\\\\\\\\n-a_{n1} & -a_{n2} &\\cdots & 0\\end{pmatrix}\n\\begin{pmatrix}\nx_{1}^{(k+1)}\\\\\\\\\nx_{2}^{(k+1)}\\\\\\\\\n\\vdots\\\\\\\\\nx_{n}^{(k+1)}\n\\end{pmatrix}\\\\\\\\\n&+\\begin{pmatrix}\n0 & -a_{12} & & -a_{1n}\\\\\\\\\n  & 0 & \\cdots & -a_{2n}\\\\\\\\\n  & & \\ddots & \\vdots \\\\\\\\\n  & & & 0\\end{pmatrix}\\begin{pmatrix}x_{1}^{(k)}\\\\\\\\\nx_{2}^{(k)}\\\\\\\\\n\\vdots\\\\\\\\\nx_{n}^{(k)}\n\\end{pmatrix}+\n\\begin{pmatrix}\nb_1\\\\\\\\\nb_2\\\\\\\\\n\\vdots\\\\\\\\\nb_n\n\\end{pmatrix}\n\\end{align}$$\n\n即：\n$$\n\\boldsymbol{D}\\boldsymbol{x}^{(k+1)}=\\boldsymbol{L}\\boldsymbol{x}^{(k+1)}+\\boldsymbol{U}\\boldsymbol{x}^{(k)}+\\boldsymbol{b}\\\\\\\\\n\\boldsymbol{D}\\boldsymbol{x}^{(k+1)}-\\boldsymbol{L}\\boldsymbol{x}^{(k+1)}=\\boldsymbol{U}\\boldsymbol{x}^{(k)}+\\boldsymbol{b}\\\\\\\\\n\\boldsymbol{x}^{(k+1)}=(\\boldsymbol{D}-\\boldsymbol{L})^{-1}\\boldsymbol{U}\\boldsymbol{x}^{(k)}+(\\boldsymbol{D}-\\boldsymbol{L})^{-1}\\boldsymbol{b}\n$$\n#### 连续过松弛(SOR)\n高斯塞德尔迭代格式如下：\n\n$$x_{i}^{(k+1)}=\\frac{1}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{i-1}a_{ij}x_j^{(k+1)}-\\sum\\limits_{j=i+1}^{n}a_{ij}x_j^{(k)}\\Big)$$\n\n\b\n\n我们考虑上式右端和$x_i^{(k)}$的线性组合形式来计算$x_i^{(k+1)}$得到如下格式：\n\n$$x_{i}^{(k+1)}=(1-\\omega)x_{i}^{(k)}+\\frac{\\omega}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{i-1}a_{ij}x_j^{(k+1)}-\\sum\\limits_{j=i+1}^{n}a_{ij}x_j^{(k)}\\Big)$$\n\n以上即为超松弛格式(SOR)，其中$\\omega$为松弛系数，调整松弛系数来加快迭代计算速度，\b当$\\omega=1$时，\b即为高斯塞德尔迭代。\n\n\b代码见:\n\n[https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/iterativeMethod.cpp](https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/iterativeMethod.cpp)\n\n\n### 一种特殊的迭代求解\b线性方程组的方法\n\b\n#### 引言\n\n\b\b我们要求解的线性方程组为$Ax=b$，注意到函数$G(x)=\\frac{1}{2}x^T Ax-x^T b$达到极小值时满足$\\frac{d G}{dx}=Ax-b=0$，所以我们将求解线性方程组转换成求解函数$G(x)=\\frac{1}{2}x^T Ax-x^T b$的极小值。为了保证解的唯一性，我们要求系数矩阵$A$是正定且对称的，这样函数$G(x)$为凸函数，其局部最小值即为全局极小值且唯一。\n\n综上，我们可以使用一些求解函数最小值的算法求解\b线性方程组$Ax=b$，下面只介绍一种算法：共轭梯度法。\n\n#### 共轭梯度法\n\n**共轭**   共轭可以理解成一种推广的向量正交，它指对于正定对称矩阵$A$，如果向量$u,v$满足$u^T Av=0$，则称向量$u,v$\b关于矩阵$A$共轭，显然向量$u,v$正交即向量$u,v$关于\b矩阵$I$共轭。\n\n\b\b\b\b\b\b\b\b求解\b\b\b函数\b$G(x)$极小值过程为：\n\n1. \b选定初值$x_{0}$，初始搜索方向$s_{0}$，一般选为$s_{0}=-\\nabla G(x_{0})$\n2. \u001d下一步迭代点由式$x_{k+1}=x_{k}+\\lambda_{k} s_{k}$给出，其中$\\lambda_{k}$由\b\b$\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}=0$计算得到\n3. \b计算下一步搜索方向$s_{k+1}$\n4. \b重复上述过程直到满足收敛条件，如$\\nabla G(x_k)=0$.\n\n上述中$\\lambda_{k}$表示第$k$步沿方向$s_{k}$的搜索步长，\b\b$\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}=0$保证找到的步长使得函数减小最多。\b\n\n**共轭梯度法**  就是\b选定一组共轭的搜索方向，\b\b这种选取方式能保证\b迭代最多$n$步就能收敛最小值。\n\n**首先** 我们确定$\\lambda_{k}$，$\\lambda_{k}$由\b\b$\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}=0$确定。\n\b所以：\n$$\\begin{align}\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}&=\\nabla G(x_{k}+\\lambda_{k} s_{(k)})^T s_{k}\\\\\\\\\n&=[A(x_{k}+\\lambda_{k} s_{k})]^T s_{k} -b^T s_{k}\\\\\\\\\n&=x_{k}^T As_{k}+\\lambda_{k}s_{k}^T A s_{k}-b^T s_{k}\\\\\\\\\n&=0\\\\\\\\\n\\Longrightarrow \\lambda_k&= \\frac{(b^T-x_k^T A)s_k}{s_k^T A s_k}=\\frac{s_k^T( b-Ax_k)}{s_k^T A s_k}\n\\end{align}\n$$\n\n**然后** 我们生成共轭方向作为每次迭代的搜索方向。\b我们可以\b将每次迭代计算得到的负\b梯度方向$=\\nabla G(x)$作为初始\b方向，然后用类似[施密特正交化](https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process)的方式生成共轭方向。\n\n每次迭代计算的负梯度为：$-\\nabla G(x_k)=b-Ax_k=r_k$，对于线性方程组$Ax=b$来说，$b-Ax_k$为每步计算的残差，所以这里设为$r_k$。\n\n类似施密特正交化我们得到共轭方向：\n\n$$\\begin{align}s_0&=r_0=b-Ax_0,\\\\\\\\\ns_k&=r_k-\\sum_{i<k}\\frac{s_i^T A r_k}{s_i^T A s_i}s_i\\end{align}$$\n\n\b\b显然$s_j,\\,(j=0,1,2...k)$相互关于$A$共轭，归纳显然。\n\n\n\n\b**最后** 证明共轭梯度法最多$n$步收敛\b\n\n$n$步收敛\b只需要证明$\\nabla G(x_n)=0$即可。\n\n$$\\begin{align}\\nabla G(x_n)&=Ax_n-b\\\\\\\\\n&=A(x_{n-1}+\\lambda_{n-1}s_{n-1})-b\\\\\\\\\n&=\\nabla G(x_{n-1})+\\lambda_{n-1}As_{n-1}\\\\\\\\\n&=\\nabla G(x_{j})+\\sum\\limits_{i=j}^{n-1}\\lambda_i A s_i\n\\end{align}$$\n\n对上式右乘$s_j,\\, j=0,1,2,...,n-1$\n$$\\begin{align}\\therefore \\nabla G(x_n)^T s_j\n&=\\nabla G(x_{j})^T s_j+\\sum\\limits_{i=j}^{n-1}\\lambda_i s_i^T A s_j\\\\\\\\\n&=\\nabla G(x_{j})^T s_j+\\lambda_j s_j^T A s_j\\\\\\\\\n&=(\\nabla G(x_{j})+\\lambda_j  A s_j)^Ts_j\\\\\\\\\n&=\\nabla G(x_{j+1})^T s_j\n\\end{align}$$\n\n注意到：\n\n$$\\frac{d G(x_j+\\lambda s_j)}{d \\lambda}=\\nabla G(x_{j+1})^T s_j=0$$\n\n有：\n\n$$\\nabla G(x_n)^T s_j=\\nabla G(x_{j+1})^T s_j=0,\\, j=0,1,2,...,n-1$$\n\n\b对于一组$A$共轭向量$s_j,\\, j=0,1,2,...,n-1$,$\\nabla G(x_n)^T s_j=0$,显然$\\nabla G(x_n)=0$,所以共轭梯度法最多$n$步收敛\b。\n\n**程序计算步骤**：\n\n$$\\begin{align} &r_0 = b - Ax_0\\\\\\\\\n&\\text{如果} r_0\\text{足够小, 就返回 } x_0\\text{ \b作为结果}\\\\\\\\\n&s_0=r_0\\\\\\\\\n&k=0\\\\\\\\\n&\\text{循环：}\\\\\\\\\n&\\qquad \\alpha_k=\\frac {r_k^T r_k}{s_k^T As_k}\\\\\\\\\n&\\qquad  x_{k+1}= x_k+\\alpha_k s_k\\\\\\\\\n&\\qquad  r_{k+1}= r_k-\\alpha_k As_k\\\\\\\\\n&\\qquad \\text{如果} r_{k+1}\\text{ 足够小, 就跳出循环}\\\\\\\\\n&\\qquad \\beta_k={\\frac { r_{k+1}^T r_{k+1}}{ r_k^T r_k}}\\\\\\\\\n&\\qquad  s_{k+1} = r_{k+1}+\\beta_k s_k\\\\\\\\\n&\\qquad k=k+1\\\\\\\\\n&\\text{返回 } x_{k+1}\\text{作为结果}\n\\end{align}$$\n\n\n\n\n代码见:\n\n[https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/ConjugateGradient.py](https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/ConjugateGradient.py)\n\n\n---\n","slug":"迭代法","published":1,"updated":"2018-12-31T11:38:34.915Z","_id":"cjq9a4s0x00133t9k5gv8ubj2","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- build time:Mon Dec 31 2018 19:38:44 GMT+0800 (CST) --><h3 id=\"一般迭代法\"><a href=\"#一般迭代法\" class=\"headerlink\" title=\"一般迭代法\"></a>一般迭代法</h3><h4 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h4><p>对于一般的线性方程组直接求解有高斯消去法，对称矩阵的Cholesky分解，三对角矩阵的Thomas算法。而计算过程中经常会遇到稀疏矩阵（\b矩阵的零元素远多于非零元素），使用高斯消去会将\b零元素变为非零元素，增加不必要的计算次数。而迭代法是一种求解线性方程组系数矩阵为稀疏矩阵时的高效算法。</p><p>通过将线性方程组<br>$$\\boldsymbol{Ax}=\\boldsymbol{b}$$<br>等价改写成<br>$$\\boldsymbol{x}=\\boldsymbol{Bx}+\\boldsymbol{f}$$<br>便可得到迭代法：<br>$$\\boldsymbol{x}^{(k+1)}=\\boldsymbol{B}\\boldsymbol{x}^{(k)}+\\boldsymbol{f}$$<br><strong>定理</strong>：迭代法<br>$$\\boldsymbol{x}^{(k+1)}=\\boldsymbol{B}\\boldsymbol{x}^{(k)}+\\boldsymbol{f}$$<br>对任意初始点$\\boldsymbol{x}^{(0)}$和$\\boldsymbol{f}$均收敛的充要条件是$\\rho(\\boldsymbol{B})&lt;1$.</p><h4 id=\"雅可比-Jacobi-迭代\"><a href=\"#雅可比-Jacobi-迭代\" class=\"headerlink\" title=\"雅可比(Jacobi)迭代\"></a>雅可比(Jacobi)迭代</h4><p>设一般形式的线性方程组如下：<br>$$<br>a_{11}x_1+a_{12}x_2+\\cdots+a_{1n}x_n=b_1,\\\\<br>a_{21}x_1+a_{22}x_2+\\cdots+a_{2n}x_n=b_2,\\\\<br>\\cdots\\\\<br>a_{n1}x_1+a_{n2}x_2+\\cdots+a_{nn}x_n=b_n<br>$$<br>将上述线性方程组作简单调整就可以得到Jacobi迭代公式了，将上述线性方程组写成如下形式\b：<br>$$\\begin{align}<br>x_1&amp;=\\frac{1}{a_{1,1}}(b_1-a_{1,2}x_2-\\cdots-a_{1,n}x_n)，\\\\<br>x_2&amp;=\\frac{1}{a_{2,2}}(b_2-a_{2,1}x_1-a_{2,3}x_3\\cdots-a_{2,n}x_n),\\\\<br>\\cdots\\\\<br>x_n&amp;=\\frac{1}{a_{n,n}}(b_n-a_{n,1}x_1-a_{n,2}x_2-\\cdots-a_{n,n-1}x_{n-1})<br>\\end{align}<br>$$<br>上述线性方程组左边视为新一时刻的值，那么这个新值就可以利用右边的旧值计算得到，于是得到的迭代格式即：<br>$$<br>x_{i}^{(k+1)}=x_{i}^{(k)}+\\frac{1}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{n}a_{ij}x_{j}^{(k)}\\Big)<br>$$<br>上式即为Jacobi迭代法。</p><p>设<br>$$\\begin{align}\\boldsymbol{D}&amp;=\\boldsymbol{diag}(a_{11},a_{22},\\cdots,a_{nn}),\\\\<br>\\boldsymbol{L}&amp;=\\begin{bmatrix}0 &amp; &amp; &amp; &amp; &amp;0\\\\<br>-a_{21} &amp; 0 &amp; &amp; &amp; &amp;\\\\<br>\\vdots &amp; \\ddots &amp; \\ddots &amp; &amp; &amp;\\\\<br>-a_{j1} &amp; \\cdots &amp; -a_{j,j-1} &amp; 0&amp; &amp;\\\\<br>\\vdots &amp; &amp; \\vdots &amp; \\ddots &amp; \\ddots &amp; \\\\<br>-a_{n1} &amp; \\cdots &amp; -a_{n,j-1} &amp; \\cdots &amp; -a_{n,n-1} &amp; 0<br>\\end{bmatrix},\\\\<br>\\boldsymbol{U}&amp;=\\begin{bmatrix}0 &amp; -a_{12} &amp; \\cdots &amp; -a_{1j} &amp; \\cdots &amp; -a_{1n}\\\\<br>&amp; 0 &amp; \\ddots &amp;\\vdots &amp; &amp;\\vdots\\\\<br>&amp; &amp; \\ddots &amp; -a_{j-1,j} &amp; \\cdots &amp; -a_{j-1,n}\\\\<br>&amp; &amp; &amp; \\ddots &amp; \\ddots &amp; \\vdots\\\\<br>&amp; &amp; &amp; &amp; 0 &amp; -a_{n-1,n} \\\\<br>0 &amp; &amp; &amp; &amp; &amp; 0<br>\\end{bmatrix},<br>\\end{align}$$<br>则:<br>$$<br>\\boldsymbol{A}=\\boldsymbol{D}-\\boldsymbol{L}-\\boldsymbol{U}\\\\<br>\\boldsymbol{D}\\boldsymbol{x}=(\\boldsymbol{L}+\\boldsymbol{U})\\boldsymbol{x}+\\boldsymbol{b}\\\\<br>\\boldsymbol{x}=\\boldsymbol{D}^{-1}(\\boldsymbol{L}+\\boldsymbol{U})\\boldsymbol{x}+\\boldsymbol{D}^{-1}\\boldsymbol{b}<br>$$<br>所以矩阵形式的Jacobi迭代即为:<br>$$<br>\\boldsymbol{x}^{(k+1)}=\\boldsymbol{D}^{-1}(\\boldsymbol{L}+\\boldsymbol{U})\\boldsymbol{x}^{(k)}+\\boldsymbol{D}^{-1}\\boldsymbol{b}<br>$$</p><h4 id=\"高斯塞德尔-Gauss–Seidel-迭代\"><a href=\"#高斯塞德尔-Gauss–Seidel-迭代\" class=\"headerlink\" title=\"高斯塞德尔(Gauss–Seidel)迭代\"></a>高斯塞德尔(Gauss–Seidel)迭代</h4><p>注意到Jacobi迭代计算每一个方程时都会产生新值，而这个新值就可以放到下一个方程里代替旧值计算，即原式：<br>$$\\begin{align}<br>x_1\b^{(k+1)}&amp;=\\frac{1}{a_{1,1}}(b_1-a_{1,2}x_2^{(k)}-\\cdots-a_{1,n}x_n^{(k)})，\\\\<br>x_2^{(k+1)}&amp;=\\frac{1}{a_{2,2}}(b_2-a_{2,1}x_1^{(k)}-a_{2,3}x_3^{(k)}\\cdots-a_{2,n}x_n^{(k)}),\\\\<br>\\cdots\\\\<br>x_n^{(k+1)}&amp;=\\frac{1}{a_{n,n}}(b_n-a_{n,1}x_1^{(k)}-a_{n,2}x_2^{(k)}-\\cdots-a_{n,n-1}x_{n-1}^{(k)})<br>\\end{align}<br>$$<br>修改为：<br>$$\\begin{align}<br>x_1\b^{(k+1)}&amp;=\\frac{1}{a_{1,1}}(b_1-a_{1,2}x_2^{(k)}-\\cdots-a_{1,n}x_n^{(k)})，\\\\<br>x_2^{(k+1)}&amp;=\\frac{1}{a_{2,2}}(b_2-a_{2,1}x_1^{(k+1)}-a_{2,3}x_3^{(k)}\\cdots-a_{2,n}x_n^{(k)}),\\\\<br>\\cdots\\\\<br>x_{n-1}^{(k+1)}&amp;=\\frac{1}{a_{n-1,n-1}}(b_{n-1}-a_{n-1,1}x_1^{(k+1)}-a_{n-1,2}x_2^{(k+1)}-\\cdots-a_{n-1,n-2}x_{n-2}^{(k+1)}-a_{n-1,n}x_{n}^{(k)})\\\\<br>x_n^{(k+1)}&amp;=\\frac{1}{a_{n,n}}(b_n-a_{n,1}x_1^{(k+1)}-a_{n,2}x_2^{(k+1)}-\\cdots-a_{n,n-1}x_{n-1}^{(k+1)})<br>\\end{align}<br>$$<br>即：<br>$$<br>x_{i}^{(k+1)}=\\frac{1}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{i-1}a_{ij}x_j^{(k+1)}-\\sum\\limits_{j=i+1}^{n}a_{ij}x_j^{(k)}\\Big)$$<br>写成矩阵形式:<br>$$<br>\\begin{align}<br>\\begin{pmatrix}a_{11} &amp; &amp; &amp;\\\\<br>&amp; a_{22} &amp; &amp; \\\\<br>&amp; &amp; \\ddots &amp; \\\\<br>&amp; &amp; &amp; a_{nn}\\end{pmatrix}\\begin{pmatrix}x_{1}^{(k+1)}\\\\<br>x_{2}^{(k+1)}\\\\<br>\\vdots\\\\<br>x_{n}^{(k+1)}\\end{pmatrix}&amp;=<br>\\begin{pmatrix}<br>0 &amp; &amp; &amp;\\\\<br>-a_{21} &amp; 0 &amp; &amp; \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\\\<br>-a_{n1} &amp; -a_{n2} &amp;\\cdots &amp; 0\\end{pmatrix}<br>\\begin{pmatrix}<br>x_{1}^{(k+1)}\\\\<br>x_{2}^{(k+1)}\\\\<br>\\vdots\\\\<br>x_{n}^{(k+1)}<br>\\end{pmatrix}\\\\<br>&amp;+\\begin{pmatrix}<br>0 &amp; -a_{12} &amp; &amp; -a_{1n}\\\\<br>&amp; 0 &amp; \\cdots &amp; -a_{2n}\\\\<br>&amp; &amp; \\ddots &amp; \\vdots \\\\<br>&amp; &amp; &amp; 0\\end{pmatrix}\\begin{pmatrix}x_{1}^{(k)}\\\\<br>x_{2}^{(k)}\\\\<br>\\vdots\\\\<br>x_{n}^{(k)}<br>\\end{pmatrix}+<br>\\begin{pmatrix}<br>b_1\\\\<br>b_2\\\\<br>\\vdots\\\\<br>b_n<br>\\end{pmatrix}<br>\\end{align}$$</p><p>即：<br>$$<br>\\boldsymbol{D}\\boldsymbol{x}^{(k+1)}=\\boldsymbol{L}\\boldsymbol{x}^{(k+1)}+\\boldsymbol{U}\\boldsymbol{x}^{(k)}+\\boldsymbol{b}\\\\<br>\\boldsymbol{D}\\boldsymbol{x}^{(k+1)}-\\boldsymbol{L}\\boldsymbol{x}^{(k+1)}=\\boldsymbol{U}\\boldsymbol{x}^{(k)}+\\boldsymbol{b}\\\\<br>\\boldsymbol{x}^{(k+1)}=(\\boldsymbol{D}-\\boldsymbol{L})^{-1}\\boldsymbol{U}\\boldsymbol{x}^{(k)}+(\\boldsymbol{D}-\\boldsymbol{L})^{-1}\\boldsymbol{b}<br>$$</p><h4 id=\"连续过松弛-SOR\"><a href=\"#连续过松弛-SOR\" class=\"headerlink\" title=\"连续过松弛(SOR)\"></a>连续过松弛(SOR)</h4><p>高斯塞德尔迭代格式如下：</p><p>$$x_{i}^{(k+1)}=\\frac{1}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{i-1}a_{ij}x_j^{(k+1)}-\\sum\\limits_{j=i+1}^{n}a_{ij}x_j^{(k)}\\Big)$$</p><p>\b</p><p>我们考虑上式右端和$x_i^{(k)}$的线性组合形式来计算$x_i^{(k+1)}$得到如下格式：</p><p>$$x_{i}^{(k+1)}=(1-\\omega)x_{i}^{(k)}+\\frac{\\omega}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{i-1}a_{ij}x_j^{(k+1)}-\\sum\\limits_{j=i+1}^{n}a_{ij}x_j^{(k)}\\Big)$$</p><p>以上即为超松弛格式(SOR)，其中$\\omega$为松弛系数，调整松弛系数来加快迭代计算速度，\b当$\\omega=1$时，\b即为高斯塞德尔迭代。</p><p>\b代码见:</p><p><a href=\"https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/iterativeMethod.cpp\" target=\"_blank\" rel=\"noopener\">https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/iterativeMethod.cpp</a></p><h3 id=\"一种特殊的迭代求解线性方程组的方法\"><a href=\"#一种特殊的迭代求解线性方程组的方法\" class=\"headerlink\" title=\"一种特殊的迭代求解\b线性方程组的方法\"></a>一种特殊的迭代求解\b线性方程组的方法</h3><p>\b</p><h4 id=\"引言-1\"><a href=\"#引言-1\" class=\"headerlink\" title=\"引言\"></a>引言</h4><p>\b\b我们要求解的线性方程组为$Ax=b$，注意到函数$G(x)=\\frac{1}{2}x^T Ax-x^T b$达到极小值时满足$\\frac{d G}{dx}=Ax-b=0$，所以我们将求解线性方程组转换成求解函数$G(x)=\\frac{1}{2}x^T Ax-x^T b$的极小值。为了保证解的唯一性，我们要求系数矩阵$A$是正定且对称的，这样函数$G(x)$为凸函数，其局部最小值即为全局极小值且唯一。</p><p>综上，我们可以使用一些求解函数最小值的算法求解\b线性方程组$Ax=b$，下面只介绍一种算法：共轭梯度法。</p><h4 id=\"共轭梯度法\"><a href=\"#共轭梯度法\" class=\"headerlink\" title=\"共轭梯度法\"></a>共轭梯度法</h4><p><strong>共轭</strong> 共轭可以理解成一种推广的向量正交，它指对于正定对称矩阵$A$，如果向量$u,v$满足$u^T Av=0$，则称向量$u,v$\b关于矩阵$A$共轭，显然向量$u,v$正交即向量$u,v$关于\b矩阵$I$共轭。</p><p>\b\b\b\b\b\b\b\b求解\b\b\b函数\b$G(x)$极小值过程为：</p><ol><li>\b选定初值$x_{0}$，初始搜索方向$s_{0}$，一般选为$s_{0}=-\\nabla G(x_{0})$</li><li>\u001d下一步迭代点由式$x_{k+1}=x_{k}+\\lambda_{k} s_{k}$给出，其中$\\lambda_{k}$由\b\b$\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}=0$计算得到</li><li>\b计算下一步搜索方向$s_{k+1}$</li><li>\b重复上述过程直到满足收敛条件，如$\\nabla G(x_k)=0$.</li></ol><p>上述中$\\lambda_{k}$表示第$k$步沿方向$s_{k}$的搜索步长，\b\b$\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}=0$保证找到的步长使得函数减小最多。\b</p><p><strong>共轭梯度法</strong> 就是\b选定一组共轭的搜索方向，\b\b这种选取方式能保证\b迭代最多$n$步就能收敛最小值。</p><p><strong>首先</strong> 我们确定$\\lambda_{k}$，$\\lambda_{k}$由\b\b$\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}=0$确定。<br>\b所以：<br>$$\\begin{align}\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}&amp;=\\nabla G(x_{k}+\\lambda_{k} s_{(k)})^T s_{k}\\\\<br>&amp;=[A(x_{k}+\\lambda_{k} s_{k})]^T s_{k} -b^T s_{k}\\\\<br>&amp;=x_{k}^T As_{k}+\\lambda_{k}s_{k}^T A s_{k}-b^T s_{k}\\\\<br>&amp;=0\\\\<br>\\Longrightarrow \\lambda_k&amp;= \\frac{(b^T-x_k^T A)s_k}{s_k^T A s_k}=\\frac{s_k^T( b-Ax_k)}{s_k^T A s_k}<br>\\end{align}<br>$$</p><p><strong>然后</strong> 我们生成共轭方向作为每次迭代的搜索方向。\b我们可以\b将每次迭代计算得到的负\b梯度方向$=\\nabla G(x)$作为初始\b方向，然后用类似<a href=\"https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process\" target=\"_blank\" rel=\"noopener\">施密特正交化</a>的方式生成共轭方向。</p><p>每次迭代计算的负梯度为：$-\\nabla G(x_k)=b-Ax_k=r_k$，对于线性方程组$Ax=b$来说，$b-Ax_k$为每步计算的残差，所以这里设为$r_k$。</p><p>类似施密特正交化我们得到共轭方向：</p><p>$$\\begin{align}s_0&amp;=r_0=b-Ax_0,\\\\<br>s_k&amp;=r_k-\\sum_{i&lt;k}\\frac{s_i^T A r_k}{s_i^T A s_i}s_i\\end{align}$$</p><p>\b\b显然$s_j,\\,(j=0,1,2…k)$相互关于$A$共轭，归纳显然。</p><p>\b<strong>最后</strong> 证明共轭梯度法最多$n$步收敛\b</p><p>$n$步收敛\b只需要证明$\\nabla G(x_n)=0$即可。</p><p>$$\\begin{align}\\nabla G(x_n)&amp;=Ax_n-b\\\\<br>&amp;=A(x_{n-1}+\\lambda_{n-1}s_{n-1})-b\\\\<br>&amp;=\\nabla G(x_{n-1})+\\lambda_{n-1}As_{n-1}\\\\<br>&amp;=\\nabla G(x_{j})+\\sum\\limits_{i=j}^{n-1}\\lambda_i A s_i<br>\\end{align}$$</p><p>对上式右乘$s_j,\\, j=0,1,2,…,n-1$<br>$$\\begin{align}\\therefore \\nabla G(x_n)^T s_j<br>&amp;=\\nabla G(x_{j})^T s_j+\\sum\\limits_{i=j}^{n-1}\\lambda_i s_i^T A s_j\\\\<br>&amp;=\\nabla G(x_{j})^T s_j+\\lambda_j s_j^T A s_j\\\\<br>&amp;=(\\nabla G(x_{j})+\\lambda_j A s_j)^Ts_j\\\\<br>&amp;=\\nabla G(x_{j+1})^T s_j<br>\\end{align}$$</p><p>注意到：</p><p>$$\\frac{d G(x_j+\\lambda s_j)}{d \\lambda}=\\nabla G(x_{j+1})^T s_j=0$$</p><p>有：</p><p>$$\\nabla G(x_n)^T s_j=\\nabla G(x_{j+1})^T s_j=0,\\, j=0,1,2,…,n-1$$</p><p>\b对于一组$A$共轭向量$s_j,\\, j=0,1,2,…,n-1$,$\\nabla G(x_n)^T s_j=0$,显然$\\nabla G(x_n)=0$,所以共轭梯度法最多$n$步收敛\b。</p><p><strong>程序计算步骤</strong>：</p><p>$$\\begin{align} &amp;r_0 = b - Ax_0\\\\<br>&amp;\\text{如果} r_0\\text{足够小, 就返回 } x_0\\text{ \b作为结果}\\\\<br>&amp;s_0=r_0\\\\<br>&amp;k=0\\\\<br>&amp;\\text{循环：}\\\\<br>&amp;\\qquad \\alpha_k=\\frac {r_k^T r_k}{s_k^T As_k}\\\\<br>&amp;\\qquad x_{k+1}= x_k+\\alpha_k s_k\\\\<br>&amp;\\qquad r_{k+1}= r_k-\\alpha_k As_k\\\\<br>&amp;\\qquad \\text{如果} r_{k+1}\\text{ 足够小, 就跳出循环}\\\\<br>&amp;\\qquad \\beta_k={\\frac { r_{k+1}^T r_{k+1}}{ r_k^T r_k}}\\\\<br>&amp;\\qquad s_{k+1} = r_{k+1}+\\beta_k s_k\\\\<br>&amp;\\qquad k=k+1\\\\<br>&amp;\\text{返回 } x_{k+1}\\text{作为结果}<br>\\end{align}$$</p><p>代码见:</p><p><a href=\"https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/ConjugateGradient.py\" target=\"_blank\" rel=\"noopener\">https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/ConjugateGradient.py</a></p><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Mon Dec 31 2018 19:38:44 GMT+0800 (CST) --><h3 id=\"一般迭代法\"><a href=\"#一般迭代法\" class=\"headerlink\" title=\"一般迭代法\"></a>一般迭代法</h3><h4 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h4><p>对于一般的线性方程组直接求解有高斯消去法，对称矩阵的Cholesky分解，三对角矩阵的Thomas算法。而计算过程中经常会遇到稀疏矩阵（\b矩阵的零元素远多于非零元素），使用高斯消去会将\b零元素变为非零元素，增加不必要的计算次数。而迭代法是一种求解线性方程组系数矩阵为稀疏矩阵时的高效算法。</p><p>通过将线性方程组<br>$$\\boldsymbol{Ax}=\\boldsymbol{b}$$<br>等价改写成<br>$$\\boldsymbol{x}=\\boldsymbol{Bx}+\\boldsymbol{f}$$<br>便可得到迭代法：<br>$$\\boldsymbol{x}^{(k+1)}=\\boldsymbol{B}\\boldsymbol{x}^{(k)}+\\boldsymbol{f}$$<br><strong>定理</strong>：迭代法<br>$$\\boldsymbol{x}^{(k+1)}=\\boldsymbol{B}\\boldsymbol{x}^{(k)}+\\boldsymbol{f}$$<br>对任意初始点$\\boldsymbol{x}^{(0)}$和$\\boldsymbol{f}$均收敛的充要条件是$\\rho(\\boldsymbol{B})&lt;1$.</p><h4 id=\"雅可比-Jacobi-迭代\"><a href=\"#雅可比-Jacobi-迭代\" class=\"headerlink\" title=\"雅可比(Jacobi)迭代\"></a>雅可比(Jacobi)迭代</h4><p>设一般形式的线性方程组如下：<br>$$<br>a_{11}x_1+a_{12}x_2+\\cdots+a_{1n}x_n=b_1,\\\\<br>a_{21}x_1+a_{22}x_2+\\cdots+a_{2n}x_n=b_2,\\\\<br>\\cdots\\\\<br>a_{n1}x_1+a_{n2}x_2+\\cdots+a_{nn}x_n=b_n<br>$$<br>将上述线性方程组作简单调整就可以得到Jacobi迭代公式了，将上述线性方程组写成如下形式\b：<br>$$\\begin{align}<br>x_1&amp;=\\frac{1}{a_{1,1}}(b_1-a_{1,2}x_2-\\cdots-a_{1,n}x_n)，\\\\<br>x_2&amp;=\\frac{1}{a_{2,2}}(b_2-a_{2,1}x_1-a_{2,3}x_3\\cdots-a_{2,n}x_n),\\\\<br>\\cdots\\\\<br>x_n&amp;=\\frac{1}{a_{n,n}}(b_n-a_{n,1}x_1-a_{n,2}x_2-\\cdots-a_{n,n-1}x_{n-1})<br>\\end{align}<br>$$<br>上述线性方程组左边视为新一时刻的值，那么这个新值就可以利用右边的旧值计算得到，于是得到的迭代格式即：<br>$$<br>x_{i}^{(k+1)}=x_{i}^{(k)}+\\frac{1}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{n}a_{ij}x_{j}^{(k)}\\Big)<br>$$<br>上式即为Jacobi迭代法。</p><p>设<br>$$\\begin{align}\\boldsymbol{D}&amp;=\\boldsymbol{diag}(a_{11},a_{22},\\cdots,a_{nn}),\\\\<br>\\boldsymbol{L}&amp;=\\begin{bmatrix}0 &amp; &amp; &amp; &amp; &amp;0\\\\<br>-a_{21} &amp; 0 &amp; &amp; &amp; &amp;\\\\<br>\\vdots &amp; \\ddots &amp; \\ddots &amp; &amp; &amp;\\\\<br>-a_{j1} &amp; \\cdots &amp; -a_{j,j-1} &amp; 0&amp; &amp;\\\\<br>\\vdots &amp; &amp; \\vdots &amp; \\ddots &amp; \\ddots &amp; \\\\<br>-a_{n1} &amp; \\cdots &amp; -a_{n,j-1} &amp; \\cdots &amp; -a_{n,n-1} &amp; 0<br>\\end{bmatrix},\\\\<br>\\boldsymbol{U}&amp;=\\begin{bmatrix}0 &amp; -a_{12} &amp; \\cdots &amp; -a_{1j} &amp; \\cdots &amp; -a_{1n}\\\\<br>&amp; 0 &amp; \\ddots &amp;\\vdots &amp; &amp;\\vdots\\\\<br>&amp; &amp; \\ddots &amp; -a_{j-1,j} &amp; \\cdots &amp; -a_{j-1,n}\\\\<br>&amp; &amp; &amp; \\ddots &amp; \\ddots &amp; \\vdots\\\\<br>&amp; &amp; &amp; &amp; 0 &amp; -a_{n-1,n} \\\\<br>0 &amp; &amp; &amp; &amp; &amp; 0<br>\\end{bmatrix},<br>\\end{align}$$<br>则:<br>$$<br>\\boldsymbol{A}=\\boldsymbol{D}-\\boldsymbol{L}-\\boldsymbol{U}\\\\<br>\\boldsymbol{D}\\boldsymbol{x}=(\\boldsymbol{L}+\\boldsymbol{U})\\boldsymbol{x}+\\boldsymbol{b}\\\\<br>\\boldsymbol{x}=\\boldsymbol{D}^{-1}(\\boldsymbol{L}+\\boldsymbol{U})\\boldsymbol{x}+\\boldsymbol{D}^{-1}\\boldsymbol{b}<br>$$<br>所以矩阵形式的Jacobi迭代即为:<br>$$<br>\\boldsymbol{x}^{(k+1)}=\\boldsymbol{D}^{-1}(\\boldsymbol{L}+\\boldsymbol{U})\\boldsymbol{x}^{(k)}+\\boldsymbol{D}^{-1}\\boldsymbol{b}<br>$$</p><h4 id=\"高斯塞德尔-Gauss–Seidel-迭代\"><a href=\"#高斯塞德尔-Gauss–Seidel-迭代\" class=\"headerlink\" title=\"高斯塞德尔(Gauss–Seidel)迭代\"></a>高斯塞德尔(Gauss–Seidel)迭代</h4><p>注意到Jacobi迭代计算每一个方程时都会产生新值，而这个新值就可以放到下一个方程里代替旧值计算，即原式：<br>$$\\begin{align}<br>x_1\b^{(k+1)}&amp;=\\frac{1}{a_{1,1}}(b_1-a_{1,2}x_2^{(k)}-\\cdots-a_{1,n}x_n^{(k)})，\\\\<br>x_2^{(k+1)}&amp;=\\frac{1}{a_{2,2}}(b_2-a_{2,1}x_1^{(k)}-a_{2,3}x_3^{(k)}\\cdots-a_{2,n}x_n^{(k)}),\\\\<br>\\cdots\\\\<br>x_n^{(k+1)}&amp;=\\frac{1}{a_{n,n}}(b_n-a_{n,1}x_1^{(k)}-a_{n,2}x_2^{(k)}-\\cdots-a_{n,n-1}x_{n-1}^{(k)})<br>\\end{align}<br>$$<br>修改为：<br>$$\\begin{align}<br>x_1\b^{(k+1)}&amp;=\\frac{1}{a_{1,1}}(b_1-a_{1,2}x_2^{(k)}-\\cdots-a_{1,n}x_n^{(k)})，\\\\<br>x_2^{(k+1)}&amp;=\\frac{1}{a_{2,2}}(b_2-a_{2,1}x_1^{(k+1)}-a_{2,3}x_3^{(k)}\\cdots-a_{2,n}x_n^{(k)}),\\\\<br>\\cdots\\\\<br>x_{n-1}^{(k+1)}&amp;=\\frac{1}{a_{n-1,n-1}}(b_{n-1}-a_{n-1,1}x_1^{(k+1)}-a_{n-1,2}x_2^{(k+1)}-\\cdots-a_{n-1,n-2}x_{n-2}^{(k+1)}-a_{n-1,n}x_{n}^{(k)})\\\\<br>x_n^{(k+1)}&amp;=\\frac{1}{a_{n,n}}(b_n-a_{n,1}x_1^{(k+1)}-a_{n,2}x_2^{(k+1)}-\\cdots-a_{n,n-1}x_{n-1}^{(k+1)})<br>\\end{align}<br>$$<br>即：<br>$$<br>x_{i}^{(k+1)}=\\frac{1}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{i-1}a_{ij}x_j^{(k+1)}-\\sum\\limits_{j=i+1}^{n}a_{ij}x_j^{(k)}\\Big)$$<br>写成矩阵形式:<br>$$<br>\\begin{align}<br>\\begin{pmatrix}a_{11} &amp; &amp; &amp;\\\\<br>&amp; a_{22} &amp; &amp; \\\\<br>&amp; &amp; \\ddots &amp; \\\\<br>&amp; &amp; &amp; a_{nn}\\end{pmatrix}\\begin{pmatrix}x_{1}^{(k+1)}\\\\<br>x_{2}^{(k+1)}\\\\<br>\\vdots\\\\<br>x_{n}^{(k+1)}\\end{pmatrix}&amp;=<br>\\begin{pmatrix}<br>0 &amp; &amp; &amp;\\\\<br>-a_{21} &amp; 0 &amp; &amp; \\\\<br>\\vdots &amp; \\vdots &amp; \\ddots &amp; \\\\<br>-a_{n1} &amp; -a_{n2} &amp;\\cdots &amp; 0\\end{pmatrix}<br>\\begin{pmatrix}<br>x_{1}^{(k+1)}\\\\<br>x_{2}^{(k+1)}\\\\<br>\\vdots\\\\<br>x_{n}^{(k+1)}<br>\\end{pmatrix}\\\\<br>&amp;+\\begin{pmatrix}<br>0 &amp; -a_{12} &amp; &amp; -a_{1n}\\\\<br>&amp; 0 &amp; \\cdots &amp; -a_{2n}\\\\<br>&amp; &amp; \\ddots &amp; \\vdots \\\\<br>&amp; &amp; &amp; 0\\end{pmatrix}\\begin{pmatrix}x_{1}^{(k)}\\\\<br>x_{2}^{(k)}\\\\<br>\\vdots\\\\<br>x_{n}^{(k)}<br>\\end{pmatrix}+<br>\\begin{pmatrix}<br>b_1\\\\<br>b_2\\\\<br>\\vdots\\\\<br>b_n<br>\\end{pmatrix}<br>\\end{align}$$</p><p>即：<br>$$<br>\\boldsymbol{D}\\boldsymbol{x}^{(k+1)}=\\boldsymbol{L}\\boldsymbol{x}^{(k+1)}+\\boldsymbol{U}\\boldsymbol{x}^{(k)}+\\boldsymbol{b}\\\\<br>\\boldsymbol{D}\\boldsymbol{x}^{(k+1)}-\\boldsymbol{L}\\boldsymbol{x}^{(k+1)}=\\boldsymbol{U}\\boldsymbol{x}^{(k)}+\\boldsymbol{b}\\\\<br>\\boldsymbol{x}^{(k+1)}=(\\boldsymbol{D}-\\boldsymbol{L})^{-1}\\boldsymbol{U}\\boldsymbol{x}^{(k)}+(\\boldsymbol{D}-\\boldsymbol{L})^{-1}\\boldsymbol{b}<br>$$</p><h4 id=\"连续过松弛-SOR\"><a href=\"#连续过松弛-SOR\" class=\"headerlink\" title=\"连续过松弛(SOR)\"></a>连续过松弛(SOR)</h4><p>高斯塞德尔迭代格式如下：</p><p>$$x_{i}^{(k+1)}=\\frac{1}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{i-1}a_{ij}x_j^{(k+1)}-\\sum\\limits_{j=i+1}^{n}a_{ij}x_j^{(k)}\\Big)$$</p><p>\b</p><p>我们考虑上式右端和$x_i^{(k)}$的线性组合形式来计算$x_i^{(k+1)}$得到如下格式：</p><p>$$x_{i}^{(k+1)}=(1-\\omega)x_{i}^{(k)}+\\frac{\\omega}{a_{ii}}\\Big(b_i-\\sum\\limits_{j=1}^{i-1}a_{ij}x_j^{(k+1)}-\\sum\\limits_{j=i+1}^{n}a_{ij}x_j^{(k)}\\Big)$$</p><p>以上即为超松弛格式(SOR)，其中$\\omega$为松弛系数，调整松弛系数来加快迭代计算速度，\b当$\\omega=1$时，\b即为高斯塞德尔迭代。</p><p>\b代码见:</p><p><a href=\"https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/iterativeMethod.cpp\" target=\"_blank\" rel=\"noopener\">https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/iterativeMethod.cpp</a></p><h3 id=\"一种特殊的迭代求解线性方程组的方法\"><a href=\"#一种特殊的迭代求解线性方程组的方法\" class=\"headerlink\" title=\"一种特殊的迭代求解\b线性方程组的方法\"></a>一种特殊的迭代求解\b线性方程组的方法</h3><p>\b</p><h4 id=\"引言-1\"><a href=\"#引言-1\" class=\"headerlink\" title=\"引言\"></a>引言</h4><p>\b\b我们要求解的线性方程组为$Ax=b$，注意到函数$G(x)=\\frac{1}{2}x^T Ax-x^T b$达到极小值时满足$\\frac{d G}{dx}=Ax-b=0$，所以我们将求解线性方程组转换成求解函数$G(x)=\\frac{1}{2}x^T Ax-x^T b$的极小值。为了保证解的唯一性，我们要求系数矩阵$A$是正定且对称的，这样函数$G(x)$为凸函数，其局部最小值即为全局极小值且唯一。</p><p>综上，我们可以使用一些求解函数最小值的算法求解\b线性方程组$Ax=b$，下面只介绍一种算法：共轭梯度法。</p><h4 id=\"共轭梯度法\"><a href=\"#共轭梯度法\" class=\"headerlink\" title=\"共轭梯度法\"></a>共轭梯度法</h4><p><strong>共轭</strong> 共轭可以理解成一种推广的向量正交，它指对于正定对称矩阵$A$，如果向量$u,v$满足$u^T Av=0$，则称向量$u,v$\b关于矩阵$A$共轭，显然向量$u,v$正交即向量$u,v$关于\b矩阵$I$共轭。</p><p>\b\b\b\b\b\b\b\b求解\b\b\b函数\b$G(x)$极小值过程为：</p><ol><li>\b选定初值$x_{0}$，初始搜索方向$s_{0}$，一般选为$s_{0}=-\\nabla G(x_{0})$</li><li>\u001d下一步迭代点由式$x_{k+1}=x_{k}+\\lambda_{k} s_{k}$给出，其中$\\lambda_{k}$由\b\b$\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}=0$计算得到</li><li>\b计算下一步搜索方向$s_{k+1}$</li><li>\b重复上述过程直到满足收敛条件，如$\\nabla G(x_k)=0$.</li></ol><p>上述中$\\lambda_{k}$表示第$k$步沿方向$s_{k}$的搜索步长，\b\b$\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}=0$保证找到的步长使得函数减小最多。\b</p><p><strong>共轭梯度法</strong> 就是\b选定一组共轭的搜索方向，\b\b这种选取方式能保证\b迭代最多$n$步就能收敛最小值。</p><p><strong>首先</strong> 我们确定$\\lambda_{k}$，$\\lambda_{k}$由\b\b$\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}=0$确定。<br>\b所以：<br>$$\\begin{align}\\frac{d G(x_{k}+\\lambda_{k} s_{k})}{d \\lambda_{k}}&amp;=\\nabla G(x_{k}+\\lambda_{k} s_{(k)})^T s_{k}\\\\<br>&amp;=[A(x_{k}+\\lambda_{k} s_{k})]^T s_{k} -b^T s_{k}\\\\<br>&amp;=x_{k}^T As_{k}+\\lambda_{k}s_{k}^T A s_{k}-b^T s_{k}\\\\<br>&amp;=0\\\\<br>\\Longrightarrow \\lambda_k&amp;= \\frac{(b^T-x_k^T A)s_k}{s_k^T A s_k}=\\frac{s_k^T( b-Ax_k)}{s_k^T A s_k}<br>\\end{align}<br>$$</p><p><strong>然后</strong> 我们生成共轭方向作为每次迭代的搜索方向。\b我们可以\b将每次迭代计算得到的负\b梯度方向$=\\nabla G(x)$作为初始\b方向，然后用类似<a href=\"https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process\" target=\"_blank\" rel=\"noopener\">施密特正交化</a>的方式生成共轭方向。</p><p>每次迭代计算的负梯度为：$-\\nabla G(x_k)=b-Ax_k=r_k$，对于线性方程组$Ax=b$来说，$b-Ax_k$为每步计算的残差，所以这里设为$r_k$。</p><p>类似施密特正交化我们得到共轭方向：</p><p>$$\\begin{align}s_0&amp;=r_0=b-Ax_0,\\\\<br>s_k&amp;=r_k-\\sum_{i&lt;k}\\frac{s_i^T A r_k}{s_i^T A s_i}s_i\\end{align}$$</p><p>\b\b显然$s_j,\\,(j=0,1,2…k)$相互关于$A$共轭，归纳显然。</p><p>\b<strong>最后</strong> 证明共轭梯度法最多$n$步收敛\b</p><p>$n$步收敛\b只需要证明$\\nabla G(x_n)=0$即可。</p><p>$$\\begin{align}\\nabla G(x_n)&amp;=Ax_n-b\\\\<br>&amp;=A(x_{n-1}+\\lambda_{n-1}s_{n-1})-b\\\\<br>&amp;=\\nabla G(x_{n-1})+\\lambda_{n-1}As_{n-1}\\\\<br>&amp;=\\nabla G(x_{j})+\\sum\\limits_{i=j}^{n-1}\\lambda_i A s_i<br>\\end{align}$$</p><p>对上式右乘$s_j,\\, j=0,1,2,…,n-1$<br>$$\\begin{align}\\therefore \\nabla G(x_n)^T s_j<br>&amp;=\\nabla G(x_{j})^T s_j+\\sum\\limits_{i=j}^{n-1}\\lambda_i s_i^T A s_j\\\\<br>&amp;=\\nabla G(x_{j})^T s_j+\\lambda_j s_j^T A s_j\\\\<br>&amp;=(\\nabla G(x_{j})+\\lambda_j A s_j)^Ts_j\\\\<br>&amp;=\\nabla G(x_{j+1})^T s_j<br>\\end{align}$$</p><p>注意到：</p><p>$$\\frac{d G(x_j+\\lambda s_j)}{d \\lambda}=\\nabla G(x_{j+1})^T s_j=0$$</p><p>有：</p><p>$$\\nabla G(x_n)^T s_j=\\nabla G(x_{j+1})^T s_j=0,\\, j=0,1,2,…,n-1$$</p><p>\b对于一组$A$共轭向量$s_j,\\, j=0,1,2,…,n-1$,$\\nabla G(x_n)^T s_j=0$,显然$\\nabla G(x_n)=0$,所以共轭梯度法最多$n$步收敛\b。</p><p><strong>程序计算步骤</strong>：</p><p>$$\\begin{align} &amp;r_0 = b - Ax_0\\\\<br>&amp;\\text{如果} r_0\\text{足够小, 就返回 } x_0\\text{ \b作为结果}\\\\<br>&amp;s_0=r_0\\\\<br>&amp;k=0\\\\<br>&amp;\\text{循环：}\\\\<br>&amp;\\qquad \\alpha_k=\\frac {r_k^T r_k}{s_k^T As_k}\\\\<br>&amp;\\qquad x_{k+1}= x_k+\\alpha_k s_k\\\\<br>&amp;\\qquad r_{k+1}= r_k-\\alpha_k As_k\\\\<br>&amp;\\qquad \\text{如果} r_{k+1}\\text{ 足够小, 就跳出循环}\\\\<br>&amp;\\qquad \\beta_k={\\frac { r_{k+1}^T r_{k+1}}{ r_k^T r_k}}\\\\<br>&amp;\\qquad s_{k+1} = r_{k+1}+\\beta_k s_k\\\\<br>&amp;\\qquad k=k+1\\\\<br>&amp;\\text{返回 } x_{k+1}\\text{作为结果}<br>\\end{align}$$</p><p>代码见:</p><p><a href=\"https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/ConjugateGradient.py\" target=\"_blank\" rel=\"noopener\">https://github.com/Love-Chrissie/numerical-computation/blob/master/%E8%BF%AD%E4%BB%A3%E6%B3%95/ConjugateGradient.py</a></p><hr><!-- rebuild by neat -->"},{"title":"高斯消去法","abbrlink":42605,"date":"2018-09-28T03:18:07.000Z","_content":"\n高斯消去法与$LU$分解\n\n高斯消去法思想就是通过初等行变换将\b系数矩阵变换成上三角矩阵，最后一行就解出了最后一个未知数的值，向上回带即可得到结果。\n\n计算过程就是第二行开始每一行乘以第一行的$\\lambda_{i}$倍，使得每一行第一个系数为0，然后对每一行做同样操作循环下去（下一次从第三行开始，使\b每一行第二个系数为0），使得系数矩阵变成上三角矩阵。最后回带每个未知量，求得结果。\n\n例，对于线性方程组$\\boldsymbol{Ax}=\\boldsymbol{b}$，其中：\n$$\n A=\\begin{bmatrix}\n   2 & 1 & 1 & 0 \\\\\\\\\n   4 & 3 & 3 & 1 \\\\\\\\\n   8 & 7 & 9 & 5 \\\\\\\\\n   6 & 7 & 9 & 8\n  \\end{bmatrix},\\quad\n  b=\\begin{bmatrix}\n    4 \\\\\\\\\n    11 \\\\\\\\\n    29 \\\\\\\\\n    30\n   \\end{bmatrix}.\n$$\n计算步骤：\n\n$\\begin{aligned}(\\boldsymbol A |\\boldsymbol b)&\\xrightarrow{第一次消元}\n\\begin{bmatrix}\n  2 & 1 & 1 & 0 & 4 \\\\\\\\\n  0 & 1 & 1 & 1 & 3 \\\\\\\\\n  0 & 3 & 5 & 5 & 13\\\\\\\\\n  0 & 4 & 6 & 8 & 18\n \\end{bmatrix}\\xrightarrow{第二次消元}\\begin{bmatrix}\n   2 & 1 & 1 & 0 & 4 \\\\\\\\\n   0 & 1 & 1 & 1 & 3 \\\\\\\\\n   0 & 0 & 2 & 2 & 4\\\\\\\\\n   0 & 0 & 2 & 4 & 6\n  \\end{bmatrix}\\\\\\\\&\\xrightarrow{第三次消元}\\begin{bmatrix}\n    2 & 1 & 1 & 0 & 4 \\\\\\\\\n    0 & 1 & 1 & 1 & 3 \\\\\\\\\n    0 & 0 & 2 & 2 & 4\\\\\\\\\n    0 & 0 & 0 & 2 & 2\n   \\end{bmatrix}=(\\boldsymbol U|\\boldsymbol c)\\end{aligned}$\n\n 解上三角方程组$\\boldsymbol{Ux}=\\boldsymbol{c}$，得方程组得解为$\\boldsymbol{x}=(1,1,1,1)^{T}$.\n 上述行变换可以用初等矩阵来描述：\n\n $\\boldsymbol L_1\\boldsymbol A =\n \\begin{bmatrix}\n   1 & 0 & 0 & 0 \\\\\\\\\n   -2 & 1 & 0 & 0 \\\\\\\\\n   -4 & 0 & 1 & 0 \\\\\\\\\n   -3 & 0 & 0 & 1\n  \\end{bmatrix}\n \\begin{bmatrix}\n   2 & 1 & 1 & 0 \\\\\\\\\n   4 & 3 & 3 & 1 \\\\\\\\\n   8 & 7 & 9 & 5 \\\\\\\\\n   6 & 7 & 9 & 8\n  \\end{bmatrix}=\\begin{bmatrix}\n    2 & 1 & 1 & 0 \\\\\\\\\n    0 & 1 & 1 & 1 \\\\\\\\\n    0 & 3 & 5 & 5 \\\\\\\\\n    0 & 4 & 6 & 8\n   \\end{bmatrix}$\n\n   $\\begin{aligned}\\boldsymbol L_2\\boldsymbol L_1\\boldsymbol A &=\n   \\begin{bmatrix}\n     1 & 0 & 0 & 0 \\\\\\\\\n     0 & 1 & 0 & 0 \\\\\\\\\n     0 & -3 & 1 & 0 \\\\\\\\\n     0 & -4 & 0 & 1\n    \\end{bmatrix}\n   \\begin{bmatrix}\n     1 & 0 & 0 & 0 \\\\\\\\\n     -2 & 1 & 0 & 0 \\\\\\\\\n     -4 & 0 & 1 & 0 \\\\\\\\\n     -3 & 0 & 0 & 1\n    \\end{bmatrix}\n   \\begin{bmatrix}\n     2 & 1 & 1 & 0 \\\\\\\\\n     4 & 3 & 3 & 1 \\\\\\\\\n     8 & 7 & 9 & 5 \\\\\\\\\n     6 & 7 & 9 & 8\n    \\end{bmatrix}\\\\\\\\&=\n    \\begin{bmatrix}\n      1 & 0 & 0 & 0 \\\\\\\\\n      -2 & 1 & 0 & 0 \\\\\\\\\n      -4 & -3 & 1 & 0 \\\\\\\\\n      -3 & -4 & 0 & 1\n     \\end{bmatrix}\n     \\begin{bmatrix}\n      2 & 1 & 1 & 0 \\\\\\\\\n      4 & 3 & 3 & 1 \\\\\\\\\n      8 & 7 & 9 & 5 \\\\\\\\\n      6 & 7 & 9 & 8\n     \\end{bmatrix}=\n     \\begin{bmatrix}\n       2 & 1 & 1 & 0 \\\\\\\\\n       0 & 1 & 1 & 1 \\\\\\\\\n       0 & 0 & 2 & 2 \\\\\\\\\n       0 & 0 & 2 & 4\n      \\end{bmatrix}\\end{aligned}$\n\n$\\begin{aligned}\\boldsymbol L_3\\boldsymbol L_2\\boldsymbol L_1\\boldsymbol A &=\n\\begin{bmatrix}\n  1 & 0 & 0 & 0 \\\\\\\\\n  0 & 1 & 0 & 0 \\\\\\\\\n  0 & 0 & 1 & 0 \\\\\\\\\n  0 & 0 & -1 & 1\n \\end{bmatrix}\n      \\begin{bmatrix}\n        1 & 0 & 0 & 0 \\\\\\\\\n        0 & 1 & 0 & 0 \\\\\\\\\n        0 & -3 & 1 & 0 \\\\\\\\\n        0 & -4 & 0 & 1\n       \\end{bmatrix}\n      \\begin{bmatrix}\n        1 & 0 & 0 & 0 \\\\\\\\\n        -2 & 1 & 0 & 0 \\\\\\\\\n        -4 & 0 & 1 & 0 \\\\\\\\\n        -3 & 0 & 0 & 1\n       \\end{bmatrix}\n      \\begin{bmatrix}\n        2 & 1 & 1 & 0 \\\\\\\\\n        4 & 3 & 3 & 1 \\\\\\\\\n        8 & 7 & 9 & 5 \\\\\\\\\n        6 & 7 & 9 & 8\n       \\end{bmatrix}\\\\\\\\\n       &=\n       \\begin{bmatrix}\n         1 & 0 & 0 & 0 \\\\\\\\\n         -2 & 1 & 0 & 0 \\\\\\\\\n         -4 & -3 & 1 & 0 \\\\\\\\\n         -3 & -4 & -1 & 1\n        \\end{bmatrix}\n        \\begin{bmatrix}\n         2 & 1 & 1 & 0 \\\\\\\\\n         4 & 3 & 3 & 1 \\\\\\\\\n         8 & 7 & 9 & 5 \\\\\\\\\n         6 & 7 & 9 & 8\n        \\end{bmatrix}=\n        \\begin{bmatrix}\n          2 & 1 & 1 & 0 \\\\\\\\\n          0 & 1 & 1 & 1 \\\\\\\\\n          0 & 0 & 2 & 2 \\\\\\\\\n          0 & 0 & 0 & 2\n         \\end{bmatrix}=\\boldsymbol U\\end{aligned}$\n\n所以：\n\n$\\boldsymbol A=\\boldsymbol L \\boldsymbol U=\n\\begin{bmatrix}\n  1 & 0 & 0 & 0 \\\\\\\\\n  2 & 1 & 0 & 0 \\\\\\\\\n  4 & 3 & 1 & 0 \\\\\\\\\n  3 & 4 & 1 & 1\n \\end{bmatrix}\n \\begin{bmatrix}\n  2 & 1 & 1 & 0 \\\\\\\\\n  0 & 1 & 1 & 1 \\\\\\\\\n  0 & 0 & 2 & 2 \\\\\\\\\n  0 & 0 & 0 & 2\n \\end{bmatrix}$\n\n\b高斯消去法先得到上三角矩阵再回代求解，而$LU$分解先对系数矩阵$A$分解成两上下三角矩阵，然后两次回代求解。\b一般编程语言的科学计算库都是使用$LU$分解求线性方程组。\n\n**定理** 若$n$阶方阵逐次（左上角）主子式$det A_k\\neq 0,k=1,2,\\cdots,n$，则$A$可以分解为单位下三角矩阵和上三角矩阵。顺序Gauss消去法可以顺利进行。\n\n | 高斯消去法                           | $LU$分解                |\n | ---------------------------------- | ----------------------- |\n | $Ax=b\\\\\\\\ \\quad\\Downarrow\\\\\\\\Ux=c$ | $A=LU\\\\\\\\ Ly=b\\\\\\\\Ux=y$ |\n\n> 如上讨论的是顺序Gauss消去法，即除数\b$A(k,k)$不为0，或者说除数不能为0。当我们遇到除数\b$A(k,k)$为0的时候就需要进行行交换，将$A(k,k)=0$时的k行换到下方去。\n\n[《科学计算和C程序集》](https://book.douban.com/subject/4247269/)的高斯消去法代码\b：https://github.com/Love-Chrissie/numerical-computation/blob/master/gelim.c\n\npython代码如下:\n```python\nimport numpy as np\n\n# 输入系数矩阵应以numpy中的array类型输入\n# LU分解又称doolittle分解\ndef doolittle(a, n):\n    # 主行\n    l = np.eye(n)\n    u = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            # 乘子，用于消去第j行的i列\n            a[j, i] = a[j, i] / a[i, i]\n            # 对i+1...n-1列\n            for k in range(i + 1, n):\n                a[j, k] = a[j, k] - a[j, i] * a[i, k]  # 消元\n    for i in range(n):\n        for j in range(n):\n            if (j < i):\n                l[i, j] = a[i, j]  # 下三角矩阵\n            else:\n                u[i, j] = a[i, j]  # 上三角矩阵\n    return a,l,u\n```\n\n\n\n\n\n\n\n---\n","source":"_posts/高斯消去法.md","raw":"---\ntitle: 高斯消去法\nabbrlink: 42605\ndate: 2018-09-28 11:18:07\ncategories: 数学\ntags: 矩阵与数值分析\n---\n\n高斯消去法与$LU$分解\n\n高斯消去法思想就是通过初等行变换将\b系数矩阵变换成上三角矩阵，最后一行就解出了最后一个未知数的值，向上回带即可得到结果。\n\n计算过程就是第二行开始每一行乘以第一行的$\\lambda_{i}$倍，使得每一行第一个系数为0，然后对每一行做同样操作循环下去（下一次从第三行开始，使\b每一行第二个系数为0），使得系数矩阵变成上三角矩阵。最后回带每个未知量，求得结果。\n\n例，对于线性方程组$\\boldsymbol{Ax}=\\boldsymbol{b}$，其中：\n$$\n A=\\begin{bmatrix}\n   2 & 1 & 1 & 0 \\\\\\\\\n   4 & 3 & 3 & 1 \\\\\\\\\n   8 & 7 & 9 & 5 \\\\\\\\\n   6 & 7 & 9 & 8\n  \\end{bmatrix},\\quad\n  b=\\begin{bmatrix}\n    4 \\\\\\\\\n    11 \\\\\\\\\n    29 \\\\\\\\\n    30\n   \\end{bmatrix}.\n$$\n计算步骤：\n\n$\\begin{aligned}(\\boldsymbol A |\\boldsymbol b)&\\xrightarrow{第一次消元}\n\\begin{bmatrix}\n  2 & 1 & 1 & 0 & 4 \\\\\\\\\n  0 & 1 & 1 & 1 & 3 \\\\\\\\\n  0 & 3 & 5 & 5 & 13\\\\\\\\\n  0 & 4 & 6 & 8 & 18\n \\end{bmatrix}\\xrightarrow{第二次消元}\\begin{bmatrix}\n   2 & 1 & 1 & 0 & 4 \\\\\\\\\n   0 & 1 & 1 & 1 & 3 \\\\\\\\\n   0 & 0 & 2 & 2 & 4\\\\\\\\\n   0 & 0 & 2 & 4 & 6\n  \\end{bmatrix}\\\\\\\\&\\xrightarrow{第三次消元}\\begin{bmatrix}\n    2 & 1 & 1 & 0 & 4 \\\\\\\\\n    0 & 1 & 1 & 1 & 3 \\\\\\\\\n    0 & 0 & 2 & 2 & 4\\\\\\\\\n    0 & 0 & 0 & 2 & 2\n   \\end{bmatrix}=(\\boldsymbol U|\\boldsymbol c)\\end{aligned}$\n\n 解上三角方程组$\\boldsymbol{Ux}=\\boldsymbol{c}$，得方程组得解为$\\boldsymbol{x}=(1,1,1,1)^{T}$.\n 上述行变换可以用初等矩阵来描述：\n\n $\\boldsymbol L_1\\boldsymbol A =\n \\begin{bmatrix}\n   1 & 0 & 0 & 0 \\\\\\\\\n   -2 & 1 & 0 & 0 \\\\\\\\\n   -4 & 0 & 1 & 0 \\\\\\\\\n   -3 & 0 & 0 & 1\n  \\end{bmatrix}\n \\begin{bmatrix}\n   2 & 1 & 1 & 0 \\\\\\\\\n   4 & 3 & 3 & 1 \\\\\\\\\n   8 & 7 & 9 & 5 \\\\\\\\\n   6 & 7 & 9 & 8\n  \\end{bmatrix}=\\begin{bmatrix}\n    2 & 1 & 1 & 0 \\\\\\\\\n    0 & 1 & 1 & 1 \\\\\\\\\n    0 & 3 & 5 & 5 \\\\\\\\\n    0 & 4 & 6 & 8\n   \\end{bmatrix}$\n\n   $\\begin{aligned}\\boldsymbol L_2\\boldsymbol L_1\\boldsymbol A &=\n   \\begin{bmatrix}\n     1 & 0 & 0 & 0 \\\\\\\\\n     0 & 1 & 0 & 0 \\\\\\\\\n     0 & -3 & 1 & 0 \\\\\\\\\n     0 & -4 & 0 & 1\n    \\end{bmatrix}\n   \\begin{bmatrix}\n     1 & 0 & 0 & 0 \\\\\\\\\n     -2 & 1 & 0 & 0 \\\\\\\\\n     -4 & 0 & 1 & 0 \\\\\\\\\n     -3 & 0 & 0 & 1\n    \\end{bmatrix}\n   \\begin{bmatrix}\n     2 & 1 & 1 & 0 \\\\\\\\\n     4 & 3 & 3 & 1 \\\\\\\\\n     8 & 7 & 9 & 5 \\\\\\\\\n     6 & 7 & 9 & 8\n    \\end{bmatrix}\\\\\\\\&=\n    \\begin{bmatrix}\n      1 & 0 & 0 & 0 \\\\\\\\\n      -2 & 1 & 0 & 0 \\\\\\\\\n      -4 & -3 & 1 & 0 \\\\\\\\\n      -3 & -4 & 0 & 1\n     \\end{bmatrix}\n     \\begin{bmatrix}\n      2 & 1 & 1 & 0 \\\\\\\\\n      4 & 3 & 3 & 1 \\\\\\\\\n      8 & 7 & 9 & 5 \\\\\\\\\n      6 & 7 & 9 & 8\n     \\end{bmatrix}=\n     \\begin{bmatrix}\n       2 & 1 & 1 & 0 \\\\\\\\\n       0 & 1 & 1 & 1 \\\\\\\\\n       0 & 0 & 2 & 2 \\\\\\\\\n       0 & 0 & 2 & 4\n      \\end{bmatrix}\\end{aligned}$\n\n$\\begin{aligned}\\boldsymbol L_3\\boldsymbol L_2\\boldsymbol L_1\\boldsymbol A &=\n\\begin{bmatrix}\n  1 & 0 & 0 & 0 \\\\\\\\\n  0 & 1 & 0 & 0 \\\\\\\\\n  0 & 0 & 1 & 0 \\\\\\\\\n  0 & 0 & -1 & 1\n \\end{bmatrix}\n      \\begin{bmatrix}\n        1 & 0 & 0 & 0 \\\\\\\\\n        0 & 1 & 0 & 0 \\\\\\\\\n        0 & -3 & 1 & 0 \\\\\\\\\n        0 & -4 & 0 & 1\n       \\end{bmatrix}\n      \\begin{bmatrix}\n        1 & 0 & 0 & 0 \\\\\\\\\n        -2 & 1 & 0 & 0 \\\\\\\\\n        -4 & 0 & 1 & 0 \\\\\\\\\n        -3 & 0 & 0 & 1\n       \\end{bmatrix}\n      \\begin{bmatrix}\n        2 & 1 & 1 & 0 \\\\\\\\\n        4 & 3 & 3 & 1 \\\\\\\\\n        8 & 7 & 9 & 5 \\\\\\\\\n        6 & 7 & 9 & 8\n       \\end{bmatrix}\\\\\\\\\n       &=\n       \\begin{bmatrix}\n         1 & 0 & 0 & 0 \\\\\\\\\n         -2 & 1 & 0 & 0 \\\\\\\\\n         -4 & -3 & 1 & 0 \\\\\\\\\n         -3 & -4 & -1 & 1\n        \\end{bmatrix}\n        \\begin{bmatrix}\n         2 & 1 & 1 & 0 \\\\\\\\\n         4 & 3 & 3 & 1 \\\\\\\\\n         8 & 7 & 9 & 5 \\\\\\\\\n         6 & 7 & 9 & 8\n        \\end{bmatrix}=\n        \\begin{bmatrix}\n          2 & 1 & 1 & 0 \\\\\\\\\n          0 & 1 & 1 & 1 \\\\\\\\\n          0 & 0 & 2 & 2 \\\\\\\\\n          0 & 0 & 0 & 2\n         \\end{bmatrix}=\\boldsymbol U\\end{aligned}$\n\n所以：\n\n$\\boldsymbol A=\\boldsymbol L \\boldsymbol U=\n\\begin{bmatrix}\n  1 & 0 & 0 & 0 \\\\\\\\\n  2 & 1 & 0 & 0 \\\\\\\\\n  4 & 3 & 1 & 0 \\\\\\\\\n  3 & 4 & 1 & 1\n \\end{bmatrix}\n \\begin{bmatrix}\n  2 & 1 & 1 & 0 \\\\\\\\\n  0 & 1 & 1 & 1 \\\\\\\\\n  0 & 0 & 2 & 2 \\\\\\\\\n  0 & 0 & 0 & 2\n \\end{bmatrix}$\n\n\b高斯消去法先得到上三角矩阵再回代求解，而$LU$分解先对系数矩阵$A$分解成两上下三角矩阵，然后两次回代求解。\b一般编程语言的科学计算库都是使用$LU$分解求线性方程组。\n\n**定理** 若$n$阶方阵逐次（左上角）主子式$det A_k\\neq 0,k=1,2,\\cdots,n$，则$A$可以分解为单位下三角矩阵和上三角矩阵。顺序Gauss消去法可以顺利进行。\n\n | 高斯消去法                           | $LU$分解                |\n | ---------------------------------- | ----------------------- |\n | $Ax=b\\\\\\\\ \\quad\\Downarrow\\\\\\\\Ux=c$ | $A=LU\\\\\\\\ Ly=b\\\\\\\\Ux=y$ |\n\n> 如上讨论的是顺序Gauss消去法，即除数\b$A(k,k)$不为0，或者说除数不能为0。当我们遇到除数\b$A(k,k)$为0的时候就需要进行行交换，将$A(k,k)=0$时的k行换到下方去。\n\n[《科学计算和C程序集》](https://book.douban.com/subject/4247269/)的高斯消去法代码\b：https://github.com/Love-Chrissie/numerical-computation/blob/master/gelim.c\n\npython代码如下:\n```python\nimport numpy as np\n\n# 输入系数矩阵应以numpy中的array类型输入\n# LU分解又称doolittle分解\ndef doolittle(a, n):\n    # 主行\n    l = np.eye(n)\n    u = np.zeros((n, n))\n    for i in range(n):\n        for j in range(i + 1, n):\n            # 乘子，用于消去第j行的i列\n            a[j, i] = a[j, i] / a[i, i]\n            # 对i+1...n-1列\n            for k in range(i + 1, n):\n                a[j, k] = a[j, k] - a[j, i] * a[i, k]  # 消元\n    for i in range(n):\n        for j in range(n):\n            if (j < i):\n                l[i, j] = a[i, j]  # 下三角矩阵\n            else:\n                u[i, j] = a[i, j]  # 上三角矩阵\n    return a,l,u\n```\n\n\n\n\n\n\n\n---\n","slug":"高斯消去法","published":1,"updated":"2018-10-11T03:09:41.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq9a4s0y00173t9kj3cy03om","content":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><p>高斯消去法与$LU$分解</p><p>高斯消去法思想就是通过初等行变换将\b系数矩阵变换成上三角矩阵，最后一行就解出了最后一个未知数的值，向上回带即可得到结果。</p><p>计算过程就是第二行开始每一行乘以第一行的$\\lambda_{i}$倍，使得每一行第一个系数为0，然后对每一行做同样操作循环下去（下一次从第三行开始，使\b每一行第二个系数为0），使得系数矩阵变成上三角矩阵。最后回带每个未知量，求得结果。</p><p>例，对于线性方程组$\\boldsymbol{Ax}=\\boldsymbol{b}$，其中：<br>$$<br>A=\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>4 &amp; 3 &amp; 3 &amp; 1 \\\\<br>8 &amp; 7 &amp; 9 &amp; 5 \\\\<br>6 &amp; 7 &amp; 9 &amp; 8<br>\\end{bmatrix},\\quad<br>b=\\begin{bmatrix}<br>4 \\\\<br>11 \\\\<br>29 \\\\<br>30<br>\\end{bmatrix}.<br>$$<br>计算步骤：</p><p>$\\begin{aligned}(\\boldsymbol A |\\boldsymbol b)&amp;\\xrightarrow{第一次消元}<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 &amp; 4 \\\\<br>0 &amp; 1 &amp; 1 &amp; 1 &amp; 3 \\\\<br>0 &amp; 3 &amp; 5 &amp; 5 &amp; 13\\\\<br>0 &amp; 4 &amp; 6 &amp; 8 &amp; 18<br>\\end{bmatrix}\\xrightarrow{第二次消元}\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 &amp; 4 \\\\<br>0 &amp; 1 &amp; 1 &amp; 1 &amp; 3 \\\\<br>0 &amp; 0 &amp; 2 &amp; 2 &amp; 4\\\\<br>0 &amp; 0 &amp; 2 &amp; 4 &amp; 6<br>\\end{bmatrix}\\\\&amp;\\xrightarrow{第三次消元}\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 &amp; 4 \\\\<br>0 &amp; 1 &amp; 1 &amp; 1 &amp; 3 \\\\<br>0 &amp; 0 &amp; 2 &amp; 2 &amp; 4\\\\<br>0 &amp; 0 &amp; 0 &amp; 2 &amp; 2<br>\\end{bmatrix}=(\\boldsymbol U|\\boldsymbol c)\\end{aligned}$</p><p>解上三角方程组$\\boldsymbol{Ux}=\\boldsymbol{c}$，得方程组得解为$\\boldsymbol{x}=(1,1,1,1)^{T}$.<br>上述行变换可以用初等矩阵来描述：</p><p>$\\boldsymbol L_1\\boldsymbol A =<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>-2 &amp; 1 &amp; 0 &amp; 0 \\\\<br>-4 &amp; 0 &amp; 1 &amp; 0 \\\\<br>-3 &amp; 0 &amp; 0 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>4 &amp; 3 &amp; 3 &amp; 1 \\\\<br>8 &amp; 7 &amp; 9 &amp; 5 \\\\<br>6 &amp; 7 &amp; 9 &amp; 8<br>\\end{bmatrix}=\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>0 &amp; 1 &amp; 1 &amp; 1 \\\\<br>0 &amp; 3 &amp; 5 &amp; 5 \\\\<br>0 &amp; 4 &amp; 6 &amp; 8<br>\\end{bmatrix}$</p><p>$\\begin{aligned}\\boldsymbol L_2\\boldsymbol L_1\\boldsymbol A &amp;=<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>0 &amp; 1 &amp; 0 &amp; 0 \\\\<br>0 &amp; -3 &amp; 1 &amp; 0 \\\\<br>0 &amp; -4 &amp; 0 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>-2 &amp; 1 &amp; 0 &amp; 0 \\\\<br>-4 &amp; 0 &amp; 1 &amp; 0 \\\\<br>-3 &amp; 0 &amp; 0 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>4 &amp; 3 &amp; 3 &amp; 1 \\\\<br>8 &amp; 7 &amp; 9 &amp; 5 \\\\<br>6 &amp; 7 &amp; 9 &amp; 8<br>\\end{bmatrix}\\\\&amp;=<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>-2 &amp; 1 &amp; 0 &amp; 0 \\\\<br>-4 &amp; -3 &amp; 1 &amp; 0 \\\\<br>-3 &amp; -4 &amp; 0 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>4 &amp; 3 &amp; 3 &amp; 1 \\\\<br>8 &amp; 7 &amp; 9 &amp; 5 \\\\<br>6 &amp; 7 &amp; 9 &amp; 8<br>\\end{bmatrix}=<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>0 &amp; 1 &amp; 1 &amp; 1 \\\\<br>0 &amp; 0 &amp; 2 &amp; 2 \\\\<br>0 &amp; 0 &amp; 2 &amp; 4<br>\\end{bmatrix}\\end{aligned}$</p><p>$\\begin{aligned}\\boldsymbol L_3\\boldsymbol L_2\\boldsymbol L_1\\boldsymbol A &amp;=<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>0 &amp; 1 &amp; 0 &amp; 0 \\\\<br>0 &amp; 0 &amp; 1 &amp; 0 \\\\<br>0 &amp; 0 &amp; -1 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>0 &amp; 1 &amp; 0 &amp; 0 \\\\<br>0 &amp; -3 &amp; 1 &amp; 0 \\\\<br>0 &amp; -4 &amp; 0 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>-2 &amp; 1 &amp; 0 &amp; 0 \\\\<br>-4 &amp; 0 &amp; 1 &amp; 0 \\\\<br>-3 &amp; 0 &amp; 0 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>4 &amp; 3 &amp; 3 &amp; 1 \\\\<br>8 &amp; 7 &amp; 9 &amp; 5 \\\\<br>6 &amp; 7 &amp; 9 &amp; 8<br>\\end{bmatrix}\\\\<br>&amp;=<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>-2 &amp; 1 &amp; 0 &amp; 0 \\\\<br>-4 &amp; -3 &amp; 1 &amp; 0 \\\\<br>-3 &amp; -4 &amp; -1 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>4 &amp; 3 &amp; 3 &amp; 1 \\\\<br>8 &amp; 7 &amp; 9 &amp; 5 \\\\<br>6 &amp; 7 &amp; 9 &amp; 8<br>\\end{bmatrix}=<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>0 &amp; 1 &amp; 1 &amp; 1 \\\\<br>0 &amp; 0 &amp; 2 &amp; 2 \\\\<br>0 &amp; 0 &amp; 0 &amp; 2<br>\\end{bmatrix}=\\boldsymbol U\\end{aligned}$</p><p>所以：</p><p>$\\boldsymbol A=\\boldsymbol L \\boldsymbol U=<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>2 &amp; 1 &amp; 0 &amp; 0 \\\\<br>4 &amp; 3 &amp; 1 &amp; 0 \\\\<br>3 &amp; 4 &amp; 1 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>0 &amp; 1 &amp; 1 &amp; 1 \\\\<br>0 &amp; 0 &amp; 2 &amp; 2 \\\\<br>0 &amp; 0 &amp; 0 &amp; 2<br>\\end{bmatrix}$</p><p>\b高斯消去法先得到上三角矩阵再回代求解，而$LU$分解先对系数矩阵$A$分解成两上下三角矩阵，然后两次回代求解。\b一般编程语言的科学计算库都是使用$LU$分解求线性方程组。</p><p><strong>定理</strong> 若$n$阶方阵逐次（左上角）主子式$det A_k\\neq 0,k=1,2,\\cdots,n$，则$A$可以分解为单位下三角矩阵和上三角矩阵。顺序Gauss消去法可以顺利进行。</p><table><thead><tr><th>高斯消去法</th><th>$LU$分解</th></tr></thead><tbody><tr><td>$Ax=b\\\\ \\quad\\Downarrow\\\\Ux=c$</td><td>$A=LU\\\\ Ly=b\\\\Ux=y$</td></tr></tbody></table><blockquote><p>如上讨论的是顺序Gauss消去法，即除数\b$A(k,k)$不为0，或者说除数不能为0。当我们遇到除数\b$A(k,k)$为0的时候就需要进行行交换，将$A(k,k)=0$时的k行换到下方去。</p></blockquote><p><a href=\"https://book.douban.com/subject/4247269/\" target=\"_blank\" rel=\"noopener\">《科学计算和C程序集》</a>的高斯消去法代码\b：<a href=\"https://github.com/Love-Chrissie/numerical-computation/blob/master/gelim.c\" target=\"_blank\" rel=\"noopener\">https://github.com/Love-Chrissie/numerical-computation/blob/master/gelim.c</a></p><p>python代码如下:<br></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入系数矩阵应以numpy中的array类型输入</span></span><br><span class=\"line\"><span class=\"comment\"># LU分解又称doolittle分解</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doolittle</span><span class=\"params\">(a, n)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 主行</span></span><br><span class=\"line\">    l = np.eye(n)</span><br><span class=\"line\">    u = np.zeros((n, n))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i + <span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"comment\"># 乘子，用于消去第j行的i列</span></span><br><span class=\"line\">            a[j, i] = a[j, i] / a[i, i]</span><br><span class=\"line\">            <span class=\"comment\"># 对i+1...n-1列</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(i + <span class=\"number\">1</span>, n):</span><br><span class=\"line\">                a[j, k] = a[j, k] - a[j, i] * a[i, k]  <span class=\"comment\"># 消元</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j &lt; i):</span><br><span class=\"line\">                l[i, j] = a[i, j]  <span class=\"comment\"># 下三角矩阵</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                u[i, j] = a[i, j]  <span class=\"comment\"># 上三角矩阵</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a,l,u</span><br></pre></td></tr></table></figure><p></p><hr><!-- rebuild by neat -->","site":{"data":{}},"excerpt":"","more":"<!-- build time:Sat Dec 29 2018 17:44:33 GMT+0800 (CST) --><p>高斯消去法与$LU$分解</p><p>高斯消去法思想就是通过初等行变换将\b系数矩阵变换成上三角矩阵，最后一行就解出了最后一个未知数的值，向上回带即可得到结果。</p><p>计算过程就是第二行开始每一行乘以第一行的$\\lambda_{i}$倍，使得每一行第一个系数为0，然后对每一行做同样操作循环下去（下一次从第三行开始，使\b每一行第二个系数为0），使得系数矩阵变成上三角矩阵。最后回带每个未知量，求得结果。</p><p>例，对于线性方程组$\\boldsymbol{Ax}=\\boldsymbol{b}$，其中：<br>$$<br>A=\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>4 &amp; 3 &amp; 3 &amp; 1 \\\\<br>8 &amp; 7 &amp; 9 &amp; 5 \\\\<br>6 &amp; 7 &amp; 9 &amp; 8<br>\\end{bmatrix},\\quad<br>b=\\begin{bmatrix}<br>4 \\\\<br>11 \\\\<br>29 \\\\<br>30<br>\\end{bmatrix}.<br>$$<br>计算步骤：</p><p>$\\begin{aligned}(\\boldsymbol A |\\boldsymbol b)&amp;\\xrightarrow{第一次消元}<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 &amp; 4 \\\\<br>0 &amp; 1 &amp; 1 &amp; 1 &amp; 3 \\\\<br>0 &amp; 3 &amp; 5 &amp; 5 &amp; 13\\\\<br>0 &amp; 4 &amp; 6 &amp; 8 &amp; 18<br>\\end{bmatrix}\\xrightarrow{第二次消元}\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 &amp; 4 \\\\<br>0 &amp; 1 &amp; 1 &amp; 1 &amp; 3 \\\\<br>0 &amp; 0 &amp; 2 &amp; 2 &amp; 4\\\\<br>0 &amp; 0 &amp; 2 &amp; 4 &amp; 6<br>\\end{bmatrix}\\\\&amp;\\xrightarrow{第三次消元}\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 &amp; 4 \\\\<br>0 &amp; 1 &amp; 1 &amp; 1 &amp; 3 \\\\<br>0 &amp; 0 &amp; 2 &amp; 2 &amp; 4\\\\<br>0 &amp; 0 &amp; 0 &amp; 2 &amp; 2<br>\\end{bmatrix}=(\\boldsymbol U|\\boldsymbol c)\\end{aligned}$</p><p>解上三角方程组$\\boldsymbol{Ux}=\\boldsymbol{c}$，得方程组得解为$\\boldsymbol{x}=(1,1,1,1)^{T}$.<br>上述行变换可以用初等矩阵来描述：</p><p>$\\boldsymbol L_1\\boldsymbol A =<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>-2 &amp; 1 &amp; 0 &amp; 0 \\\\<br>-4 &amp; 0 &amp; 1 &amp; 0 \\\\<br>-3 &amp; 0 &amp; 0 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>4 &amp; 3 &amp; 3 &amp; 1 \\\\<br>8 &amp; 7 &amp; 9 &amp; 5 \\\\<br>6 &amp; 7 &amp; 9 &amp; 8<br>\\end{bmatrix}=\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>0 &amp; 1 &amp; 1 &amp; 1 \\\\<br>0 &amp; 3 &amp; 5 &amp; 5 \\\\<br>0 &amp; 4 &amp; 6 &amp; 8<br>\\end{bmatrix}$</p><p>$\\begin{aligned}\\boldsymbol L_2\\boldsymbol L_1\\boldsymbol A &amp;=<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>0 &amp; 1 &amp; 0 &amp; 0 \\\\<br>0 &amp; -3 &amp; 1 &amp; 0 \\\\<br>0 &amp; -4 &amp; 0 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>-2 &amp; 1 &amp; 0 &amp; 0 \\\\<br>-4 &amp; 0 &amp; 1 &amp; 0 \\\\<br>-3 &amp; 0 &amp; 0 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>4 &amp; 3 &amp; 3 &amp; 1 \\\\<br>8 &amp; 7 &amp; 9 &amp; 5 \\\\<br>6 &amp; 7 &amp; 9 &amp; 8<br>\\end{bmatrix}\\\\&amp;=<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>-2 &amp; 1 &amp; 0 &amp; 0 \\\\<br>-4 &amp; -3 &amp; 1 &amp; 0 \\\\<br>-3 &amp; -4 &amp; 0 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>4 &amp; 3 &amp; 3 &amp; 1 \\\\<br>8 &amp; 7 &amp; 9 &amp; 5 \\\\<br>6 &amp; 7 &amp; 9 &amp; 8<br>\\end{bmatrix}=<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>0 &amp; 1 &amp; 1 &amp; 1 \\\\<br>0 &amp; 0 &amp; 2 &amp; 2 \\\\<br>0 &amp; 0 &amp; 2 &amp; 4<br>\\end{bmatrix}\\end{aligned}$</p><p>$\\begin{aligned}\\boldsymbol L_3\\boldsymbol L_2\\boldsymbol L_1\\boldsymbol A &amp;=<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>0 &amp; 1 &amp; 0 &amp; 0 \\\\<br>0 &amp; 0 &amp; 1 &amp; 0 \\\\<br>0 &amp; 0 &amp; -1 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>0 &amp; 1 &amp; 0 &amp; 0 \\\\<br>0 &amp; -3 &amp; 1 &amp; 0 \\\\<br>0 &amp; -4 &amp; 0 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>-2 &amp; 1 &amp; 0 &amp; 0 \\\\<br>-4 &amp; 0 &amp; 1 &amp; 0 \\\\<br>-3 &amp; 0 &amp; 0 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>4 &amp; 3 &amp; 3 &amp; 1 \\\\<br>8 &amp; 7 &amp; 9 &amp; 5 \\\\<br>6 &amp; 7 &amp; 9 &amp; 8<br>\\end{bmatrix}\\\\<br>&amp;=<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>-2 &amp; 1 &amp; 0 &amp; 0 \\\\<br>-4 &amp; -3 &amp; 1 &amp; 0 \\\\<br>-3 &amp; -4 &amp; -1 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>4 &amp; 3 &amp; 3 &amp; 1 \\\\<br>8 &amp; 7 &amp; 9 &amp; 5 \\\\<br>6 &amp; 7 &amp; 9 &amp; 8<br>\\end{bmatrix}=<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>0 &amp; 1 &amp; 1 &amp; 1 \\\\<br>0 &amp; 0 &amp; 2 &amp; 2 \\\\<br>0 &amp; 0 &amp; 0 &amp; 2<br>\\end{bmatrix}=\\boldsymbol U\\end{aligned}$</p><p>所以：</p><p>$\\boldsymbol A=\\boldsymbol L \\boldsymbol U=<br>\\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0 \\\\<br>2 &amp; 1 &amp; 0 &amp; 0 \\\\<br>4 &amp; 3 &amp; 1 &amp; 0 \\\\<br>3 &amp; 4 &amp; 1 &amp; 1<br>\\end{bmatrix}<br>\\begin{bmatrix}<br>2 &amp; 1 &amp; 1 &amp; 0 \\\\<br>0 &amp; 1 &amp; 1 &amp; 1 \\\\<br>0 &amp; 0 &amp; 2 &amp; 2 \\\\<br>0 &amp; 0 &amp; 0 &amp; 2<br>\\end{bmatrix}$</p><p>\b高斯消去法先得到上三角矩阵再回代求解，而$LU$分解先对系数矩阵$A$分解成两上下三角矩阵，然后两次回代求解。\b一般编程语言的科学计算库都是使用$LU$分解求线性方程组。</p><p><strong>定理</strong> 若$n$阶方阵逐次（左上角）主子式$det A_k\\neq 0,k=1,2,\\cdots,n$，则$A$可以分解为单位下三角矩阵和上三角矩阵。顺序Gauss消去法可以顺利进行。</p><table><thead><tr><th>高斯消去法</th><th>$LU$分解</th></tr></thead><tbody><tr><td>$Ax=b\\\\ \\quad\\Downarrow\\\\Ux=c$</td><td>$A=LU\\\\ Ly=b\\\\Ux=y$</td></tr></tbody></table><blockquote><p>如上讨论的是顺序Gauss消去法，即除数\b$A(k,k)$不为0，或者说除数不能为0。当我们遇到除数\b$A(k,k)$为0的时候就需要进行行交换，将$A(k,k)=0$时的k行换到下方去。</p></blockquote><p><a href=\"https://book.douban.com/subject/4247269/\" target=\"_blank\" rel=\"noopener\">《科学计算和C程序集》</a>的高斯消去法代码\b：<a href=\"https://github.com/Love-Chrissie/numerical-computation/blob/master/gelim.c\" target=\"_blank\" rel=\"noopener\">https://github.com/Love-Chrissie/numerical-computation/blob/master/gelim.c</a></p><p>python代码如下:<br></p><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入系数矩阵应以numpy中的array类型输入</span></span><br><span class=\"line\"><span class=\"comment\"># LU分解又称doolittle分解</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doolittle</span><span class=\"params\">(a, n)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 主行</span></span><br><span class=\"line\">    l = np.eye(n)</span><br><span class=\"line\">    u = np.zeros((n, n))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i + <span class=\"number\">1</span>, n):</span><br><span class=\"line\">            <span class=\"comment\"># 乘子，用于消去第j行的i列</span></span><br><span class=\"line\">            a[j, i] = a[j, i] / a[i, i]</span><br><span class=\"line\">            <span class=\"comment\"># 对i+1...n-1列</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> range(i + <span class=\"number\">1</span>, n):</span><br><span class=\"line\">                a[j, k] = a[j, k] - a[j, i] * a[i, k]  <span class=\"comment\"># 消元</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j &lt; i):</span><br><span class=\"line\">                l[i, j] = a[i, j]  <span class=\"comment\"># 下三角矩阵</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                u[i, j] = a[i, j]  <span class=\"comment\"># 上三角矩阵</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a,l,u</span><br></pre></td></tr></table></figure><p></p><hr><!-- rebuild by neat -->"}],"PostAsset":[],"PostCategory":[{"post_id":"cjq9a4s0100023t9kdqg0km2k","category_id":"cjq9a4s0700063t9ky2b3scd6","_id":"cjq9a4s0m000h3t9ki756xe05"},{"post_id":"cjq9a4s0500043t9kamvkk6q1","category_id":"cjq9a4s0700063t9ky2b3scd6","_id":"cjq9a4s0q000m3t9knumixg1k"},{"post_id":"cjq9a4s0800083t9koz08dcr9","category_id":"cjq9a4s0700063t9ky2b3scd6","_id":"cjq9a4s0s000r3t9kjirujxw6"},{"post_id":"cjq9a4s0900093t9k9ubnmbfr","category_id":"cjq9a4s0p000l3t9ky4xk07pc","_id":"cjq9a4s0u000y3t9k723n555f"},{"post_id":"cjq9a4s0r000q3t9k2h34jtwe","category_id":"cjq9a4s0p000l3t9ky4xk07pc","_id":"cjq9a4s0v00113t9kjxfm7upe"},{"post_id":"cjq9a4s0t000v3t9k7iim107l","category_id":"cjq9a4s0p000l3t9ky4xk07pc","_id":"cjq9a4s0y00153t9kglr5q93u"},{"post_id":"cjq9a4s0a000a3t9k9cica8yk","category_id":"cjq9a4s0p000l3t9ky4xk07pc","_id":"cjq9a4s1100183t9k7upekxk9"},{"post_id":"cjq9a4s0u000w3t9kgemz90x1","category_id":"cjq9a4s0700063t9ky2b3scd6","_id":"cjq9a4s11001c3t9kvjblky5c"},{"post_id":"cjq9a4s0v000z3t9ky3k7qudb","category_id":"cjq9a4s0p000l3t9ky4xk07pc","_id":"cjq9a4s12001e3t9kypsjoz4g"},{"post_id":"cjq9a4s0j000f3t9kdvom1fww","category_id":"cjq9a4s0p000l3t9ky4xk07pc","_id":"cjq9a4s12001i3t9kplset6fw"},{"post_id":"cjq9a4s0x00133t9k5gv8ubj2","category_id":"cjq9a4s0p000l3t9ky4xk07pc","_id":"cjq9a4s12001j3t9kma04l1wi"},{"post_id":"cjq9a4s0y00173t9kj3cy03om","category_id":"cjq9a4s0p000l3t9ky4xk07pc","_id":"cjq9a4s13001l3t9k76gbes2t"},{"post_id":"cjq9a4s0n000j3t9kyxs6npch","category_id":"cjq9a4s0p000l3t9ky4xk07pc","_id":"cjq9a4s13001n3t9kiybsbcr3"},{"post_id":"cjq9a4s0p000k3t9k52fpds8c","category_id":"cjq9a4s0p000l3t9ky4xk07pc","_id":"cjq9a4s13001q3t9k72v3mpud"},{"post_id":"cjq9a4s0q000o3t9k9u97xcid","category_id":"cjq9a4s12001h3t9k2oph2y6x","_id":"cjq9a4s13001s3t9kjz6rt4cb"}],"PostTag":[{"post_id":"cjq9a4s0100023t9kdqg0km2k","tag_id":"cjq9a4s0800073t9ksbfhcktm","_id":"cjq9a4s0f000d3t9k711jrejo"},{"post_id":"cjq9a4s0500043t9kamvkk6q1","tag_id":"cjq9a4s0d000c3t9kfkcxc7jf","_id":"cjq9a4s0r000p3t9kfs58lga8"},{"post_id":"cjq9a4s0500043t9kamvkk6q1","tag_id":"cjq9a4s0n000i3t9k2w1brl09","_id":"cjq9a4s0s000t3t9kr7ueaqvd"},{"post_id":"cjq9a4s0800083t9koz08dcr9","tag_id":"cjq9a4s0q000n3t9kp90ag90h","_id":"cjq9a4s0w00123t9kdkuyun0g"},{"post_id":"cjq9a4s0800083t9koz08dcr9","tag_id":"cjq9a4s0s000u3t9kmlejmtjx","_id":"cjq9a4s0y00163t9kqbugoo3n"},{"post_id":"cjq9a4s0x00133t9k5gv8ubj2","tag_id":"cjq9a4s0v00103t9kk1ruqbwx","_id":"cjq9a4s11001a3t9kflmghov5"},{"post_id":"cjq9a4s0900093t9k9ubnmbfr","tag_id":"cjq9a4s0v00103t9kk1ruqbwx","_id":"cjq9a4s12001d3t9klk5un4ov"},{"post_id":"cjq9a4s0y00173t9kj3cy03om","tag_id":"cjq9a4s0v00103t9kk1ruqbwx","_id":"cjq9a4s12001g3t9kpthf95mw"},{"post_id":"cjq9a4s0a000a3t9k9cica8yk","tag_id":"cjq9a4s1100193t9kvashhy8h","_id":"cjq9a4s13001m3t9k7dovo26j"},{"post_id":"cjq9a4s0a000a3t9k9cica8yk","tag_id":"cjq9a4s12001f3t9kcj9m3lfc","_id":"cjq9a4s13001o3t9k6q8ou8oc"},{"post_id":"cjq9a4s0j000f3t9kdvom1fww","tag_id":"cjq9a4s13001k3t9kv92earv8","_id":"cjq9a4s13001r3t9k1blwzhty"},{"post_id":"cjq9a4s0n000j3t9kyxs6npch","tag_id":"cjq9a4s13001p3t9k23voxt6w","_id":"cjq9a4s14001v3t9k6ky92sgv"},{"post_id":"cjq9a4s0n000j3t9kyxs6npch","tag_id":"cjq9a4s13001t3t9k4oj8ya3m","_id":"cjq9a4s14001w3t9kxwniuml0"},{"post_id":"cjq9a4s0p000k3t9k52fpds8c","tag_id":"cjq9a4s14001u3t9kmfingxsv","_id":"cjq9a4s14001z3t9kizgyvj68"},{"post_id":"cjq9a4s0p000k3t9k52fpds8c","tag_id":"cjq9a4s14001x3t9klqwjv6yt","_id":"cjq9a4s1400203t9kye9tzsox"},{"post_id":"cjq9a4s0q000o3t9k9u97xcid","tag_id":"cjq9a4s14001y3t9kbru9klxl","_id":"cjq9a4s1500223t9k6ncqwms2"},{"post_id":"cjq9a4s0r000q3t9k2h34jtwe","tag_id":"cjq9a4s0v00103t9kk1ruqbwx","_id":"cjq9a4s1500243t9kytva8dbj"},{"post_id":"cjq9a4s0t000v3t9k7iim107l","tag_id":"cjq9a4s1500233t9kacs65yn9","_id":"cjq9a4s1600273t9kntue36fl"},{"post_id":"cjq9a4s0t000v3t9k7iim107l","tag_id":"cjq9a4s0v00103t9kk1ruqbwx","_id":"cjq9a4s1600283t9ktfmjjsr4"},{"post_id":"cjq9a4s0u000w3t9kgemz90x1","tag_id":"cjq9a4s1500263t9krksqirbs","_id":"cjq9a4s16002a3t9kf0snmitb"},{"post_id":"cjq9a4s0v000z3t9ky3k7qudb","tag_id":"cjq9a4s1600293t9kjs95t9hn","_id":"cjq9a4s16002b3t9ko8xvyg0u"},{"post_id":"cjq9a4s0j000f3t9kdvom1fww","tag_id":"cjq9cssj10000jt9kt45ohcct","_id":"cjq9cssj80001jt9kyaekc71h"}],"Tag":[{"name":"算法","_id":"cjq9a4s0800073t9ksbfhcktm"},{"name":"递归","_id":"cjq9a4s0d000c3t9kfkcxc7jf"},{"name":"Kata","_id":"cjq9a4s0n000i3t9k2w1brl09"},{"name":"markdown","_id":"cjq9a4s0q000n3t9kp90ag90h"},{"name":"latex","_id":"cjq9a4s0s000u3t9kmlejmtjx"},{"name":"矩阵与数值分析","_id":"cjq9a4s0v00103t9kk1ruqbwx"},{"name":"无穷积分","_id":"cjq9a4s1100193t9kvashhy8h"},{"name":"数论","_id":"cjq9a4s12001f3t9kcj9m3lfc"},{"name":"常微分方程","_id":"cjq9a4s13001k3t9kv92earv8"},{"name":"无理数","_id":"cjq9a4s13001p3t9k23voxt6w"},{"name":"稠密性","_id":"cjq9a4s13001t3t9k4oj8ya3m"},{"name":"导数","_id":"cjq9a4s14001u3t9kmfingxsv"},{"name":"积分","_id":"cjq9a4s14001x3t9klqwjv6yt"},{"name":"拟合","_id":"cjq9a4s14001y3t9kbru9klxl"},{"name":"范数","_id":"cjq9a4s1500233t9kacs65yn9"},{"name":"python","_id":"cjq9a4s1500263t9krksqirbs"},{"name":"二进制","_id":"cjq9a4s1600293t9kjs95t9hn"},{"name":"数学物理方法","_id":"cjq9cssj10000jt9kt45ohcct"}]}}